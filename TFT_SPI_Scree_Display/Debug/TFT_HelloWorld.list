
TFT_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000264d0  080051a8  080051a8  000061a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b678  0802b678  0002d060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802b678  0802b678  0002c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b680  0802b680  0002d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b680  0802b680  0002c680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802b684  0802b684  0002c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0802b688  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000060  0802b6e8  0002d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0802b6e8  0002d224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000747b  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001657  00000000  00000000  0003450b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00035b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000576  00000000  00000000  000362b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001539c  00000000  00000000  0003682e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085d9  00000000  00000000  0004bbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008671b  00000000  00000000  000541a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000260c  00000000  00000000  000da904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dcf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005190 	.word	0x08005190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005190 	.word	0x08005190

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b988 	b.w	8000f84 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	468e      	mov	lr, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	4688      	mov	r8, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d962      	bls.n	8000d68 <__udivmoddi4+0xdc>
 8000ca2:	fab2 f682 	clz	r6, r2
 8000ca6:	b14e      	cbz	r6, 8000cbc <__udivmoddi4+0x30>
 8000ca8:	f1c6 0320 	rsb	r3, r6, #32
 8000cac:	fa01 f806 	lsl.w	r8, r1, r6
 8000cb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb4:	40b7      	lsls	r7, r6
 8000cb6:	ea43 0808 	orr.w	r8, r3, r8
 8000cba:	40b4      	lsls	r4, r6
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd2:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ce0:	f080 80ea 	bcs.w	8000eb8 <__udivmoddi4+0x22c>
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f240 80e7 	bls.w	8000eb8 <__udivmoddi4+0x22c>
 8000cea:	3902      	subs	r1, #2
 8000cec:	443b      	add	r3, r7
 8000cee:	1a9a      	subs	r2, r3, r2
 8000cf0:	b2a3      	uxth	r3, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d02:	459c      	cmp	ip, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x8e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 80d6 	bcs.w	8000ebc <__udivmoddi4+0x230>
 8000d10:	459c      	cmp	ip, r3
 8000d12:	f240 80d3 	bls.w	8000ebc <__udivmoddi4+0x230>
 8000d16:	443b      	add	r3, r7
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1e:	eba3 030c 	sub.w	r3, r3, ip
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40f3      	lsrs	r3, r6
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xb6>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb0>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x14c>
 8000d4a:	4573      	cmp	r3, lr
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xc8>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 8105 	bhi.w	8000f5e <__udivmoddi4+0x2d2>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d0e5      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d62:	e9c5 4800 	strd	r4, r8, [r5]
 8000d66:	e7e2      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f000 8090 	beq.w	8000e8e <__udivmoddi4+0x202>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f040 80a4 	bne.w	8000ec0 <__udivmoddi4+0x234>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	0c03      	lsrs	r3, r0, #16
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	b280      	uxth	r0, r0
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d92:	fb04 f20c 	mul.w	r2, r4, ip
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x11e>
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x11c>
 8000da2:	429a      	cmp	r2, r3
 8000da4:	f200 80e0 	bhi.w	8000f68 <__udivmoddi4+0x2dc>
 8000da8:	46c4      	mov	ip, r8
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000db0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db8:	fb02 f404 	mul.w	r4, r2, r4
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x144>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x142>
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	f200 80ca 	bhi.w	8000f62 <__udivmoddi4+0x2d6>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	1b1b      	subs	r3, r3, r4
 8000dd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x98>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa0e f401 	lsl.w	r4, lr, r1
 8000de8:	fa20 f306 	lsr.w	r3, r0, r6
 8000dec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000df0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df4:	4323      	orrs	r3, r4
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	fa1f fc87 	uxth.w	ip, r7
 8000dfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000e02:	0c1c      	lsrs	r4, r3, #16
 8000e04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1a0>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1e:	f080 809c 	bcs.w	8000f5a <__udivmoddi4+0x2ce>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f240 8099 	bls.w	8000f5a <__udivmoddi4+0x2ce>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	fa1f fe83 	uxth.w	lr, r3
 8000e34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e38:	fb09 4413 	mls	r4, r9, r3, r4
 8000e3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e44:	45a4      	cmp	ip, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1ce>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4e:	f080 8082 	bcs.w	8000f56 <__udivmoddi4+0x2ca>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d97f      	bls.n	8000f56 <__udivmoddi4+0x2ca>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e66:	4564      	cmp	r4, ip
 8000e68:	4673      	mov	r3, lr
 8000e6a:	46e1      	mov	r9, ip
 8000e6c:	d362      	bcc.n	8000f34 <__udivmoddi4+0x2a8>
 8000e6e:	d05f      	beq.n	8000f30 <__udivmoddi4+0x2a4>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x1fe>
 8000e72:	ebb8 0203 	subs.w	r2, r8, r3
 8000e76:	eb64 0409 	sbc.w	r4, r4, r9
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e82:	431e      	orrs	r6, r3
 8000e84:	40cc      	lsrs	r4, r1
 8000e86:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e74f      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000e8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e92:	0c01      	lsrs	r1, r0, #16
 8000e94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e98:	b280      	uxth	r0, r0
 8000e9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	463c      	mov	r4, r7
 8000ea4:	46b8      	mov	r8, r7
 8000ea6:	46be      	mov	lr, r7
 8000ea8:	2620      	movs	r6, #32
 8000eaa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eae:	eba2 0208 	sub.w	r2, r2, r8
 8000eb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb6:	e766      	b.n	8000d86 <__udivmoddi4+0xfa>
 8000eb8:	4601      	mov	r1, r0
 8000eba:	e718      	b.n	8000cee <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e72c      	b.n	8000d1a <__udivmoddi4+0x8e>
 8000ec0:	f1c6 0220 	rsb	r2, r6, #32
 8000ec4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec8:	40b7      	lsls	r7, r6
 8000eca:	40b1      	lsls	r1, r6
 8000ecc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ee0:	0c11      	lsrs	r1, r2, #16
 8000ee2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee6:	fb08 f904 	mul.w	r9, r8, r4
 8000eea:	40b0      	lsls	r0, r6
 8000eec:	4589      	cmp	r9, r1
 8000eee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ef2:	b280      	uxth	r0, r0
 8000ef4:	d93e      	bls.n	8000f74 <__udivmoddi4+0x2e8>
 8000ef6:	1879      	adds	r1, r7, r1
 8000ef8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000efc:	d201      	bcs.n	8000f02 <__udivmoddi4+0x276>
 8000efe:	4589      	cmp	r9, r1
 8000f00:	d81f      	bhi.n	8000f42 <__udivmoddi4+0x2b6>
 8000f02:	eba1 0109 	sub.w	r1, r1, r9
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f12:	b292      	uxth	r2, r2
 8000f14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f18:	4542      	cmp	r2, r8
 8000f1a:	d229      	bcs.n	8000f70 <__udivmoddi4+0x2e4>
 8000f1c:	18ba      	adds	r2, r7, r2
 8000f1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f22:	d2c4      	bcs.n	8000eae <__udivmoddi4+0x222>
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d2c2      	bcs.n	8000eae <__udivmoddi4+0x222>
 8000f28:	f1a9 0102 	sub.w	r1, r9, #2
 8000f2c:	443a      	add	r2, r7
 8000f2e:	e7be      	b.n	8000eae <__udivmoddi4+0x222>
 8000f30:	45f0      	cmp	r8, lr
 8000f32:	d29d      	bcs.n	8000e70 <__udivmoddi4+0x1e4>
 8000f34:	ebbe 0302 	subs.w	r3, lr, r2
 8000f38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	46e1      	mov	r9, ip
 8000f40:	e796      	b.n	8000e70 <__udivmoddi4+0x1e4>
 8000f42:	eba7 0909 	sub.w	r9, r7, r9
 8000f46:	4449      	add	r1, r9
 8000f48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f50:	fb09 f804 	mul.w	r8, r9, r4
 8000f54:	e7db      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f56:	4673      	mov	r3, lr
 8000f58:	e77f      	b.n	8000e5a <__udivmoddi4+0x1ce>
 8000f5a:	4650      	mov	r0, sl
 8000f5c:	e766      	b.n	8000e2c <__udivmoddi4+0x1a0>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e6fd      	b.n	8000d5e <__udivmoddi4+0xd2>
 8000f62:	443b      	add	r3, r7
 8000f64:	3a02      	subs	r2, #2
 8000f66:	e733      	b.n	8000dd0 <__udivmoddi4+0x144>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	443b      	add	r3, r7
 8000f6e:	e71c      	b.n	8000daa <__udivmoddi4+0x11e>
 8000f70:	4649      	mov	r1, r9
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x222>
 8000f74:	eba1 0109 	sub.w	r1, r1, r9
 8000f78:	46c4      	mov	ip, r8
 8000f7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7e:	fb09 f804 	mul.w	r8, r9, r4
 8000f82:	e7c4      	b.n	8000f0e <__udivmoddi4+0x282>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f001 f9e5 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f8f5 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f991 	bl	80012bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f9a:	f000 f959 	bl	8001250 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  TFT_Init();
 8000f9e:	f000 fabd 	bl	800151c <TFT_Init>
  TFT_SetRotation(TFT_ROTATION_0);
 8000fa2:	2048      	movs	r0, #72	@ 0x48
 8000fa4:	f000 ff80 	bl	8001ea8 <TFT_SetRotation>
  TFT_InvertColors(TRUE);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f000 fbb5 	bl	8001718 <TFT_InvertColors>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		  // Display background image
    /* USER CODE END WHILE */
		      TFT_BackgroundImage(0, 0, image4, IMAGE_WIDTH, IMAGE_HEIGHT);
 8000fae:	23f0      	movs	r3, #240	@ 0xf0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fb6:	4a6b      	ldr	r2, [pc, #428]	@ (8001164 <main+0x1dc>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f001 f952 	bl	8002264 <TFT_BackgroundImage>
		      TFT_printf(10, 5, TFT_WHITE, TRANSPARENT, 1, "10:37PM");
 8000fc0:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <main+0x1e0>)
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fce:	2105      	movs	r1, #5
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f000 ffa7 	bl	8001f24 <TFT_printf>
		      TFT_DrawSymbol(230, 5, BATTERY_50, TFT_WHITE, 2);
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fde:	220d      	movs	r2, #13
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	20e6      	movs	r0, #230	@ 0xe6
 8000fe4:	f000 fc04 	bl	80017f0 <TFT_DrawSymbol>
		      TFT_DrawSymbol(250, 5, BATTERY_CHARGING, TFT_WHITE, 1);
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff0:	2210      	movs	r2, #16
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	20fa      	movs	r0, #250	@ 0xfa
 8000ff6:	f000 fbfb 	bl	80017f0 <TFT_DrawSymbol>

//	  TFT_ClearScreen();
//	      TFT_BackgroundImage(0, 0, image4, IMAGE_WIDTH, IMAGE_HEIGHT);
//
	      // Show full character set capabilities
	      TFT_printf(5, 60, TFT_WHITE, TFT_BLUE, 1, "ABCDEFGHIHJKLMNOPQRSTUVWXYZE");
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800116c <main+0x1e4>)
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800100a:	213c      	movs	r1, #60	@ 0x3c
 800100c:	2005      	movs	r0, #5
 800100e:	f000 ff89 	bl	8001f24 <TFT_printf>
	      TFT_printf(5, 80, TFT_GREEN, TRANSPARENT, 1, "lowercase: abcdefghijklmnopqrstuvwxyz");
 8001012:	4b57      	ldr	r3, [pc, #348]	@ (8001170 <main+0x1e8>)
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	2301      	movs	r3, #1
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2300      	movs	r3, #0
 800101c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001020:	2150      	movs	r1, #80	@ 0x50
 8001022:	2005      	movs	r0, #5
 8001024:	f000 ff7e 	bl	8001f24 <TFT_printf>
	      TFT_printf(5, 100, TFT_CYAN, TRANSPARENT, 1, "1234567890!!1234567890");
 8001028:	4b52      	ldr	r3, [pc, #328]	@ (8001174 <main+0x1ec>)
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2301      	movs	r3, #1
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001036:	2164      	movs	r1, #100	@ 0x64
 8001038:	2005      	movs	r0, #5
 800103a:	f000 ff73 	bl	8001f24 <TFT_printf>
	      TFT_printf(5, 120, TFT_YELLOW, TRANSPARENT, 1, "Jollof Rice of Nigeria");
 800103e:	4b4e      	ldr	r3, [pc, #312]	@ (8001178 <main+0x1f0>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2301      	movs	r3, #1
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800104c:	2178      	movs	r1, #120	@ 0x78
 800104e:	2005      	movs	r0, #5
 8001050:	f000 ff68 	bl	8001f24 <TFT_printf>
	      TFT_printf(5, 140, TFT_YELLOW, TRANSPARENT, 1, "JOLLOF RICE OF NIGERIA");
 8001054:	4b49      	ldr	r3, [pc, #292]	@ (800117c <main+0x1f4>)
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001062:	218c      	movs	r1, #140	@ 0x8c
 8001064:	2005      	movs	r0, #5
 8001066:	f000 ff5d 	bl	8001f24 <TFT_printf>
//	      // Mixed case with formatting
//	      char *username = "JohnDoe";
//	      int level = 42;
//	      TFT_printf(10, 265, TFT_BLACK, TFT_CYAN, 2, "User: %s, Level: %d", username, level);

	  for (int i = 0; i < 320;i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e074      	b.n	800115a <main+0x1d2>
		  // Write text with background restoration
//	      int result = TFT_WriteTextOnBackgroundImage(i, 80, "if", TFT_WHITE,
//	                                             image2, IMAGE_WIDTH, IMAGE_HEIGHT,
//												 FONT_SIZE_MEDIUM, text_bg_buffer, TEXT_BUFFER_SIZE);
//
	      if(i  < 100 && i > 0){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b63      	cmp	r3, #99	@ 0x63
 8001074:	dc1a      	bgt.n	80010ac <main+0x124>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dd17      	ble.n	80010ac <main+0x124>
	    	  TFT_DrawSymbol(280, 5, ARROW_DOWN, TFT_GRAY, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	f248 4310 	movw	r3, #33808	@ 0x8410
 8001084:	2208      	movs	r2, #8
 8001086:	2105      	movs	r1, #5
 8001088:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800108c:	f000 fbb0 	bl	80017f0 <TFT_DrawSymbol>
	    	  TFT_DrawSymbol(290, 5, ARROW_UP, TFT_WHITE, 1);
 8001090:	2301      	movs	r3, #1
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001098:	2207      	movs	r2, #7
 800109a:	2105      	movs	r1, #5
 800109c:	f44f 7091 	mov.w	r0, #290	@ 0x122
 80010a0:	f000 fba6 	bl	80017f0 <TFT_DrawSymbol>
	    	  HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f001 f9cb 	bl	8002440 <HAL_Delay>
 80010aa:	e053      	b.n	8001154 <main+0x1cc>

//	      TFT_DrawClock(10, 5, 7, 28, 52, TFT_WHITE, TFT_BLUE, 3, 0);
	      }else if(i < 200 && i > 100){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80010b0:	dc1a      	bgt.n	80010e8 <main+0x160>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b64      	cmp	r3, #100	@ 0x64
 80010b6:	dd17      	ble.n	80010e8 <main+0x160>

	    	  TFT_DrawSymbol(280, 5, ARROW_DOWN, TFT_WHITE, 1);
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c0:	2208      	movs	r2, #8
 80010c2:	2105      	movs	r1, #5
 80010c4:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80010c8:	f000 fb92 	bl	80017f0 <TFT_DrawSymbol>
	    	  TFT_DrawSymbol(290, 5, ARROW_UP, TFT_GRAY, 1);
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f248 4310 	movw	r3, #33808	@ 0x8410
 80010d4:	2207      	movs	r2, #7
 80010d6:	2105      	movs	r1, #5
 80010d8:	f44f 7091 	mov.w	r0, #290	@ 0x122
 80010dc:	f000 fb88 	bl	80017f0 <TFT_DrawSymbol>
	    	  HAL_Delay(20);
 80010e0:	2014      	movs	r0, #20
 80010e2:	f001 f9ad 	bl	8002440 <HAL_Delay>
 80010e6:	e035      	b.n	8001154 <main+0x1cc>
	      }else if(i < 300 && i > 200){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80010ee:	da1a      	bge.n	8001126 <main+0x19e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80010f4:	dd17      	ble.n	8001126 <main+0x19e>
	    	  TFT_DrawSymbol(280, 5, ARROW_DOWN, TFT_WHITE, 1);
 80010f6:	2301      	movs	r3, #1
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fe:	2208      	movs	r2, #8
 8001100:	2105      	movs	r1, #5
 8001102:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001106:	f000 fb73 	bl	80017f0 <TFT_DrawSymbol>
	    	  TFT_DrawSymbol(290, 5, ARROW_UP, TFT_WHITE, 1);
 800110a:	2301      	movs	r3, #1
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001112:	2207      	movs	r2, #7
 8001114:	2105      	movs	r1, #5
 8001116:	f44f 7091 	mov.w	r0, #290	@ 0x122
 800111a:	f000 fb69 	bl	80017f0 <TFT_DrawSymbol>
	    	  HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	@ 0x32
 8001120:	f001 f98e 	bl	8002440 <HAL_Delay>
 8001124:	e016      	b.n	8001154 <main+0x1cc>
	      }else {
	    	  TFT_DrawSymbol(280, 5, ARROW_DOWN, TFT_GRAY, 1);
 8001126:	2301      	movs	r3, #1
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f248 4310 	movw	r3, #33808	@ 0x8410
 800112e:	2208      	movs	r2, #8
 8001130:	2105      	movs	r1, #5
 8001132:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001136:	f000 fb5b 	bl	80017f0 <TFT_DrawSymbol>
	    	  TFT_DrawSymbol(290, 5, ARROW_UP, TFT_GRAY, 1);
 800113a:	2301      	movs	r3, #1
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	f248 4310 	movw	r3, #33808	@ 0x8410
 8001142:	2207      	movs	r2, #7
 8001144:	2105      	movs	r1, #5
 8001146:	f44f 7091 	mov.w	r0, #290	@ 0x122
 800114a:	f000 fb51 	bl	80017f0 <TFT_DrawSymbol>
	    	  HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f001 f976 	bl	8002440 <HAL_Delay>
	  for (int i = 0; i < 320;i++) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3301      	adds	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001160:	db86      	blt.n	8001070 <main+0xe8>
	      TFT_printf(5, 60, TFT_WHITE, TFT_BLUE, 1, "ABCDEFGHIHJKLMNOPQRSTUVWXYZE");
 8001162:	e74a      	b.n	8000ffa <main+0x72>
 8001164:	08005240 	.word	0x08005240
 8001168:	080051a8 	.word	0x080051a8
 800116c:	080051b0 	.word	0x080051b0
 8001170:	080051d0 	.word	0x080051d0
 8001174:	080051f8 	.word	0x080051f8
 8001178:	08005210 	.word	0x08005210
 800117c:	08005228 	.word	0x08005228

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	@ 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	@ 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fb08 	bl	80037a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <SystemClock_Config+0xc8>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a26      	ldr	r2, [pc, #152]	@ (8001248 <SystemClock_Config+0xc8>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <SystemClock_Config+0xc8>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <SystemClock_Config+0xcc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a20      	ldr	r2, [pc, #128]	@ (800124c <SystemClock_Config+0xcc>)
 80011ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <SystemClock_Config+0xcc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80011f0:	230c      	movs	r3, #12
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011f4:	2360      	movs	r3, #96	@ 0x60
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fbc3 	bl	8002990 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001210:	f000 f896 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2103      	movs	r1, #3
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fe25 	bl	8002e80 <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800123c:	f000 f880 	bl	8001340 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	@ 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001256:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <MX_SPI1_Init+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_SPI1_Init+0x64>)
 800125c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001260:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_SPI1_Init+0x64>)
 800127c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001280:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_SPI1_Init+0x64>)
 800129c:	220a      	movs	r2, #10
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <MX_SPI1_Init+0x64>)
 80012a2:	f001 ff99 	bl	80031d8 <HAL_SPI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012ac:	f000 f848 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000007c 	.word	0x2000007c
 80012b8:	40013000 	.word	0x40013000

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_GPIO_Init+0x7c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a17      	ldr	r2, [pc, #92]	@ (8001338 <MX_GPIO_Init+0x7c>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_GPIO_Init+0x7c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_GPIO_Init+0x7c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <MX_GPIO_Init+0x7c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_GPIO_Init+0x7c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2113      	movs	r1, #19
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_GPIO_Init+0x80>)
 8001310:	f001 fb24 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001314:	2313      	movs	r3, #19
 8001316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_GPIO_Init+0x80>)
 800132c:	f001 f992 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001360:	6453      	str	r3, [r2, #68]	@ 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	@ (8001420 <HAL_SPI_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_SPI_MspInit+0x88>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <HAL_SPI_MspInit+0x88>)
 80013c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <HAL_SPI_MspInit+0x88>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_SPI_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <HAL_SPI_MspInit+0x88>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_SPI_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23e0      	movs	r3, #224	@ 0xe0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001406:	2305      	movs	r3, #5
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <HAL_SPI_MspInit+0x8c>)
 8001412:	f001 f91f 	bl	8002654 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	@ 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40013000 	.word	0x40013000
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <MemManage_Handler+0x4>

08001444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <UsageFault_Handler+0x4>

08001454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001482:	f000 ffbd 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f002 f97a 	bl	80037b4 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20020000 	.word	0x20020000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	200000d4 	.word	0x200000d4
 80014f4:	20000228 	.word	0x20000228

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <TFT_Init>:


/**************************************************************************/
                           /* Utility Functions */
/**************************************************************************/
void TFT_Init(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2110      	movs	r1, #16
 8001524:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <TFT_Init+0x94>)
 8001526:	f001 fa19 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2102      	movs	r1, #2
 800152e:	4820      	ldr	r0, [pc, #128]	@ (80015b0 <TFT_Init+0x94>)
 8001530:	f001 fa14 	bl	800295c <HAL_GPIO_WritePin>

    TFT_Reset();
 8001534:	f000 f8ae 	bl	8001694 <TFT_Reset>

    TFT_WriteCommand(TFT_SWRESET);
 8001538:	2001      	movs	r0, #1
 800153a:	f000 f83b 	bl	80015b4 <TFT_WriteCommand>
    HAL_Delay(150);
 800153e:	2096      	movs	r0, #150	@ 0x96
 8001540:	f000 ff7e 	bl	8002440 <HAL_Delay>

    TFT_WriteCommand(TFT_SLPOUT);
 8001544:	2011      	movs	r0, #17
 8001546:	f000 f835 	bl	80015b4 <TFT_WriteCommand>
    HAL_Delay(120);
 800154a:	2078      	movs	r0, #120	@ 0x78
 800154c:	f000 ff78 	bl	8002440 <HAL_Delay>

    TFT_WriteCommand(TFT_COLMOD);
 8001550:	203a      	movs	r0, #58	@ 0x3a
 8001552:	f000 f82f 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData(0x55);
 8001556:	2055      	movs	r0, #85	@ 0x55
 8001558:	f000 f84e 	bl	80015f8 <TFT_WriteData>

    TFT_SetRotation(TFT_ROTATION_0);
 800155c:	2048      	movs	r0, #72	@ 0x48
 800155e:	f000 fca3 	bl	8001ea8 <TFT_SetRotation>

    TFT_WriteCommand(TFT_PWCTR1);
 8001562:	20c0      	movs	r0, #192	@ 0xc0
 8001564:	f000 f826 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData(0x23);
 8001568:	2023      	movs	r0, #35	@ 0x23
 800156a:	f000 f845 	bl	80015f8 <TFT_WriteData>

    TFT_WriteCommand(TFT_PWCTR2);
 800156e:	20c1      	movs	r0, #193	@ 0xc1
 8001570:	f000 f820 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData(0x10);
 8001574:	2010      	movs	r0, #16
 8001576:	f000 f83f 	bl	80015f8 <TFT_WriteData>

    TFT_WriteCommand(TFT_VMCTR1);
 800157a:	20c5      	movs	r0, #197	@ 0xc5
 800157c:	f000 f81a 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData(0x3E);
 8001580:	203e      	movs	r0, #62	@ 0x3e
 8001582:	f000 f839 	bl	80015f8 <TFT_WriteData>
    TFT_WriteData(0x28);
 8001586:	2028      	movs	r0, #40	@ 0x28
 8001588:	f000 f836 	bl	80015f8 <TFT_WriteData>

    TFT_WriteCommand(TFT_VMCTR2);
 800158c:	20c7      	movs	r0, #199	@ 0xc7
 800158e:	f000 f811 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData(0x86);
 8001592:	2086      	movs	r0, #134	@ 0x86
 8001594:	f000 f830 	bl	80015f8 <TFT_WriteData>

    TFT_WriteCommand(TFT_INVON);
 8001598:	2021      	movs	r0, #33	@ 0x21
 800159a:	f000 f80b 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteCommand(TFT_DISPON);
 800159e:	2029      	movs	r0, #41	@ 0x29
 80015a0:	f000 f808 	bl	80015b4 <TFT_WriteCommand>
    HAL_Delay(120);
 80015a4:	2078      	movs	r0, #120	@ 0x78
 80015a6:	f000 ff4b 	bl	8002440 <HAL_Delay>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40020000 	.word	0x40020000

080015b4 <TFT_WriteCommand>:

// Hardware-specific functions (implement these according to your setup)
void TFT_WriteCommand(uint8_t cmd) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <TFT_WriteCommand+0x3c>)
 80015c4:	f001 f9ca 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <TFT_WriteCommand+0x3c>)
 80015ce:	f001 f9c5 	bl	800295c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80015d2:	1df9      	adds	r1, r7, #7
 80015d4:	2364      	movs	r3, #100	@ 0x64
 80015d6:	2201      	movs	r2, #1
 80015d8:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <TFT_WriteCommand+0x40>)
 80015da:	f001 fe86 	bl	80032ea <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2110      	movs	r1, #16
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <TFT_WriteCommand+0x3c>)
 80015e4:	f001 f9ba 	bl	800295c <HAL_GPIO_WritePin>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40020000 	.word	0x40020000
 80015f4:	2000007c 	.word	0x2000007c

080015f8 <TFT_WriteData>:

void TFT_WriteData(uint8_t data) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2102      	movs	r1, #2
 8001606:	480b      	ldr	r0, [pc, #44]	@ (8001634 <TFT_WriteData+0x3c>)
 8001608:	f001 f9a8 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2110      	movs	r1, #16
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <TFT_WriteData+0x3c>)
 8001612:	f001 f9a3 	bl	800295c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001616:	1df9      	adds	r1, r7, #7
 8001618:	2364      	movs	r3, #100	@ 0x64
 800161a:	2201      	movs	r2, #1
 800161c:	4806      	ldr	r0, [pc, #24]	@ (8001638 <TFT_WriteData+0x40>)
 800161e:	f001 fe64 	bl	80032ea <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <TFT_WriteData+0x3c>)
 8001628:	f001 f998 	bl	800295c <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020000 	.word	0x40020000
 8001638:	2000007c 	.word	0x2000007c

0800163c <TFT_WriteData16>:

void TFT_WriteData16(uint16_t data) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = data >> 8;
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	b29b      	uxth	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2102      	movs	r1, #2
 800165a:	480c      	ldr	r0, [pc, #48]	@ (800168c <TFT_WriteData16+0x50>)
 800165c:	f001 f97e 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2110      	movs	r1, #16
 8001664:	4809      	ldr	r0, [pc, #36]	@ (800168c <TFT_WriteData16+0x50>)
 8001666:	f001 f979 	bl	800295c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
 800166a:	f107 010c 	add.w	r1, r7, #12
 800166e:	2364      	movs	r3, #100	@ 0x64
 8001670:	2202      	movs	r2, #2
 8001672:	4807      	ldr	r0, [pc, #28]	@ (8001690 <TFT_WriteData16+0x54>)
 8001674:	f001 fe39 	bl	80032ea <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	4803      	ldr	r0, [pc, #12]	@ (800168c <TFT_WriteData16+0x50>)
 800167e:	f001 f96d 	bl	800295c <HAL_GPIO_WritePin>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020000 	.word	0x40020000
 8001690:	2000007c 	.word	0x2000007c

08001694 <TFT_Reset>:

void TFT_Reset(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_RST_PORT, TFT_RST_PIN, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	4807      	ldr	r0, [pc, #28]	@ (80016bc <TFT_Reset+0x28>)
 800169e:	f001 f95d 	bl	800295c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80016a2:	2064      	movs	r0, #100	@ 0x64
 80016a4:	f000 fecc 	bl	8002440 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_PORT, TFT_RST_PIN, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2101      	movs	r1, #1
 80016ac:	4803      	ldr	r0, [pc, #12]	@ (80016bc <TFT_Reset+0x28>)
 80016ae:	f001 f955 	bl	800295c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	@ 0x64
 80016b4:	f000 fec4 	bl	8002440 <HAL_Delay>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40020000 	.word	0x40020000

080016c0 <TFT_SetAddressWindow>:

void TFT_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4623      	mov	r3, r4
 80016d0:	80fb      	strh	r3, [r7, #6]
 80016d2:	4603      	mov	r3, r0
 80016d4:	80bb      	strh	r3, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	803b      	strh	r3, [r7, #0]
	TFT_WriteCommand(TFT_CASET);
 80016de:	202a      	movs	r0, #42	@ 0x2a
 80016e0:	f7ff ff68 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData16(x0);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffa8 	bl	800163c <TFT_WriteData16>
    TFT_WriteData16(x1);
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ffa4 	bl	800163c <TFT_WriteData16>

    TFT_WriteCommand(TFT_RASET);
 80016f4:	202b      	movs	r0, #43	@ 0x2b
 80016f6:	f7ff ff5d 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData16(y0);
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff9d 	bl	800163c <TFT_WriteData16>
    TFT_WriteData16(y1);
 8001702:	883b      	ldrh	r3, [r7, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff99 	bl	800163c <TFT_WriteData16>

    TFT_WriteCommand(TFT_RAMWR);
 800170a:	202c      	movs	r0, #44	@ 0x2c
 800170c:	f7ff ff52 	bl	80015b4 <TFT_WriteCommand>
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <TFT_InvertColors>:


void TFT_InvertColors(uint8_t invert) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
    if (invert) {
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <TFT_InvertColors+0x18>
        TFT_WriteCommand(TFT_INVON);  // Display inversion on
 8001728:	2021      	movs	r0, #33	@ 0x21
 800172a:	f7ff ff43 	bl	80015b4 <TFT_WriteCommand>
    } else {
        TFT_WriteCommand(TFT_INVOFF); // Display inversion off
    }
}
 800172e:	e002      	b.n	8001736 <TFT_InvertColors+0x1e>
        TFT_WriteCommand(TFT_INVOFF); // Display inversion off
 8001730:	2020      	movs	r0, #32
 8001732:	f7ff ff3f 	bl	80015b4 <TFT_WriteCommand>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <TFT_DrawPixel>:
 * @param y Y coordinate (0 to height-1)
 * @param color 16-bit color value (RGB565 format)
 * @note Includes boundary checking and optimized SPI transmission
 * @example TFT_DrawPixel(100, 150, TFT_RED);
 */
void TFT_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	460b      	mov	r3, r1
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	807b      	strh	r3, [r7, #2]
    // Boundary checking - prevent drawing outside display area
    if (x >= TFT_GetWidth() || y >= TFT_GetHeight()) {
 8001752:	f000 fbbf 	bl	8001ed4 <TFT_GetWidth>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4293      	cmp	r3, r2
 800175e:	d23f      	bcs.n	80017e0 <TFT_DrawPixel+0xa0>
 8001760:	f000 fbcc 	bl	8001efc <TFT_GetHeight>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	4293      	cmp	r3, r2
 800176c:	d238      	bcs.n	80017e0 <TFT_DrawPixel+0xa0>
        return; // Pixel outside display boundaries
    }

    // Set address window to single pixel
    TFT_WriteCommand(TFT_CASET); // Column address set
 800176e:	202a      	movs	r0, #42	@ 0x2a
 8001770:	f7ff ff20 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData16(x);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff60 	bl	800163c <TFT_WriteData16>
    TFT_WriteData16(x);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff5c 	bl	800163c <TFT_WriteData16>

    TFT_WriteCommand(TFT_RASET); // Row address set
 8001784:	202b      	movs	r0, #43	@ 0x2b
 8001786:	f7ff ff15 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData16(y);
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff55 	bl	800163c <TFT_WriteData16>
    TFT_WriteData16(y);
 8001792:	88bb      	ldrh	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff51 	bl	800163c <TFT_WriteData16>

    TFT_WriteCommand(TFT_RAMWR); // Memory write
 800179a:	202c      	movs	r0, #44	@ 0x2c
 800179c:	f7ff ff0a 	bl	80015b4 <TFT_WriteCommand>

    // Send pixel data with optimized SPI transmission
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET); // Data mode
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	4810      	ldr	r0, [pc, #64]	@ (80017e8 <TFT_DrawPixel+0xa8>)
 80017a6:	f001 f8d9 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET); // CS low
 80017aa:	2200      	movs	r2, #0
 80017ac:	2110      	movs	r1, #16
 80017ae:	480e      	ldr	r0, [pc, #56]	@ (80017e8 <TFT_DrawPixel+0xa8>)
 80017b0:	f001 f8d4 	bl	800295c <HAL_GPIO_WritePin>

    uint8_t color_data[2] = {color >> 8, color & 0xFF};
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	733b      	strb	r3, [r7, #12]
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, color_data, 2, HAL_MAX_DELAY);
 80017c4:	f107 010c 	add.w	r1, r7, #12
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	2202      	movs	r2, #2
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <TFT_DrawPixel+0xac>)
 80017d0:	f001 fd8b 	bl	80032ea <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET); // CS high
 80017d4:	2201      	movs	r2, #1
 80017d6:	2110      	movs	r1, #16
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <TFT_DrawPixel+0xa8>)
 80017da:	f001 f8bf 	bl	800295c <HAL_GPIO_WritePin>
 80017de:	e000      	b.n	80017e2 <TFT_DrawPixel+0xa2>
        return; // Pixel outside display boundaries
 80017e0:	bf00      	nop
}
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020000 	.word	0x40020000
 80017ec:	2000007c 	.word	0x2000007c

080017f0 <TFT_DrawSymbol>:
    }
}



void TFT_DrawSymbol(uint16_t x, uint16_t y, uint8_t symbol, uint16_t color, uint8_t size) {
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	4603      	mov	r3, r0
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	70fb      	strb	r3, [r7, #3]
 800180a:	4613      	mov	r3, r2
 800180c:	803b      	strh	r3, [r7, #0]
    if(symbol < 1 || symbol > 26) return; // Updated range check
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d07f      	beq.n	8001914 <TFT_DrawSymbol+0x124>
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b1a      	cmp	r3, #26
 8001818:	d87c      	bhi.n	8001914 <TFT_DrawSymbol+0x124>

    const uint8_t *bitmap = symbol_bitmaps[symbol - 1];
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	3b01      	subs	r3, #1
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4a3e      	ldr	r2, [pc, #248]	@ (800191c <TFT_DrawSymbol+0x12c>)
 8001822:	4413      	add	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]

    // Special handling for battery levels with bars
    if(symbol >= BATTERY_0 && symbol <= BATTERY_100) {
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	2b0a      	cmp	r3, #10
 800182a:	d90d      	bls.n	8001848 <TFT_DrawSymbol+0x58>
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	d80a      	bhi.n	8001848 <TFT_DrawSymbol+0x58>
        TFT_DrawBatteryWithBars(x, y, symbol, color, size);
 8001832:	88f8      	ldrh	r0, [r7, #6]
 8001834:	88b9      	ldrh	r1, [r7, #4]
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	883c      	ldrh	r4, [r7, #0]
 800183a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4623      	mov	r3, r4
 8001842:	f000 f86d 	bl	8001920 <TFT_DrawBatteryWithBars>
        return;
 8001846:	e066      	b.n	8001916 <TFT_DrawSymbol+0x126>
    }

    // Special handling for WiFi signals with bars
    if(symbol >= WIFI_0 && symbol <= WIFI_4) {
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	2b10      	cmp	r3, #16
 800184c:	d90d      	bls.n	800186a <TFT_DrawSymbol+0x7a>
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	2b15      	cmp	r3, #21
 8001852:	d80a      	bhi.n	800186a <TFT_DrawSymbol+0x7a>
        TFT_DrawWifiWithBars(x, y, symbol, color, size);
 8001854:	88f8      	ldrh	r0, [r7, #6]
 8001856:	88b9      	ldrh	r1, [r7, #4]
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	883c      	ldrh	r4, [r7, #0]
 800185c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	4623      	mov	r3, r4
 8001864:	f000 f900 	bl	8001a68 <TFT_DrawWifiWithBars>
        return;
 8001868:	e055      	b.n	8001916 <TFT_DrawSymbol+0x126>
    }

    // Standard symbol drawing
    for(uint8_t row = 0; row < 8; row++) {
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e04d      	b.n	800190c <TFT_DrawSymbol+0x11c>
        for(uint8_t col = 0; col < 8; col++) {
 8001870:	2300      	movs	r3, #0
 8001872:	73bb      	strb	r3, [r7, #14]
 8001874:	e044      	b.n	8001900 <TFT_DrawSymbol+0x110>
            if(bitmap[row] & (1 << (7 - col))) {
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	7bbb      	ldrb	r3, [r7, #14]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	fa42 f303 	asr.w	r3, r2, r3
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d033      	beq.n	80018fa <TFT_DrawSymbol+0x10a>
                if(size == 1) {
 8001892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d10e      	bne.n	80018b8 <TFT_DrawSymbol+0xc8>
                    TFT_DrawPixel(x + col, y + row, color);
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	b29a      	uxth	r2, r3
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4413      	add	r3, r2
 80018a2:	b298      	uxth	r0, r3
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	883a      	ldrh	r2, [r7, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff ff45 	bl	8001740 <TFT_DrawPixel>
 80018b6:	e020      	b.n	80018fa <TFT_DrawSymbol+0x10a>
                } else {
                    TFT_DrawFilledRect(x + col * size, y + row * size, size, size, color);
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	fb12 f303 	smulbb	r3, r2, r3
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	4413      	add	r3, r2
 80018cc:	b298      	uxth	r0, r3
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	fb12 f303 	smulbb	r3, r2, r3
 80018dc:	b29a      	uxth	r2, r3
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	b299      	uxth	r1, r3
 80018e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ee:	b29c      	uxth	r4, r3
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f000 fa27 	bl	8001d48 <TFT_DrawFilledRect>
        for(uint8_t col = 0; col < 8; col++) {
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73bb      	strb	r3, [r7, #14]
 8001900:	7bbb      	ldrb	r3, [r7, #14]
 8001902:	2b07      	cmp	r3, #7
 8001904:	d9b7      	bls.n	8001876 <TFT_DrawSymbol+0x86>
    for(uint8_t row = 0; row < 8; row++) {
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d9ae      	bls.n	8001870 <TFT_DrawSymbol+0x80>
 8001912:	e000      	b.n	8001916 <TFT_DrawSymbol+0x126>
    if(symbol < 1 || symbol > 26) return; // Updated range check
 8001914:	bf00      	nop
                }
            }
        }
    }
}
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	0802b398 	.word	0x0802b398

08001920 <TFT_DrawBatteryWithBars>:

// Helper function for battery with bars
void TFT_DrawBatteryWithBars(uint16_t x, uint16_t y, uint8_t battery_level, uint16_t color, uint8_t size) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af02      	add	r7, sp, #8
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4623      	mov	r3, r4
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	4603      	mov	r3, r0
 8001934:	80bb      	strh	r3, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	803b      	strh	r3, [r7, #0]
    // Draw battery outline
    uint16_t battery_width = 8 * size;
 800193e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001942:	b29b      	uxth	r3, r3
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	82bb      	strh	r3, [r7, #20]
    uint16_t battery_height = 4 * size;
 8001948:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800194c:	b29b      	uxth	r3, r3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	827b      	strh	r3, [r7, #18]
    uint16_t tip_width = 1 * size;
 8001952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001956:	823b      	strh	r3, [r7, #16]
    uint16_t tip_height = 2 * size;
 8001958:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800195c:	b29b      	uxth	r3, r3
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	81fb      	strh	r3, [r7, #14]

    // Battery tip
    TFT_DrawFilledRect(x + battery_width, y + size, tip_width, tip_height, color);
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	8abb      	ldrh	r3, [r7, #20]
 8001966:	4413      	add	r3, r2
 8001968:	b298      	uxth	r0, r3
 800196a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800196e:	b29a      	uxth	r2, r3
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	b299      	uxth	r1, r3
 8001976:	89fc      	ldrh	r4, [r7, #14]
 8001978:	8a3a      	ldrh	r2, [r7, #16]
 800197a:	883b      	ldrh	r3, [r7, #0]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4623      	mov	r3, r4
 8001980:	f000 f9e2 	bl	8001d48 <TFT_DrawFilledRect>

    // Battery body
    TFT_DrawRect(x, y, battery_width, battery_height, color);
 8001984:	8a7c      	ldrh	r4, [r7, #18]
 8001986:	8aba      	ldrh	r2, [r7, #20]
 8001988:	88b9      	ldrh	r1, [r7, #4]
 800198a:	88f8      	ldrh	r0, [r7, #6]
 800198c:	883b      	ldrh	r3, [r7, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4623      	mov	r3, r4
 8001992:	f000 f98b 	bl	8001cac <TFT_DrawRect>

    // Calculate fill level based on battery level
    uint8_t fill_bars = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]
    switch(battery_level) {
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	3b0b      	subs	r3, #11
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d81b      	bhi.n	80019da <TFT_DrawBatteryWithBars+0xba>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <TFT_DrawBatteryWithBars+0x88>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019c3 	.word	0x080019c3
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019cf 	.word	0x080019cf
 80019b8:	080019d5 	.word	0x080019d5
        case BATTERY_0:    fill_bars = 0; break;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]
 80019c0:	e00e      	b.n	80019e0 <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_25:   fill_bars = 1; break;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
 80019c6:	e00b      	b.n	80019e0 <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_50:   fill_bars = 2; break;
 80019c8:	2302      	movs	r3, #2
 80019ca:	75fb      	strb	r3, [r7, #23]
 80019cc:	e008      	b.n	80019e0 <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_75:   fill_bars = 3; break;
 80019ce:	2303      	movs	r3, #3
 80019d0:	75fb      	strb	r3, [r7, #23]
 80019d2:	e005      	b.n	80019e0 <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_100:  fill_bars = 4; break;
 80019d4:	2304      	movs	r3, #4
 80019d6:	75fb      	strb	r3, [r7, #23]
 80019d8:	e002      	b.n	80019e0 <TFT_DrawBatteryWithBars+0xc0>
        default:           fill_bars = 0; break;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
 80019de:	bf00      	nop
    }

    // Draw fill bars
    if(fill_bars > 0) {
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d03c      	beq.n	8001a60 <TFT_DrawBatteryWithBars+0x140>
        uint16_t bar_width = (battery_width - 2 * size) / 4;
 80019e6:	8aba      	ldrh	r2, [r7, #20]
 80019e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da00      	bge.n	80019f6 <TFT_DrawBatteryWithBars+0xd6>
 80019f4:	3303      	adds	r3, #3
 80019f6:	109b      	asrs	r3, r3, #2
 80019f8:	81bb      	strh	r3, [r7, #12]
        uint16_t bar_spacing = 1 * size;
 80019fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019fe:	817b      	strh	r3, [r7, #10]
        uint16_t fill_height = battery_height - 2 * size;
 8001a00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8a7a      	ldrh	r2, [r7, #18]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	813b      	strh	r3, [r7, #8]

        for(uint8_t i = 0; i < fill_bars; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	75bb      	strb	r3, [r7, #22]
 8001a14:	e020      	b.n	8001a58 <TFT_DrawBatteryWithBars+0x138>
            TFT_DrawFilledRect(x + size + i * (bar_width + bar_spacing),
 8001a16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	7dbb      	ldrb	r3, [r7, #22]
 8001a24:	b299      	uxth	r1, r3
 8001a26:	89b8      	ldrh	r0, [r7, #12]
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	4403      	add	r3, r0
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	fb11 f303 	smulbb	r3, r1, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b298      	uxth	r0, r3
 8001a38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	b299      	uxth	r1, r3
 8001a44:	893c      	ldrh	r4, [r7, #8]
 8001a46:	89ba      	ldrh	r2, [r7, #12]
 8001a48:	883b      	ldrh	r3, [r7, #0]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f000 f97b 	bl	8001d48 <TFT_DrawFilledRect>
        for(uint8_t i = 0; i < fill_bars; i++) {
 8001a52:	7dbb      	ldrb	r3, [r7, #22]
 8001a54:	3301      	adds	r3, #1
 8001a56:	75bb      	strb	r3, [r7, #22]
 8001a58:	7dba      	ldrb	r2, [r7, #22]
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3da      	bcc.n	8001a16 <TFT_DrawBatteryWithBars+0xf6>
                              bar_width,
                              fill_height,
                              color);
        }
    }
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}

08001a68 <TFT_DrawWifiWithBars>:

// Helper function for WiFi with bars
void TFT_DrawWifiWithBars(uint16_t x, uint16_t y, uint8_t wifi_strength, uint16_t color, uint8_t size) {
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	80fb      	strh	r3, [r7, #6]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80bb      	strh	r3, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70fb      	strb	r3, [r7, #3]
 8001a82:	4613      	mov	r3, r2
 8001a84:	803b      	strh	r3, [r7, #0]
    uint8_t bars = wifi_strength - WIFI_0;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	3b11      	subs	r3, #17
 8001a8a:	73fb      	strb	r3, [r7, #15]

    // Draw WiFi arcs based on signal strength
    if(bars >= 1) {
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d014      	beq.n	8001abc <TFT_DrawWifiWithBars+0x54>
        // Outer arc (largest)
        TFT_DrawArc(x + 4*size, y + 4*size, 4*size, 225, 315, color);
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	18d0      	adds	r0, r2, r3
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	18d1      	adds	r1, r2, r3
 8001aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aaa:	009a      	lsls	r2, r3, #2
 8001aac:	883b      	ldrh	r3, [r7, #0]
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	f240 133b 	movw	r3, #315	@ 0x13b
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	23e1      	movs	r3, #225	@ 0xe1
 8001ab8:	f000 f85e 	bl	8001b78 <TFT_DrawArc>
    }
    if(bars >= 2) {
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d916      	bls.n	8001af0 <TFT_DrawWifiWithBars+0x88>
        // Middle arc
        TFT_DrawArc(x + 4*size, y + 4*size, 3*size, 225, 315, color);
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	18d0      	adds	r0, r2, r3
 8001acc:	88ba      	ldrh	r2, [r7, #4]
 8001ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	18d1      	adds	r1, r2, r3
 8001ad6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	441a      	add	r2, r3
 8001ae0:	883b      	ldrh	r3, [r7, #0]
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	f240 133b 	movw	r3, #315	@ 0x13b
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	23e1      	movs	r3, #225	@ 0xe1
 8001aec:	f000 f844 	bl	8001b78 <TFT_DrawArc>
    }
    if(bars >= 3) {
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d914      	bls.n	8001b20 <TFT_DrawWifiWithBars+0xb8>
        // Inner arc
        TFT_DrawArc(x + 4*size, y + 4*size, 2*size, 225, 315, color);
 8001af6:	88fa      	ldrh	r2, [r7, #6]
 8001af8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	18d0      	adds	r0, r2, r3
 8001b00:	88ba      	ldrh	r2, [r7, #4]
 8001b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	18d1      	adds	r1, r2, r3
 8001b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b0e:	005a      	lsls	r2, r3, #1
 8001b10:	883b      	ldrh	r3, [r7, #0]
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	f240 133b 	movw	r3, #315	@ 0x13b
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	23e1      	movs	r3, #225	@ 0xe1
 8001b1c:	f000 f82c 	bl	8001b78 <TFT_DrawArc>
    }
    if(bars >= 4) {
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d922      	bls.n	8001b6c <TFT_DrawWifiWithBars+0x104>
        // Center dot
        TFT_DrawFilledRect(x + 3*size, y + 3*size, 2*size, 2*size, color);
 8001b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	0052      	lsls	r2, r2, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	4413      	add	r3, r2
 8001b38:	b298      	uxth	r0, r3
 8001b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	b29c      	uxth	r4, r3
 8001b62:	883b      	ldrh	r3, [r7, #0]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4623      	mov	r3, r4
 8001b68:	f000 f8ee 	bl	8001d48 <TFT_DrawFilledRect>
    }
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	0000      	movs	r0, r0
	...

08001b78 <TFT_DrawArc>:

// Simple arc drawing function for WiFi
void TFT_DrawArc(uint16_t x, uint16_t y, uint16_t radius, uint16_t start_angle, uint16_t end_angle, uint16_t color) {
 8001b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4604      	mov	r4, r0
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	4623      	mov	r3, r4
 8001b8a:	80fb      	strh	r3, [r7, #6]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	80bb      	strh	r3, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	803b      	strh	r3, [r7, #0]
    // Simplified arc drawing - in real implementation, use proper arc algorithm
    for(uint16_t angle = start_angle; angle <= end_angle; angle += 5) {
 8001b98:	883b      	ldrh	r3, [r7, #0]
 8001b9a:	82fb      	strh	r3, [r7, #22]
 8001b9c:	e074      	b.n	8001c88 <TFT_DrawArc+0x110>
        float rad = angle * 3.14159 / 180;
 8001b9e:	8afb      	ldrh	r3, [r7, #22]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	a33f      	add	r3, pc, #252	@ (adr r3, 8001ca4 <TFT_DrawArc+0x12c>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <TFT_DrawArc+0x128>)
 8001bbe:	f7fe fe45 	bl	800084c <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe fff7 	bl	8000bbc <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]
        uint16_t px = x + radius * cos(rad);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fca5 	bl	8000524 <__aeabi_i2d>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	460d      	mov	r5, r1
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc9f 	bl	8000524 <__aeabi_i2d>
 8001be6:	4680      	mov	r8, r0
 8001be8:	4689      	mov	r9, r1
 8001bea:	6938      	ldr	r0, [r7, #16]
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	ec43 2b10 	vmov	d0, r2, r3
 8001bf8:	f002 fa52 	bl	80040a0 <cos>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4640      	mov	r0, r8
 8001c02:	4649      	mov	r1, r9
 8001c04:	f7fe fcf8 	bl	80005f8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f7fe fb3c 	bl	800028c <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ffae 	bl	8000b7c <__aeabi_d2uiz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	81fb      	strh	r3, [r7, #14]
        uint16_t py = y + radius * sin(rad);
 8001c24:	88bb      	ldrh	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc7c 	bl	8000524 <__aeabi_i2d>
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	460d      	mov	r5, r1
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc76 	bl	8000524 <__aeabi_i2d>
 8001c38:	4680      	mov	r8, r0
 8001c3a:	4689      	mov	r9, r1
 8001c3c:	6938      	ldr	r0, [r7, #16]
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ec43 2b10 	vmov	d0, r2, r3
 8001c4a:	f002 fa7d 	bl	8004148 <sin>
 8001c4e:	ec53 2b10 	vmov	r2, r3, d0
 8001c52:	4640      	mov	r0, r8
 8001c54:	4649      	mov	r1, r9
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	f7fe fb13 	bl	800028c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ff85 	bl	8000b7c <__aeabi_d2uiz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	81bb      	strh	r3, [r7, #12]
        TFT_DrawPixel(px, py, color);
 8001c76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c78:	89b9      	ldrh	r1, [r7, #12]
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fd5f 	bl	8001740 <TFT_DrawPixel>
    for(uint16_t angle = start_angle; angle <= end_angle; angle += 5) {
 8001c82:	8afb      	ldrh	r3, [r7, #22]
 8001c84:	3305      	adds	r3, #5
 8001c86:	82fb      	strh	r3, [r7, #22]
 8001c88:	8afa      	ldrh	r2, [r7, #22]
 8001c8a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d986      	bls.n	8001b9e <TFT_DrawArc+0x26>
    }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	40668000 	.word	0x40668000
 8001ca4:	f01b866e 	.word	0xf01b866e
 8001ca8:	400921f9 	.word	0x400921f9

08001cac <TFT_DrawRect>:
    uint16_t text_width = strlen(str) * spacing;
    uint16_t x = (width - text_width) / 2;
    TFT_DrawStringSize(x, y, str, color, bg, font_size);
}

void TFT_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80bb      	strh	r3, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	803b      	strh	r3, [r7, #0]
    for(uint16_t i = x; i < x + w; i++) {
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	81fb      	strh	r3, [r7, #14]
 8001cce:	e013      	b.n	8001cf8 <TFT_DrawRect+0x4c>
        TFT_DrawPixel(i, y, color);
 8001cd0:	8c3a      	ldrh	r2, [r7, #32]
 8001cd2:	88b9      	ldrh	r1, [r7, #4]
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fd32 	bl	8001740 <TFT_DrawPixel>
        TFT_DrawPixel(i, y + h - 1, color);
 8001cdc:	88ba      	ldrh	r2, [r7, #4]
 8001cde:	883b      	ldrh	r3, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b299      	uxth	r1, r3
 8001ce8:	8c3a      	ldrh	r2, [r7, #32]
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fd27 	bl	8001740 <TFT_DrawPixel>
    for(uint16_t i = x; i < x + w; i++) {
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	81fb      	strh	r3, [r7, #14]
 8001cf8:	89fa      	ldrh	r2, [r7, #14]
 8001cfa:	88f9      	ldrh	r1, [r7, #6]
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	440b      	add	r3, r1
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbe5      	blt.n	8001cd0 <TFT_DrawRect+0x24>
    }
    for(uint16_t i = y; i < y + h; i++) {
 8001d04:	88bb      	ldrh	r3, [r7, #4]
 8001d06:	81bb      	strh	r3, [r7, #12]
 8001d08:	e013      	b.n	8001d32 <TFT_DrawRect+0x86>
        TFT_DrawPixel(x, i, color);
 8001d0a:	8c3a      	ldrh	r2, [r7, #32]
 8001d0c:	89b9      	ldrh	r1, [r7, #12]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fd15 	bl	8001740 <TFT_DrawPixel>
        TFT_DrawPixel(x + w - 1, i, color);
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	8c3a      	ldrh	r2, [r7, #32]
 8001d24:	89b9      	ldrh	r1, [r7, #12]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fd0a 	bl	8001740 <TFT_DrawPixel>
    for(uint16_t i = y; i < y + h; i++) {
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	81bb      	strh	r3, [r7, #12]
 8001d32:	89ba      	ldrh	r2, [r7, #12]
 8001d34:	88b9      	ldrh	r1, [r7, #4]
 8001d36:	883b      	ldrh	r3, [r7, #0]
 8001d38:	440b      	add	r3, r1
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dbe5      	blt.n	8001d0a <TFT_DrawRect+0x5e>
    }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}

08001d48 <TFT_DrawFilledRect>:

void TFT_DrawFilledRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4604      	mov	r4, r0
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	80fb      	strh	r3, [r7, #6]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80bb      	strh	r3, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	807b      	strh	r3, [r7, #2]
 8001d62:	4613      	mov	r3, r2
 8001d64:	803b      	strh	r3, [r7, #0]
    // Boundary checking and clipping
    if (x >= TFT_GetWidth() || y >= TFT_GetHeight()) return;
 8001d66:	f000 f8b5 	bl	8001ed4 <TFT_GetWidth>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4293      	cmp	r3, r2
 8001d72:	f080 808e 	bcs.w	8001e92 <TFT_DrawFilledRect+0x14a>
 8001d76:	f000 f8c1 	bl	8001efc <TFT_GetHeight>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	88bb      	ldrh	r3, [r7, #4]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	f080 8086 	bcs.w	8001e92 <TFT_DrawFilledRect+0x14a>

    // Clip rectangle to screen boundaries
    uint16_t x_end = x + w;
 8001d86:	88fa      	ldrh	r2, [r7, #6]
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	82fb      	strh	r3, [r7, #22]
    uint16_t y_end = y + h;
 8001d8e:	88ba      	ldrh	r2, [r7, #4]
 8001d90:	883b      	ldrh	r3, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	82bb      	strh	r3, [r7, #20]

    if (x_end > TFT_GetWidth()) x_end = TFT_GetWidth();
 8001d96:	f000 f89d 	bl	8001ed4 <TFT_GetWidth>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	8afb      	ldrh	r3, [r7, #22]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d903      	bls.n	8001dac <TFT_DrawFilledRect+0x64>
 8001da4:	f000 f896 	bl	8001ed4 <TFT_GetWidth>
 8001da8:	4603      	mov	r3, r0
 8001daa:	82fb      	strh	r3, [r7, #22]
    if (y_end > TFT_GetHeight()) y_end = TFT_GetHeight();
 8001dac:	f000 f8a6 	bl	8001efc <TFT_GetHeight>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	8abb      	ldrh	r3, [r7, #20]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d903      	bls.n	8001dc2 <TFT_DrawFilledRect+0x7a>
 8001dba:	f000 f89f 	bl	8001efc <TFT_GetHeight>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	82bb      	strh	r3, [r7, #20]

    w = x_end - x;
 8001dc2:	8afa      	ldrh	r2, [r7, #22]
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	807b      	strh	r3, [r7, #2]
    h = y_end - y;
 8001dca:	8aba      	ldrh	r2, [r7, #20]
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	803b      	strh	r3, [r7, #0]

    if (w == 0 || h == 0) return;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d05e      	beq.n	8001e96 <TFT_DrawFilledRect+0x14e>
 8001dd8:	883b      	ldrh	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d05b      	beq.n	8001e96 <TFT_DrawFilledRect+0x14e>

    // Set address window for the entire rectangle
    TFT_WriteCommand(TFT_CASET); // Column address set
 8001dde:	202a      	movs	r0, #42	@ 0x2a
 8001de0:	f7ff fbe8 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData16(x);
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc28 	bl	800163c <TFT_WriteData16>
    TFT_WriteData16(x + w - 1);
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	4413      	add	r3, r2
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fc1f 	bl	800163c <TFT_WriteData16>

    TFT_WriteCommand(TFT_RASET); // Row address set
 8001dfe:	202b      	movs	r0, #43	@ 0x2b
 8001e00:	f7ff fbd8 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData16(y);
 8001e04:	88bb      	ldrh	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fc18 	bl	800163c <TFT_WriteData16>
    TFT_WriteData16(y + h - 1);
 8001e0c:	88ba      	ldrh	r2, [r7, #4]
 8001e0e:	883b      	ldrh	r3, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fc0f 	bl	800163c <TFT_WriteData16>

    TFT_WriteCommand(TFT_RAMWR); // Memory write
 8001e1e:	202c      	movs	r0, #44	@ 0x2c
 8001e20:	f7ff fbc8 	bl	80015b4 <TFT_WriteCommand>

    // Send all pixel data at once
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET); // Data mode
 8001e24:	2201      	movs	r2, #1
 8001e26:	2102      	movs	r1, #2
 8001e28:	481d      	ldr	r0, [pc, #116]	@ (8001ea0 <TFT_DrawFilledRect+0x158>)
 8001e2a:	f000 fd97 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET); // CS low
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2110      	movs	r1, #16
 8001e32:	481b      	ldr	r0, [pc, #108]	@ (8001ea0 <TFT_DrawFilledRect+0x158>)
 8001e34:	f000 fd92 	bl	800295c <HAL_GPIO_WritePin>

    uint32_t total_pixels = w * h;
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	60fb      	str	r3, [r7, #12]
    uint8_t color_high = color >> 8;
 8001e42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	72fb      	strb	r3, [r7, #11]
    uint8_t color_low = color & 0xFF;
 8001e4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	72bb      	strb	r3, [r7, #10]

    // Send pixel data in chunks to avoid large buffer allocation
    for(uint32_t i = 0; i < total_pixels; i++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e012      	b.n	8001e7e <TFT_DrawFilledRect+0x136>
        HAL_SPI_Transmit(&hspi1, &color_high, 1, HAL_MAX_DELAY);
 8001e58:	f107 010b 	add.w	r1, r7, #11
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	2201      	movs	r2, #1
 8001e62:	4810      	ldr	r0, [pc, #64]	@ (8001ea4 <TFT_DrawFilledRect+0x15c>)
 8001e64:	f001 fa41 	bl	80032ea <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&hspi1, &color_low, 1, HAL_MAX_DELAY);
 8001e68:	f107 010a 	add.w	r1, r7, #10
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e70:	2201      	movs	r2, #1
 8001e72:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <TFT_DrawFilledRect+0x15c>)
 8001e74:	f001 fa39 	bl	80032ea <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < total_pixels; i++) {
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3e8      	bcc.n	8001e58 <TFT_DrawFilledRect+0x110>
    }

    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET); // CS high
 8001e86:	2201      	movs	r2, #1
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <TFT_DrawFilledRect+0x158>)
 8001e8c:	f000 fd66 	bl	800295c <HAL_GPIO_WritePin>
 8001e90:	e002      	b.n	8001e98 <TFT_DrawFilledRect+0x150>
    if (x >= TFT_GetWidth() || y >= TFT_GetHeight()) return;
 8001e92:	bf00      	nop
 8001e94:	e000      	b.n	8001e98 <TFT_DrawFilledRect+0x150>
    if (w == 0 || h == 0) return;
 8001e96:	bf00      	nop
}
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	2000007c 	.word	0x2000007c

08001ea8 <TFT_SetRotation>:
    uint16_t y = (screen_height - h) / 2;
    TFT_DrawRect(x, y, w, h, color);
}


void TFT_SetRotation(uint8_t rotation) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
    tft_rotation = rotation;
 8001eb2:	4a07      	ldr	r2, [pc, #28]	@ (8001ed0 <TFT_SetRotation+0x28>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	7013      	strb	r3, [r2, #0]
    TFT_WriteCommand(TFT_MADCTL);
 8001eb8:	2036      	movs	r0, #54	@ 0x36
 8001eba:	f7ff fb7b 	bl	80015b4 <TFT_WriteCommand>
    TFT_WriteData(rotation);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fb99 	bl	80015f8 <TFT_WriteData>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <TFT_GetWidth>:

void TFT_Rotate0(void) {
    TFT_SetRotation(TFT_ROTATION_0);
}

uint16_t TFT_GetWidth(void) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
    switch(tft_rotation) {
 8001ed8:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <TFT_GetWidth+0x24>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b48      	cmp	r3, #72	@ 0x48
 8001ede:	d001      	beq.n	8001ee4 <TFT_GetWidth+0x10>
 8001ee0:	2b88      	cmp	r3, #136	@ 0x88
 8001ee2:	d102      	bne.n	8001eea <TFT_GetWidth+0x16>
        case TFT_ROTATION_0:
        case TFT_ROTATION_180:
            return TFT_WIDTH_LANDSCAPE;
 8001ee4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ee8:	e000      	b.n	8001eec <TFT_GetWidth+0x18>
        case TFT_ROTATION_90:
        case TFT_ROTATION_270:
        default:
            return TFT_WIDTH_PORTRAIT;
 8001eea:	23f0      	movs	r3, #240	@ 0xf0
    }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000004 	.word	0x20000004

08001efc <TFT_GetHeight>:

uint16_t TFT_GetHeight(void) {
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
    switch(tft_rotation) {
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <TFT_GetHeight+0x24>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b48      	cmp	r3, #72	@ 0x48
 8001f06:	d001      	beq.n	8001f0c <TFT_GetHeight+0x10>
 8001f08:	2b88      	cmp	r3, #136	@ 0x88
 8001f0a:	d101      	bne.n	8001f10 <TFT_GetHeight+0x14>
        case TFT_ROTATION_0:
        case TFT_ROTATION_180:
            return TFT_HEIGHT_LANDSCAPE;
 8001f0c:	23f0      	movs	r3, #240	@ 0xf0
 8001f0e:	e001      	b.n	8001f14 <TFT_GetHeight+0x18>
        case TFT_ROTATION_90:
        case TFT_ROTATION_270:
        default:
            return TFT_HEIGHT_PORTRAIT;
 8001f10:	f44f 73a0 	mov.w	r3, #320	@ 0x140
    }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000004 	.word	0x20000004

08001f24 <TFT_printf>:
 *
 * @example:
 * TFT_printf(10, 10, TFT_WHITE, TRANSPARENT, 2, "Score: %d", score);
 * TFT_printf(50, 50, TFT_RED, TFT_BLACK, 1, "Temp: %.1f°C", temperature);
 */
void TFT_printf(uint16_t x, uint16_t y, uint16_t color, uint16_t bg_color, uint8_t font_scale, const char *format, ...) {
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b0ab      	sub	sp, #172	@ 0xac
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	80fb      	strh	r3, [r7, #6]
 8001f36:	4603      	mov	r3, r0
 8001f38:	80bb      	strh	r3, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	803b      	strh	r3, [r7, #0]
    char buffer[128];
    va_list args;

    va_start(args, format);
 8001f42:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001f46:	613b      	str	r3, [r7, #16]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001f48:	f107 0014 	add.w	r0, r7, #20
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	f001 fc18 	bl	8003788 <vsniprintf>
    va_end(args);

    if (bg_color != TRANSPARENT) {
 8001f58:	883b      	ldrh	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <TFT_printf+0x60>
        uint16_t text_width, text_height;
        TFT_CalculateTextSize(buffer, font_scale, &text_width, &text_height);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	f107 020e 	add.w	r2, r7, #14
 8001f66:	f897 10b0 	ldrb.w	r1, [r7, #176]	@ 0xb0
 8001f6a:	f107 0014 	add.w	r0, r7, #20
 8001f6e:	f000 f85d 	bl	800202c <TFT_CalculateTextSize>
        TFT_DrawFilledRect(x, y, text_width, text_height, bg_color);
 8001f72:	89fa      	ldrh	r2, [r7, #14]
 8001f74:	89bc      	ldrh	r4, [r7, #12]
 8001f76:	88b9      	ldrh	r1, [r7, #4]
 8001f78:	88f8      	ldrh	r0, [r7, #6]
 8001f7a:	883b      	ldrh	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4623      	mov	r3, r4
 8001f80:	f7ff fee2 	bl	8001d48 <TFT_DrawFilledRect>
    }

    uint16_t current_x = x;
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    const char *current_char = buffer;
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    while (*current_char) {
 8001f92:	e03e      	b.n	8002012 <TFT_printf+0xee>
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8001f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b1f      	cmp	r3, #31
 8001f9c:	d92a      	bls.n	8001ff4 <TFT_printf+0xd0>
 8001f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fa6:	d825      	bhi.n	8001ff4 <TFT_printf+0xd0>
            uint8_t char_index = *current_char - ASCII_START;
 8001fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3b20      	subs	r3, #32
 8001fb0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            TFT_DrawCharScaled(current_x, y, *current_char, color, bg_color, font_scale);
 8001fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	887c      	ldrh	r4, [r7, #2]
 8001fbc:	88b9      	ldrh	r1, [r7, #4]
 8001fbe:	f8b7 009e 	ldrh.w	r0, [r7, #158]	@ 0x9e
 8001fc2:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	883b      	ldrh	r3, [r7, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4623      	mov	r3, r4
 8001fce:	f000 f879 	bl	80020c4 <TFT_DrawCharScaled>
            current_x += char_widths[char_index] * font_scale;
 8001fd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001fd6:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <TFT_printf+0x104>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	fb12 f303 	smulbb	r3, r2, r3
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001fec:	4413      	add	r3, r2
 8001fee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8001ff2:	e009      	b.n	8002008 <TFT_printf+0xe4>
        } else {
            current_x += 4 * font_scale; // Skip unknown chars
 8001ff4:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002002:	4413      	add	r3, r2
 8002004:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
        }
        current_char++;
 8002008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800200c:	3301      	adds	r3, #1
 800200e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    while (*current_char) {
 8002012:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1bb      	bne.n	8001f94 <TFT_printf+0x70>
    }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	37a4      	adds	r7, #164	@ 0xa4
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop
 8002028:	0802b338 	.word	0x0802b338

0800202c <TFT_CalculateTextSize>:
 * @example:
 * uint16_t text_width, text_height;
 * TFT_CalculateTextSize("Hello", 2, &text_width, &text_height);
 * // text_width = total width in pixels, text_height = 24 pixels
 */
void TFT_CalculateTextSize(const char *text, uint8_t font_scale, uint16_t *width, uint16_t *height) {
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	460b      	mov	r3, r1
 800203a:	72fb      	strb	r3, [r7, #11]
    *width = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	801a      	strh	r2, [r3, #0]
    const char *current_char = text;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	617b      	str	r3, [r7, #20]

    while (*current_char) {
 8002046:	e028      	b.n	800209a <TFT_CalculateTextSize+0x6e>
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b1f      	cmp	r3, #31
 800204e:	d917      	bls.n	8002080 <TFT_CalculateTextSize+0x54>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b7e      	cmp	r3, #126	@ 0x7e
 8002056:	d813      	bhi.n	8002080 <TFT_CalculateTextSize+0x54>
            uint8_t char_index = *current_char - ASCII_START;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	3b20      	subs	r3, #32
 800205e:	74fb      	strb	r3, [r7, #19]
            *width += char_widths[char_index] * font_scale;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	4916      	ldr	r1, [pc, #88]	@ (80020c0 <TFT_CalculateTextSize+0x94>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	4619      	mov	r1, r3
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	b29b      	uxth	r3, r3
 8002070:	fb11 f303 	smulbb	r3, r1, r3
 8002074:	b29b      	uxth	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	801a      	strh	r2, [r3, #0]
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 800207e:	e009      	b.n	8002094 <TFT_CalculateTextSize+0x68>
        } else {
            *width += 4 * font_scale; // Default width for unknown chars
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	7afb      	ldrb	r3, [r7, #11]
 8002086:	b29b      	uxth	r3, r3
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	b29b      	uxth	r3, r3
 800208c:	4413      	add	r3, r2
 800208e:	b29a      	uxth	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	801a      	strh	r2, [r3, #0]
        }
        current_char++;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
    while (*current_char) {
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1d2      	bne.n	8002048 <TFT_CalculateTextSize+0x1c>
    }

    *height = 12 * font_scale;
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	0052      	lsls	r2, r2, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	801a      	strh	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	0802b338 	.word	0x0802b338

080020c4 <TFT_DrawCharScaled>:
 * This function draws a single character from the 12x12 font array.
 * It handles both transparent and solid backgrounds.
 *
 * @example TFT_DrawCharScaled(100, 100, 'A', TFT_WHITE, TRANSPARENT, 2);
 */
static void TFT_DrawCharScaled(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg_color, uint8_t scale) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4604      	mov	r4, r0
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	80fb      	strh	r3, [r7, #6]
 80020d6:	4603      	mov	r3, r0
 80020d8:	80bb      	strh	r3, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	70fb      	strb	r3, [r7, #3]
 80020de:	4613      	mov	r3, r2
 80020e0:	803b      	strh	r3, [r7, #0]
    // Only handle printable ASCII characters (32-126)
    if (c < ASCII_START || c > ASCII_END) {
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	2b1f      	cmp	r3, #31
 80020e6:	d902      	bls.n	80020ee <TFT_DrawCharScaled+0x2a>
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b7e      	cmp	r3, #126	@ 0x7e
 80020ec:	d91b      	bls.n	8002126 <TFT_DrawCharScaled+0x62>
        // Unsupported character - draw as space
        if (bg_color != TRANSPARENT) {
 80020ee:	8c3b      	ldrh	r3, [r7, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80b0 	beq.w	8002256 <TFT_DrawCharScaled+0x192>
            TFT_DrawFilledRect(x, y, 12 * scale, 12 * scale, bg_color);
 80020f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	0052      	lsls	r2, r2, #1
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	b29a      	uxth	r2, r3
 8002106:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800210a:	b29b      	uxth	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	0049      	lsls	r1, r1, #1
 8002110:	440b      	add	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	b29c      	uxth	r4, r3
 8002116:	88b9      	ldrh	r1, [r7, #4]
 8002118:	88f8      	ldrh	r0, [r7, #6]
 800211a:	8c3b      	ldrh	r3, [r7, #32]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4623      	mov	r3, r4
 8002120:	f7ff fe12 	bl	8001d48 <TFT_DrawFilledRect>
        }
        return;
 8002124:	e097      	b.n	8002256 <TFT_DrawCharScaled+0x192>
    }

    uint8_t char_index = c - ASCII_START;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	3b20      	subs	r3, #32
 800212a:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 12; row++) {
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e08c      	b.n	800224c <TFT_DrawCharScaled+0x188>
        uint16_t line = font12x12[char_index][row];
 8002132:	7b7a      	ldrb	r2, [r7, #13]
 8002134:	7bf9      	ldrb	r1, [r7, #15]
 8002136:	484a      	ldr	r0, [pc, #296]	@ (8002260 <TFT_DrawCharScaled+0x19c>)
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002146:	817b      	strh	r3, [r7, #10]
        for (uint8_t col = 0; col < 12; col++) {
 8002148:	2300      	movs	r3, #0
 800214a:	73bb      	strb	r3, [r7, #14]
 800214c:	e078      	b.n	8002240 <TFT_DrawCharScaled+0x17c>
            // Read bits from MSB to LSB (left to right)
            if (line & (1 << (11 - col))) {
 800214e:	897a      	ldrh	r2, [r7, #10]
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	f1c3 030b 	rsb	r3, r3, #11
 8002156:	fa42 f303 	asr.w	r3, r2, r3
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d034      	beq.n	80021cc <TFT_DrawCharScaled+0x108>
                // Draw scaled pixel for the character
                if (scale == 1) {
 8002162:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <TFT_DrawCharScaled+0xc4>
                    TFT_DrawPixel(x + col, y + row, color);
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	b29a      	uxth	r2, r3
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	4413      	add	r3, r2
 8002172:	b298      	uxth	r0, r3
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	b29a      	uxth	r2, r3
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	883a      	ldrh	r2, [r7, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f7ff fadd 	bl	8001740 <TFT_DrawPixel>
 8002186:	e058      	b.n	800223a <TFT_DrawCharScaled+0x176>
                } else {
                    TFT_DrawFilledRect(x + col * scale, y + row * scale, scale, scale, color);
 8002188:	7bbb      	ldrb	r3, [r7, #14]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002190:	b29b      	uxth	r3, r3
 8002192:	fb12 f303 	smulbb	r3, r2, r3
 8002196:	b29a      	uxth	r2, r3
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	4413      	add	r3, r2
 800219c:	b298      	uxth	r0, r3
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	fb12 f303 	smulbb	r3, r2, r3
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	b299      	uxth	r1, r3
 80021b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021be:	b29c      	uxth	r4, r3
 80021c0:	883b      	ldrh	r3, [r7, #0]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4623      	mov	r3, r4
 80021c6:	f7ff fdbf 	bl	8001d48 <TFT_DrawFilledRect>
 80021ca:	e036      	b.n	800223a <TFT_DrawCharScaled+0x176>
                }
            } else if (bg_color != TRANSPARENT) {
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d033      	beq.n	800223a <TFT_DrawCharScaled+0x176>
                // Draw scaled background pixel
                if (scale == 1) {
 80021d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10e      	bne.n	80021f8 <TFT_DrawCharScaled+0x134>
                    TFT_DrawPixel(x + col, y + row, bg_color);
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4413      	add	r3, r2
 80021e2:	b298      	uxth	r0, r3
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	8c3a      	ldrh	r2, [r7, #32]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7ff faa5 	bl	8001740 <TFT_DrawPixel>
 80021f6:	e020      	b.n	800223a <TFT_DrawCharScaled+0x176>
                } else {
                    TFT_DrawFilledRect(x + col * scale, y + row * scale, scale, scale, bg_color);
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002200:	b29b      	uxth	r3, r3
 8002202:	fb12 f303 	smulbb	r3, r2, r3
 8002206:	b29a      	uxth	r2, r3
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	4413      	add	r3, r2
 800220c:	b298      	uxth	r0, r3
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	b29a      	uxth	r2, r3
 8002212:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002216:	b29b      	uxth	r3, r3
 8002218:	fb12 f303 	smulbb	r3, r2, r3
 800221c:	b29a      	uxth	r2, r3
 800221e:	88bb      	ldrh	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	b299      	uxth	r1, r3
 8002224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002228:	b29a      	uxth	r2, r3
 800222a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800222e:	b29c      	uxth	r4, r3
 8002230:	8c3b      	ldrh	r3, [r7, #32]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4623      	mov	r3, r4
 8002236:	f7ff fd87 	bl	8001d48 <TFT_DrawFilledRect>
        for (uint8_t col = 0; col < 12; col++) {
 800223a:	7bbb      	ldrb	r3, [r7, #14]
 800223c:	3301      	adds	r3, #1
 800223e:	73bb      	strb	r3, [r7, #14]
 8002240:	7bbb      	ldrb	r3, [r7, #14]
 8002242:	2b0b      	cmp	r3, #11
 8002244:	d983      	bls.n	800214e <TFT_DrawCharScaled+0x8a>
    for (uint8_t row = 0; row < 12; row++) {
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	3301      	adds	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b0b      	cmp	r3, #11
 8002250:	f67f af6f 	bls.w	8002132 <TFT_DrawCharScaled+0x6e>
 8002254:	e000      	b.n	8002258 <TFT_DrawCharScaled+0x194>
        return;
 8002256:	bf00      	nop
                }
            }
        }
    }
}
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop
 8002260:	0802aa50 	.word	0x0802aa50

08002264 <TFT_BackgroundImage>:

void TFT_BackgroundImage(uint16_t x, uint16_t y, const uint16_t *background_image, uint16_t w, uint16_t h) {
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	461a      	mov	r2, r3
 800226e:	4603      	mov	r3, r0
 8002270:	81fb      	strh	r3, [r7, #14]
 8002272:	460b      	mov	r3, r1
 8002274:	81bb      	strh	r3, [r7, #12]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
    TFT_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800227a:	89fa      	ldrh	r2, [r7, #14]
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4413      	add	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29c      	uxth	r4, r3
 8002286:	89ba      	ldrh	r2, [r7, #12]
 8002288:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800228a:	4413      	add	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	89b9      	ldrh	r1, [r7, #12]
 8002294:	89f8      	ldrh	r0, [r7, #14]
 8002296:	4622      	mov	r2, r4
 8002298:	f7ff fa12 	bl	80016c0 <TFT_SetAddressWindow>

    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2102      	movs	r1, #2
 80022a0:	4819      	ldr	r0, [pc, #100]	@ (8002308 <TFT_BackgroundImage+0xa4>)
 80022a2:	f000 fb5b 	bl	800295c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2110      	movs	r1, #16
 80022aa:	4817      	ldr	r0, [pc, #92]	@ (8002308 <TFT_BackgroundImage+0xa4>)
 80022ac:	f000 fb56 	bl	800295c <HAL_GPIO_WritePin>

    for(uint32_t i = 0; i < w * h; i++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e017      	b.n	80022e6 <TFT_BackgroundImage+0x82>
        uint16_t color = background_image[i];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	827b      	strh	r3, [r7, #18]
        uint8_t buffer[2] = {color >> 8, color & 0xFF};
 80022c2:	8a7b      	ldrh	r3, [r7, #18]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	743b      	strb	r3, [r7, #16]
 80022cc:	8a7b      	ldrh	r3, [r7, #18]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	747b      	strb	r3, [r7, #17]
        HAL_SPI_Transmit(&hspi1, buffer, 2, 1);
 80022d2:	f107 0110 	add.w	r1, r7, #16
 80022d6:	2301      	movs	r3, #1
 80022d8:	2202      	movs	r2, #2
 80022da:	480c      	ldr	r0, [pc, #48]	@ (800230c <TFT_BackgroundImage+0xa8>)
 80022dc:	f001 f805 	bl	80032ea <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < w * h; i++) {
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d3df      	bcc.n	80022b6 <TFT_BackgroundImage+0x52>
    }

    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2110      	movs	r1, #16
 80022fa:	4803      	ldr	r0, [pc, #12]	@ (8002308 <TFT_BackgroundImage+0xa4>)
 80022fc:	f000 fb2e 	bl	800295c <HAL_GPIO_WritePin>
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	40020000 	.word	0x40020000
 800230c:	2000007c 	.word	0x2000007c

08002310 <Reset_Handler>:
 8002310:	f7ff f8f2 	bl	80014f8 <SystemInit>
 8002314:	480b      	ldr	r0, [pc, #44]	@ (8002344 <LoopFillZerobss+0xe>)
 8002316:	490c      	ldr	r1, [pc, #48]	@ (8002348 <LoopFillZerobss+0x12>)
 8002318:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <LoopFillZerobss+0x16>)
 800231a:	2300      	movs	r3, #0
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:
 800231e:	58d4      	ldr	r4, [r2, r3]
 8002320:	50c4      	str	r4, [r0, r3]
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:
 8002324:	18c4      	adds	r4, r0, r3
 8002326:	428c      	cmp	r4, r1
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <LoopFillZerobss+0x1a>)
 800232c:	4c09      	ldr	r4, [pc, #36]	@ (8002354 <LoopFillZerobss+0x1e>)
 800232e:	2300      	movs	r3, #0
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:
 8002336:	42a2      	cmp	r2, r4
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>
 800233a:	f001 fa41 	bl	80037c0 <__libc_init_array>
 800233e:	f7fe fe23 	bl	8000f88 <main>
 8002342:	4770      	bx	lr
 8002344:	20000000 	.word	0x20000000
 8002348:	20000060 	.word	0x20000060
 800234c:	0802b688 	.word	0x0802b688
 8002350:	20000060 	.word	0x20000060
 8002354:	20000224 	.word	0x20000224

08002358 <ADC_IRQHandler>:
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>
	...

0800235c <HAL_Init>:
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
 8002360:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	@ (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f931 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>
 800238a:	200f      	movs	r0, #15
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>
 8002390:	f7fe ffdc 	bl	800134c <HAL_MspInit>
 8002394:	2300      	movs	r3, #0
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f93b 	bl	800263a <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f911 	bl	8002602 <HAL_NVIC_SetPriority>
 80023e0:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
 80023ea:	2301      	movs	r3, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000000 	.word	0x20000000
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	20000008 	.word	0x20000008

08002400 <HAL_IncTick>:
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c
 8002424:	200000d8 	.word	0x200000d8

08002428 <HAL_GetTick>:
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
 800242c:	4b03      	ldr	r3, [pc, #12]	@ (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200000d8 	.word	0x200000d8

08002440 <HAL_Delay>:
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000000c 	.word	0x2000000c

08002488 <__NVIC_SetPriorityGrouping>:
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_SetPriority>:
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	@ (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	@ (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
 8002598:	4313      	orrs	r3, r2
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	@ 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff47 	bl	8002488 <__NVIC_SetPriorityGrouping>
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	f7ff ff5c 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffb0 	bl	80025a8 <SysTick_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e159      	b.n	8002924 <HAL_GPIO_Init+0x2d0>
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8148 	bne.w	800291e <HAL_GPIO_Init+0x2ca>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a2 	beq.w	800291e <HAL_GPIO_Init+0x2ca>
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b57      	ldr	r3, [pc, #348]	@ (800293c <HAL_GPIO_Init+0x2e8>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a56      	ldr	r2, [pc, #344]	@ (800293c <HAL_GPIO_Init+0x2e8>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b54      	ldr	r3, [pc, #336]	@ (800293c <HAL_GPIO_Init+0x2e8>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a52      	ldr	r2, [pc, #328]	@ (8002940 <HAL_GPIO_Init+0x2ec>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a49      	ldr	r2, [pc, #292]	@ (8002944 <HAL_GPIO_Init+0x2f0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x202>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a48      	ldr	r2, [pc, #288]	@ (8002948 <HAL_GPIO_Init+0x2f4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x1fe>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a47      	ldr	r2, [pc, #284]	@ (800294c <HAL_GPIO_Init+0x2f8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x1fa>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a46      	ldr	r2, [pc, #280]	@ (8002950 <HAL_GPIO_Init+0x2fc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x1f6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a45      	ldr	r2, [pc, #276]	@ (8002954 <HAL_GPIO_Init+0x300>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x1f2>
 8002842:	2304      	movs	r3, #4
 8002844:	e008      	b.n	8002858 <HAL_GPIO_Init+0x204>
 8002846:	2307      	movs	r3, #7
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x204>
 800284a:	2303      	movs	r3, #3
 800284c:	e004      	b.n	8002858 <HAL_GPIO_Init+0x204>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_Init+0x204>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x204>
 8002856:	2300      	movs	r3, #0
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f002 0203 	and.w	r2, r2, #3
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4093      	lsls	r3, r2
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	4935      	ldr	r1, [pc, #212]	@ (8002940 <HAL_GPIO_Init+0x2ec>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002876:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <HAL_GPIO_Init+0x304>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x246>
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	4a2f      	ldr	r2, [pc, #188]	@ (8002958 <HAL_GPIO_Init+0x304>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x270>
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	4a24      	ldr	r2, [pc, #144]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x29a>
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2c4>
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	4a0f      	ldr	r2, [pc, #60]	@ (8002958 <HAL_GPIO_Init+0x304>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	f67f aea2 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	@ 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40013c00 	.word	0x40013c00

0800295c <HAL_GPIO_WritePin>:
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_RCC_OscConfig>:
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x12>
 800299e:	2301      	movs	r3, #1
 80029a0:	e267      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d075      	beq.n	8002a9a <HAL_RCC_OscConfig+0x10a>
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d00c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x44>
 80029ba:	4b85      	ldr	r3, [pc, #532]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x5c>
 80029c6:	4b82      	ldr	r3, [pc, #520]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d2:	d10b      	bne.n	80029ec <HAL_RCC_OscConfig+0x5c>
 80029d4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d05b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x108>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d157      	bne.n	8002a98 <HAL_RCC_OscConfig+0x108>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e242      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x74>
 80029f6:	4b76      	ldr	r3, [pc, #472]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a75      	ldr	r2, [pc, #468]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xb0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x98>
 8002a0e:	4b70      	ldr	r3, [pc, #448]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6f      	ldr	r2, [pc, #444]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xb0>
 8002a28:	4b69      	ldr	r3, [pc, #420]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a68      	ldr	r2, [pc, #416]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b66      	ldr	r3, [pc, #408]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a65      	ldr	r2, [pc, #404]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0xe0>
 8002a48:	f7ff fcee 	bl	8002428 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xd2>
 8002a50:	f7ff fcea 	bl	8002428 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xd2>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e207      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002a62:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xc0>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x10a>
 8002a70:	f7ff fcda 	bl	8002428 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xfa>
 8002a78:	f7ff fcd6 	bl	8002428 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xfa>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1f3      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002a8a:	4b51      	ldr	r3, [pc, #324]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0xe8>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x10a>
 8002a98:	bf00      	nop
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d063      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1de>
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x13a>
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x168>
 8002abe:	4b44      	ldr	r3, [pc, #272]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x168>
 8002aca:	4b41      	ldr	r3, [pc, #260]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x152>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x152>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1c7      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4937      	ldr	r1, [pc, #220]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x1de>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1b2>
 8002b00:	4b34      	ldr	r3, [pc, #208]	@ (8002bd4 <HAL_RCC_OscConfig+0x244>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f7ff fc8f 	bl	8002428 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x190>
 8002b0e:	f7ff fc8b 	bl	8002428 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x190>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1a8      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x17e>
 8002b2c:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4925      	ldr	r1, [pc, #148]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x1de>
 8002b42:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x244>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f7ff fc6e 	bl	8002428 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1d2>
 8002b50:	f7ff fc6a 	bl	8002428 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1d2>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e187      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002b62:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1c0>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_RCC_OscConfig+0x258>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x220>
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_RCC_OscConfig+0x248>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f7ff fc4e 	bl	8002428 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
 8002b90:	f7ff fc4a 	bl	8002428 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x212>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e167      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x200>
 8002bae:	e01b      	b.n	8002be8 <HAL_RCC_OscConfig+0x258>
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_OscConfig+0x248>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f7ff fc37 	bl	8002428 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]
 8002bbc:	e00e      	b.n	8002bdc <HAL_RCC_OscConfig+0x24c>
 8002bbe:	f7ff fc33 	bl	8002428 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d907      	bls.n	8002bdc <HAL_RCC_OscConfig+0x24c>
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e150      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
 8002bdc:	4b88      	ldr	r3, [pc, #544]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ea      	bne.n	8002bbe <HAL_RCC_OscConfig+0x22e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8097 	beq.w	8002d24 <HAL_RCC_OscConfig+0x394>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
 8002bfa:	4b81      	ldr	r3, [pc, #516]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x296>
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c16:	4b7a      	ldr	r3, [pc, #488]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
 8002c26:	4b77      	ldr	r3, [pc, #476]	@ (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2d4>
 8002c32:	4b74      	ldr	r3, [pc, #464]	@ (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a73      	ldr	r2, [pc, #460]	@ (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	f7ff fbf3 	bl	8002428 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
 8002c46:	f7ff fbef 	bl	8002428 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
 8002c54:	2303      	movs	r3, #3
 8002c56:	e10c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002c58:	4b6a      	ldr	r3, [pc, #424]	@ (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2b6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2ea>
 8002c6c:	4b64      	ldr	r3, [pc, #400]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a63      	ldr	r2, [pc, #396]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x324>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x30c>
 8002c82:	4b5f      	ldr	r3, [pc, #380]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c86:	4a5e      	ldr	r2, [pc, #376]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	4a5b      	ldr	r2, [pc, #364]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x324>
 8002c9c:	4b58      	ldr	r3, [pc, #352]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca0:	4a57      	ldr	r2, [pc, #348]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca8:	4b55      	ldr	r3, [pc, #340]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a54      	ldr	r2, [pc, #336]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x358>
 8002cbc:	f7ff fbb4 	bl	8002428 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x34a>
 8002cc4:	f7ff fbb0 	bl	8002428 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x34a>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0cb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002cda:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ee      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x334>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x382>
 8002ce8:	f7ff fb9e 	bl	8002428 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x376>
 8002cf0:	f7ff fb9a 	bl	8002428 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x376>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0b5      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002d06:	4b3e      	ldr	r3, [pc, #248]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x360>
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x394>
 8002d18:	4b39      	ldr	r3, [pc, #228]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	4a38      	ldr	r2, [pc, #224]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a1 	beq.w	8002e70 <HAL_RCC_OscConfig+0x4e0>
 8002d2e:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d05c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x464>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d141      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x436>
 8002d42:	4b31      	ldr	r3, [pc, #196]	@ (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f7ff fb6e 	bl	8002428 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x3d2>
 8002d50:	f7ff fb6a 	bl	8002428 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x3d2>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e087      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002d62:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	491b      	ldr	r1, [pc, #108]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f7ff fb43 	bl	8002428 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x428>
 8002da6:	f7ff fb3f 	bl	8002428 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x428>
 8002db4:	2303      	movs	r3, #3
 8002db6:	e05c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x416>
 8002dc4:	e054      	b.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f7ff fb2c 	bl	8002428 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x456>
 8002dd4:	f7ff fb28 	bl	8002428 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x456>
 8002de2:	2303      	movs	r3, #3
 8002de4:	e045      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x444>
 8002df2:	e03d      	b.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x47c>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e038      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42470060 	.word	0x42470060
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x4ec>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d028      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d121      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d11a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e42:	0192      	lsls	r2, r2, #6
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002e70:	2300      	movs	r3, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_RCC_ClockConfig>:
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0cc      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002e94:	4b68      	ldr	r3, [pc, #416]	@ (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d90c      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
 8002ea2:	4b65      	ldr	r3, [pc, #404]	@ (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	4b63      	ldr	r3, [pc, #396]	@ (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x8a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x60>
 8002ed4:	4b59      	ldr	r3, [pc, #356]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x78>
 8002eec:	4b53      	ldr	r3, [pc, #332]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
 8002ef8:	4b50      	ldr	r3, [pc, #320]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d044      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x120>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xae>
 8002f1e:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d119      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_ClockConfig+0xbe>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xce>
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e067      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002f5e:	4b37      	ldr	r3, [pc, #220]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4934      	ldr	r1, [pc, #208]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
 8002f70:	f7ff fa5a 	bl	8002428 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
 8002f78:	f7ff fa56 	bl	8002428 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf8>
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d20c      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x166>
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x186>
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
 8003006:	f000 f821 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490a      	ldr	r1, [pc, #40]	@ (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f9ba 	bl	80023a0 <HAL_InitTick>
 800302c:	2300      	movs	r3, #0
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	0802aa40 	.word	0x0802aa40
 8003044:	20000000 	.word	0x20000000
 8003048:	20000008 	.word	0x20000008

0800304c <HAL_RCC_GetSysClockFreq>:
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b090      	sub	sp, #64	@ 0x40
 8003052:	af00      	add	r7, sp, #0
 8003054:	2300      	movs	r3, #0
 8003056:	637b      	str	r3, [r7, #52]	@ 0x34
 8003058:	2300      	movs	r3, #0
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800305c:	2300      	movs	r3, #0
 800305e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003060:	2300      	movs	r3, #0
 8003062:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003064:	4b59      	ldr	r3, [pc, #356]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x40>
 8003070:	2b08      	cmp	r3, #8
 8003072:	f200 80a1 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3a>
 800307e:	e09b      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003080:	4b53      	ldr	r3, [pc, #332]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003082:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003084:	e09b      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x172>
 8003086:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800308a:	e098      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x172>
 800308c:	4b4f      	ldr	r3, [pc, #316]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x180>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003094:	637b      	str	r3, [r7, #52]	@ 0x34
 8003096:	4b4d      	ldr	r3, [pc, #308]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d028      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0xa8>
 80030a2:	4b4a      	ldr	r3, [pc, #296]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x180>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030b4:	2100      	movs	r1, #0
 80030b6:	4b47      	ldr	r3, [pc, #284]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030b8:	fb03 f201 	mul.w	r2, r3, r1
 80030bc:	2300      	movs	r3, #0
 80030be:	fb00 f303 	mul.w	r3, r0, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	4a43      	ldr	r2, [pc, #268]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030c6:	fba0 1202 	umull	r1, r2, r0, r2
 80030ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030cc:	460a      	mov	r2, r1
 80030ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d2:	4413      	add	r3, r2
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	2200      	movs	r2, #0
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	61fa      	str	r2, [r7, #28]
 80030de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030e6:	f7fd fdb9 	bl	8000c5c <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4613      	mov	r3, r2
 80030f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030f2:	e053      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x150>
 80030f4:	4b35      	ldr	r3, [pc, #212]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x180>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	2200      	movs	r2, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	617a      	str	r2, [r7, #20]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003106:	f04f 0b00 	mov.w	fp, #0
 800310a:	4652      	mov	r2, sl
 800310c:	465b      	mov	r3, fp
 800310e:	f04f 0000 	mov.w	r0, #0
 8003112:	f04f 0100 	mov.w	r1, #0
 8003116:	0159      	lsls	r1, r3, #5
 8003118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800311c:	0150      	lsls	r0, r2, #5
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	ebb2 080a 	subs.w	r8, r2, sl
 8003126:	eb63 090b 	sbc.w	r9, r3, fp
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800313a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800313e:	ebb2 0408 	subs.w	r4, r2, r8
 8003142:	eb63 0509 	sbc.w	r5, r3, r9
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	00eb      	lsls	r3, r5, #3
 8003150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003154:	00e2      	lsls	r2, r4, #3
 8003156:	4614      	mov	r4, r2
 8003158:	461d      	mov	r5, r3
 800315a:	eb14 030a 	adds.w	r3, r4, sl
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	eb45 030b 	adc.w	r3, r5, fp
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003172:	4629      	mov	r1, r5
 8003174:	028b      	lsls	r3, r1, #10
 8003176:	4621      	mov	r1, r4
 8003178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800317c:	4621      	mov	r1, r4
 800317e:	028a      	lsls	r2, r1, #10
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	2200      	movs	r2, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	60fa      	str	r2, [r7, #12]
 800318c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003190:	f7fd fd64 	bl	8000c5c <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x180>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	3301      	adds	r3, #1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031b6:	e002      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x172>
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031bc:	bf00      	nop
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	4618      	mov	r0, r3
 80031c2:	3740      	adds	r7, #64	@ 0x40
 80031c4:	46bd      	mov	sp, r7
 80031c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	017d7840 	.word	0x017d7840

080031d8 <HAL_SPI_Init>:
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Init+0x12>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07b      	b.n	80032e2 <HAL_SPI_Init+0x10a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_SPI_Init+0x2c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031fa:	d009      	beq.n	8003210 <HAL_SPI_Init+0x38>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
 8003202:	e005      	b.n	8003210 <HAL_SPI_Init+0x38>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_SPI_Init+0x58>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe f8b6 	bl	800139c <HAL_SPI_MspInit>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003294:	ea42 0103 	orr.w	r1, r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	f003 0104 	and.w	r1, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	f003 0210 	and.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d0:	61da      	str	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80032e0:	2300      	movs	r3, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SPI_Transmit>:
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b088      	sub	sp, #32
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
 80032fa:	f7ff f895 	bl	8002428 <HAL_GetTick>
 80032fe:	61f8      	str	r0, [r7, #28]
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	837b      	strh	r3, [r7, #26]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d001      	beq.n	8003314 <HAL_SPI_Transmit+0x2a>
 8003310:	2302      	movs	r3, #2
 8003312:	e12a      	b.n	800356a <HAL_SPI_Transmit+0x280>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_SPI_Transmit+0x36>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_SPI_Transmit+0x3a>
 8003320:	2301      	movs	r3, #1
 8003322:	e122      	b.n	800356a <HAL_SPI_Transmit+0x280>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_SPI_Transmit+0x48>
 800332e:	2302      	movs	r3, #2
 8003330:	e11b      	b.n	800356a <HAL_SPI_Transmit+0x280>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	@ 0x54
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	869a      	strh	r2, [r3, #52]	@ 0x34
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	86da      	strh	r2, [r3, #54]	@ 0x36
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003380:	d10f      	bne.n	80033a2 <HAL_SPI_Transmit+0xb8>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b40      	cmp	r3, #64	@ 0x40
 80033ae:	d007      	beq.n	80033c0 <HAL_SPI_Transmit+0xd6>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c8:	d152      	bne.n	8003470 <HAL_SPI_Transmit+0x186>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0xee>
 80033d2:	8b7b      	ldrh	r3, [r7, #26]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d145      	bne.n	8003464 <HAL_SPI_Transmit+0x17a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033fc:	e032      	b.n	8003464 <HAL_SPI_Transmit+0x17a>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d112      	bne.n	8003432 <HAL_SPI_Transmit+0x148>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	631a      	str	r2, [r3, #48]	@ 0x30
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003430:	e018      	b.n	8003464 <HAL_SPI_Transmit+0x17a>
 8003432:	f7fe fff9 	bl	8002428 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d803      	bhi.n	800344a <HAL_SPI_Transmit+0x160>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d102      	bne.n	8003450 <HAL_SPI_Transmit+0x166>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_SPI_Transmit+0x17a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003460:	2303      	movs	r3, #3
 8003462:	e082      	b.n	800356a <HAL_SPI_Transmit+0x280>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1c7      	bne.n	80033fe <HAL_SPI_Transmit+0x114>
 800346e:	e053      	b.n	8003518 <HAL_SPI_Transmit+0x22e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit+0x194>
 8003478:	8b7b      	ldrh	r3, [r7, #26]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d147      	bne.n	800350e <HAL_SPI_Transmit+0x224>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034a4:	e033      	b.n	800350e <HAL_SPI_Transmit+0x224>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d113      	bne.n	80034dc <HAL_SPI_Transmit+0x1f2>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034da:	e018      	b.n	800350e <HAL_SPI_Transmit+0x224>
 80034dc:	f7fe ffa4 	bl	8002428 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d803      	bhi.n	80034f4 <HAL_SPI_Transmit+0x20a>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_Transmit+0x210>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_SPI_Transmit+0x224>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800350a:	2303      	movs	r3, #3
 800350c:	e02d      	b.n	800356a <HAL_SPI_Transmit+0x280>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1c6      	bne.n	80034a6 <HAL_SPI_Transmit+0x1bc>
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f8b1 	bl	8003684 <SPI_EndRxTxTransaction>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_SPI_Transmit+0x244>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <HAL_SPI_Transmit+0x262>
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_SPI_Transmit+0x27e>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_SPI_Transmit+0x280>
 8003568:	2300      	movs	r3, #0
 800356a:	4618      	mov	r0, r3
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <SPI_WaitFlagStateUntilTimeout>:
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
 8003584:	f7fe ff50 	bl	8002428 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	f7fe ff48 	bl	8002428 <HAL_GetTick>
 8003598:	61b8      	str	r0, [r7, #24]
 800359a:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	015b      	lsls	r3, r3, #5
 80035a0:	0d1b      	lsrs	r3, r3, #20
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e055      	b.n	8003658 <SPI_WaitFlagStateUntilTimeout+0xe4>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d051      	beq.n	8003658 <SPI_WaitFlagStateUntilTimeout+0xe4>
 80035b4:	f7fe ff38 	bl	8002428 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d902      	bls.n	80035ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d13d      	bne.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e2:	d111      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ec:	d004      	beq.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x84>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f6:	d107      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003610:	d10f      	bne.n	8003632 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003642:	2303      	movs	r3, #3
 8003644:	e018      	b.n	8003678 <SPI_WaitFlagStateUntilTimeout+0x104>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xde>
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e002      	b.n	8003658 <SPI_WaitFlagStateUntilTimeout+0xe4>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3b01      	subs	r3, #1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	429a      	cmp	r2, r3
 8003674:	d19a      	bne.n	80035ac <SPI_WaitFlagStateUntilTimeout+0x38>
 8003676:	2300      	movs	r3, #0
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000000 	.word	0x20000000

08003684 <SPI_EndRxTxTransaction>:
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2201      	movs	r2, #1
 8003698:	2102      	movs	r1, #2
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff ff6a 	bl	8003574 <SPI_WaitFlagStateUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <SPI_EndRxTxTransaction+0x32>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80036b2:	2303      	movs	r3, #3
 80036b4:	e032      	b.n	800371c <SPI_EndRxTxTransaction+0x98>
 80036b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <SPI_EndRxTxTransaction+0xa0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <SPI_EndRxTxTransaction+0xa4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	0d5b      	lsrs	r3, r3, #21
 80036c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d4:	d112      	bne.n	80036fc <SPI_EndRxTxTransaction+0x78>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	2180      	movs	r1, #128	@ 0x80
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff ff47 	bl	8003574 <SPI_WaitFlagStateUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d016      	beq.n	800371a <SPI_EndRxTxTransaction+0x96>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80036f8:	2303      	movs	r3, #3
 80036fa:	e00f      	b.n	800371c <SPI_EndRxTxTransaction+0x98>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <SPI_EndRxTxTransaction+0x94>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3b01      	subs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b80      	cmp	r3, #128	@ 0x80
 8003714:	d0f2      	beq.n	80036fc <SPI_EndRxTxTransaction+0x78>
 8003716:	e000      	b.n	800371a <SPI_EndRxTxTransaction+0x96>
 8003718:	bf00      	nop
 800371a:	2300      	movs	r3, #0
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000000 	.word	0x20000000
 8003728:	165e9f81 	.word	0x165e9f81

0800372c <_vsniprintf_r>:
 800372c:	b530      	push	{r4, r5, lr}
 800372e:	4614      	mov	r4, r2
 8003730:	2c00      	cmp	r4, #0
 8003732:	b09b      	sub	sp, #108	@ 0x6c
 8003734:	4605      	mov	r5, r0
 8003736:	461a      	mov	r2, r3
 8003738:	da05      	bge.n	8003746 <_vsniprintf_r+0x1a>
 800373a:	238b      	movs	r3, #139	@ 0x8b
 800373c:	6003      	str	r3, [r0, #0]
 800373e:	f04f 30ff 	mov.w	r0, #4294967295
 8003742:	b01b      	add	sp, #108	@ 0x6c
 8003744:	bd30      	pop	{r4, r5, pc}
 8003746:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800374a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	9319      	str	r3, [sp, #100]	@ 0x64
 8003754:	bf14      	ite	ne
 8003756:	f104 33ff 	addne.w	r3, r4, #4294967295
 800375a:	4623      	moveq	r3, r4
 800375c:	9302      	str	r3, [sp, #8]
 800375e:	9305      	str	r3, [sp, #20]
 8003760:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003764:	9100      	str	r1, [sp, #0]
 8003766:	9104      	str	r1, [sp, #16]
 8003768:	f8ad 300e 	strh.w	r3, [sp, #14]
 800376c:	4669      	mov	r1, sp
 800376e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003770:	f000 f9a0 	bl	8003ab4 <_svfiprintf_r>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	bfbc      	itt	lt
 8003778:	238b      	movlt	r3, #139	@ 0x8b
 800377a:	602b      	strlt	r3, [r5, #0]
 800377c:	2c00      	cmp	r4, #0
 800377e:	d0e0      	beq.n	8003742 <_vsniprintf_r+0x16>
 8003780:	9b00      	ldr	r3, [sp, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e7dc      	b.n	8003742 <_vsniprintf_r+0x16>

08003788 <vsniprintf>:
 8003788:	b507      	push	{r0, r1, r2, lr}
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	460a      	mov	r2, r1
 8003790:	4601      	mov	r1, r0
 8003792:	4803      	ldr	r0, [pc, #12]	@ (80037a0 <vsniprintf+0x18>)
 8003794:	6800      	ldr	r0, [r0, #0]
 8003796:	f7ff ffc9 	bl	800372c <_vsniprintf_r>
 800379a:	b003      	add	sp, #12
 800379c:	f85d fb04 	ldr.w	pc, [sp], #4
 80037a0:	20000010 	.word	0x20000010

080037a4 <memset>:
 80037a4:	4402      	add	r2, r0
 80037a6:	4603      	mov	r3, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d100      	bne.n	80037ae <memset+0xa>
 80037ac:	4770      	bx	lr
 80037ae:	f803 1b01 	strb.w	r1, [r3], #1
 80037b2:	e7f9      	b.n	80037a8 <memset+0x4>

080037b4 <__errno>:
 80037b4:	4b01      	ldr	r3, [pc, #4]	@ (80037bc <__errno+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000010 	.word	0x20000010

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4d0d      	ldr	r5, [pc, #52]	@ (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	@ (80037fc <__libc_init_array+0x3c>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2600      	movs	r6, #0
 80037cc:	42a6      	cmp	r6, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003804 <__libc_init_array+0x44>)
 80037d4:	f001 fcdc 	bl	8005190 <_init>
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2600      	movs	r6, #0
 80037de:	42a6      	cmp	r6, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e8:	4798      	blx	r3
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f2:	4798      	blx	r3
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	0802b680 	.word	0x0802b680
 80037fc:	0802b680 	.word	0x0802b680
 8003800:	0802b680 	.word	0x0802b680
 8003804:	0802b684 	.word	0x0802b684

08003808 <__retarget_lock_acquire_recursive>:
 8003808:	4770      	bx	lr

0800380a <__retarget_lock_release_recursive>:
 800380a:	4770      	bx	lr

0800380c <_free_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
 8003810:	2900      	cmp	r1, #0
 8003812:	d041      	beq.n	8003898 <_free_r+0x8c>
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f0c      	subs	r4, r1, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfb8      	it	lt
 800381e:	18e4      	addlt	r4, r4, r3
 8003820:	f000 f8e0 	bl	80039e4 <__malloc_lock>
 8003824:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <_free_r+0x90>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	b933      	cbnz	r3, 8003838 <_free_r+0x2c>
 800382a:	6063      	str	r3, [r4, #4]
 800382c:	6014      	str	r4, [r2, #0]
 800382e:	4628      	mov	r0, r5
 8003830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003834:	f000 b8dc 	b.w	80039f0 <__malloc_unlock>
 8003838:	42a3      	cmp	r3, r4
 800383a:	d908      	bls.n	800384e <_free_r+0x42>
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	1821      	adds	r1, r4, r0
 8003840:	428b      	cmp	r3, r1
 8003842:	bf01      	itttt	eq
 8003844:	6819      	ldreq	r1, [r3, #0]
 8003846:	685b      	ldreq	r3, [r3, #4]
 8003848:	1809      	addeq	r1, r1, r0
 800384a:	6021      	streq	r1, [r4, #0]
 800384c:	e7ed      	b.n	800382a <_free_r+0x1e>
 800384e:	461a      	mov	r2, r3
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b10b      	cbz	r3, 8003858 <_free_r+0x4c>
 8003854:	42a3      	cmp	r3, r4
 8003856:	d9fa      	bls.n	800384e <_free_r+0x42>
 8003858:	6811      	ldr	r1, [r2, #0]
 800385a:	1850      	adds	r0, r2, r1
 800385c:	42a0      	cmp	r0, r4
 800385e:	d10b      	bne.n	8003878 <_free_r+0x6c>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	4401      	add	r1, r0
 8003864:	1850      	adds	r0, r2, r1
 8003866:	4283      	cmp	r3, r0
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	d1e0      	bne.n	800382e <_free_r+0x22>
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	6053      	str	r3, [r2, #4]
 8003872:	4408      	add	r0, r1
 8003874:	6010      	str	r0, [r2, #0]
 8003876:	e7da      	b.n	800382e <_free_r+0x22>
 8003878:	d902      	bls.n	8003880 <_free_r+0x74>
 800387a:	230c      	movs	r3, #12
 800387c:	602b      	str	r3, [r5, #0]
 800387e:	e7d6      	b.n	800382e <_free_r+0x22>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	1821      	adds	r1, r4, r0
 8003884:	428b      	cmp	r3, r1
 8003886:	bf04      	itt	eq
 8003888:	6819      	ldreq	r1, [r3, #0]
 800388a:	685b      	ldreq	r3, [r3, #4]
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	bf04      	itt	eq
 8003890:	1809      	addeq	r1, r1, r0
 8003892:	6021      	streq	r1, [r4, #0]
 8003894:	6054      	str	r4, [r2, #4]
 8003896:	e7ca      	b.n	800382e <_free_r+0x22>
 8003898:	bd38      	pop	{r3, r4, r5, pc}
 800389a:	bf00      	nop
 800389c:	20000220 	.word	0x20000220

080038a0 <sbrk_aligned>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4e0f      	ldr	r6, [pc, #60]	@ (80038e0 <sbrk_aligned+0x40>)
 80038a4:	460c      	mov	r4, r1
 80038a6:	6831      	ldr	r1, [r6, #0]
 80038a8:	4605      	mov	r5, r0
 80038aa:	b911      	cbnz	r1, 80038b2 <sbrk_aligned+0x12>
 80038ac:	f000 fba4 	bl	8003ff8 <_sbrk_r>
 80038b0:	6030      	str	r0, [r6, #0]
 80038b2:	4621      	mov	r1, r4
 80038b4:	4628      	mov	r0, r5
 80038b6:	f000 fb9f 	bl	8003ff8 <_sbrk_r>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d103      	bne.n	80038c6 <sbrk_aligned+0x26>
 80038be:	f04f 34ff 	mov.w	r4, #4294967295
 80038c2:	4620      	mov	r0, r4
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	1cc4      	adds	r4, r0, #3
 80038c8:	f024 0403 	bic.w	r4, r4, #3
 80038cc:	42a0      	cmp	r0, r4
 80038ce:	d0f8      	beq.n	80038c2 <sbrk_aligned+0x22>
 80038d0:	1a21      	subs	r1, r4, r0
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 fb90 	bl	8003ff8 <_sbrk_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d1f2      	bne.n	80038c2 <sbrk_aligned+0x22>
 80038dc:	e7ef      	b.n	80038be <sbrk_aligned+0x1e>
 80038de:	bf00      	nop
 80038e0:	2000021c 	.word	0x2000021c

080038e4 <_malloc_r>:
 80038e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e8:	1ccd      	adds	r5, r1, #3
 80038ea:	f025 0503 	bic.w	r5, r5, #3
 80038ee:	3508      	adds	r5, #8
 80038f0:	2d0c      	cmp	r5, #12
 80038f2:	bf38      	it	cc
 80038f4:	250c      	movcc	r5, #12
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	4606      	mov	r6, r0
 80038fa:	db01      	blt.n	8003900 <_malloc_r+0x1c>
 80038fc:	42a9      	cmp	r1, r5
 80038fe:	d904      	bls.n	800390a <_malloc_r+0x26>
 8003900:	230c      	movs	r3, #12
 8003902:	6033      	str	r3, [r6, #0]
 8003904:	2000      	movs	r0, #0
 8003906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039e0 <_malloc_r+0xfc>
 800390e:	f000 f869 	bl	80039e4 <__malloc_lock>
 8003912:	f8d8 3000 	ldr.w	r3, [r8]
 8003916:	461c      	mov	r4, r3
 8003918:	bb44      	cbnz	r4, 800396c <_malloc_r+0x88>
 800391a:	4629      	mov	r1, r5
 800391c:	4630      	mov	r0, r6
 800391e:	f7ff ffbf 	bl	80038a0 <sbrk_aligned>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	4604      	mov	r4, r0
 8003926:	d158      	bne.n	80039da <_malloc_r+0xf6>
 8003928:	f8d8 4000 	ldr.w	r4, [r8]
 800392c:	4627      	mov	r7, r4
 800392e:	2f00      	cmp	r7, #0
 8003930:	d143      	bne.n	80039ba <_malloc_r+0xd6>
 8003932:	2c00      	cmp	r4, #0
 8003934:	d04b      	beq.n	80039ce <_malloc_r+0xea>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	4639      	mov	r1, r7
 800393a:	4630      	mov	r0, r6
 800393c:	eb04 0903 	add.w	r9, r4, r3
 8003940:	f000 fb5a 	bl	8003ff8 <_sbrk_r>
 8003944:	4581      	cmp	r9, r0
 8003946:	d142      	bne.n	80039ce <_malloc_r+0xea>
 8003948:	6821      	ldr	r1, [r4, #0]
 800394a:	1a6d      	subs	r5, r5, r1
 800394c:	4629      	mov	r1, r5
 800394e:	4630      	mov	r0, r6
 8003950:	f7ff ffa6 	bl	80038a0 <sbrk_aligned>
 8003954:	3001      	adds	r0, #1
 8003956:	d03a      	beq.n	80039ce <_malloc_r+0xea>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	442b      	add	r3, r5
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	f8d8 3000 	ldr.w	r3, [r8]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	bb62      	cbnz	r2, 80039c0 <_malloc_r+0xdc>
 8003966:	f8c8 7000 	str.w	r7, [r8]
 800396a:	e00f      	b.n	800398c <_malloc_r+0xa8>
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	1b52      	subs	r2, r2, r5
 8003970:	d420      	bmi.n	80039b4 <_malloc_r+0xd0>
 8003972:	2a0b      	cmp	r2, #11
 8003974:	d917      	bls.n	80039a6 <_malloc_r+0xc2>
 8003976:	1961      	adds	r1, r4, r5
 8003978:	42a3      	cmp	r3, r4
 800397a:	6025      	str	r5, [r4, #0]
 800397c:	bf18      	it	ne
 800397e:	6059      	strne	r1, [r3, #4]
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	bf08      	it	eq
 8003984:	f8c8 1000 	streq.w	r1, [r8]
 8003988:	5162      	str	r2, [r4, r5]
 800398a:	604b      	str	r3, [r1, #4]
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f82f 	bl	80039f0 <__malloc_unlock>
 8003992:	f104 000b 	add.w	r0, r4, #11
 8003996:	1d23      	adds	r3, r4, #4
 8003998:	f020 0007 	bic.w	r0, r0, #7
 800399c:	1ac2      	subs	r2, r0, r3
 800399e:	bf1c      	itt	ne
 80039a0:	1a1b      	subne	r3, r3, r0
 80039a2:	50a3      	strne	r3, [r4, r2]
 80039a4:	e7af      	b.n	8003906 <_malloc_r+0x22>
 80039a6:	6862      	ldr	r2, [r4, #4]
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	bf0c      	ite	eq
 80039ac:	f8c8 2000 	streq.w	r2, [r8]
 80039b0:	605a      	strne	r2, [r3, #4]
 80039b2:	e7eb      	b.n	800398c <_malloc_r+0xa8>
 80039b4:	4623      	mov	r3, r4
 80039b6:	6864      	ldr	r4, [r4, #4]
 80039b8:	e7ae      	b.n	8003918 <_malloc_r+0x34>
 80039ba:	463c      	mov	r4, r7
 80039bc:	687f      	ldr	r7, [r7, #4]
 80039be:	e7b6      	b.n	800392e <_malloc_r+0x4a>
 80039c0:	461a      	mov	r2, r3
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	d1fb      	bne.n	80039c0 <_malloc_r+0xdc>
 80039c8:	2300      	movs	r3, #0
 80039ca:	6053      	str	r3, [r2, #4]
 80039cc:	e7de      	b.n	800398c <_malloc_r+0xa8>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 f80c 	bl	80039f0 <__malloc_unlock>
 80039d8:	e794      	b.n	8003904 <_malloc_r+0x20>
 80039da:	6005      	str	r5, [r0, #0]
 80039dc:	e7d6      	b.n	800398c <_malloc_r+0xa8>
 80039de:	bf00      	nop
 80039e0:	20000220 	.word	0x20000220

080039e4 <__malloc_lock>:
 80039e4:	4801      	ldr	r0, [pc, #4]	@ (80039ec <__malloc_lock+0x8>)
 80039e6:	f7ff bf0f 	b.w	8003808 <__retarget_lock_acquire_recursive>
 80039ea:	bf00      	nop
 80039ec:	20000218 	.word	0x20000218

080039f0 <__malloc_unlock>:
 80039f0:	4801      	ldr	r0, [pc, #4]	@ (80039f8 <__malloc_unlock+0x8>)
 80039f2:	f7ff bf0a 	b.w	800380a <__retarget_lock_release_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000218 	.word	0x20000218

080039fc <__ssputs_r>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	688e      	ldr	r6, [r1, #8]
 8003a02:	461f      	mov	r7, r3
 8003a04:	42be      	cmp	r6, r7
 8003a06:	680b      	ldr	r3, [r1, #0]
 8003a08:	4682      	mov	sl, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4690      	mov	r8, r2
 8003a0e:	d82d      	bhi.n	8003a6c <__ssputs_r+0x70>
 8003a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a18:	d026      	beq.n	8003a68 <__ssputs_r+0x6c>
 8003a1a:	6965      	ldr	r5, [r4, #20]
 8003a1c:	6909      	ldr	r1, [r1, #16]
 8003a1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a22:	eba3 0901 	sub.w	r9, r3, r1
 8003a26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a2a:	1c7b      	adds	r3, r7, #1
 8003a2c:	444b      	add	r3, r9
 8003a2e:	106d      	asrs	r5, r5, #1
 8003a30:	429d      	cmp	r5, r3
 8003a32:	bf38      	it	cc
 8003a34:	461d      	movcc	r5, r3
 8003a36:	0553      	lsls	r3, r2, #21
 8003a38:	d527      	bpl.n	8003a8a <__ssputs_r+0x8e>
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	f7ff ff52 	bl	80038e4 <_malloc_r>
 8003a40:	4606      	mov	r6, r0
 8003a42:	b360      	cbz	r0, 8003a9e <__ssputs_r+0xa2>
 8003a44:	6921      	ldr	r1, [r4, #16]
 8003a46:	464a      	mov	r2, r9
 8003a48:	f000 fae6 	bl	8004018 <memcpy>
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a56:	81a3      	strh	r3, [r4, #12]
 8003a58:	6126      	str	r6, [r4, #16]
 8003a5a:	6165      	str	r5, [r4, #20]
 8003a5c:	444e      	add	r6, r9
 8003a5e:	eba5 0509 	sub.w	r5, r5, r9
 8003a62:	6026      	str	r6, [r4, #0]
 8003a64:	60a5      	str	r5, [r4, #8]
 8003a66:	463e      	mov	r6, r7
 8003a68:	42be      	cmp	r6, r7
 8003a6a:	d900      	bls.n	8003a6e <__ssputs_r+0x72>
 8003a6c:	463e      	mov	r6, r7
 8003a6e:	6820      	ldr	r0, [r4, #0]
 8003a70:	4632      	mov	r2, r6
 8003a72:	4641      	mov	r1, r8
 8003a74:	f000 faa6 	bl	8003fc4 <memmove>
 8003a78:	68a3      	ldr	r3, [r4, #8]
 8003a7a:	1b9b      	subs	r3, r3, r6
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	4433      	add	r3, r6
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	2000      	movs	r0, #0
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8a:	462a      	mov	r2, r5
 8003a8c:	f000 fad2 	bl	8004034 <_realloc_r>
 8003a90:	4606      	mov	r6, r0
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d1e0      	bne.n	8003a58 <__ssputs_r+0x5c>
 8003a96:	6921      	ldr	r1, [r4, #16]
 8003a98:	4650      	mov	r0, sl
 8003a9a:	f7ff feb7 	bl	800380c <_free_r>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	f8ca 3000 	str.w	r3, [sl]
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aaa:	81a3      	strh	r3, [r4, #12]
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e7e9      	b.n	8003a86 <__ssputs_r+0x8a>
	...

08003ab4 <_svfiprintf_r>:
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	4698      	mov	r8, r3
 8003aba:	898b      	ldrh	r3, [r1, #12]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	b09d      	sub	sp, #116	@ 0x74
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	d510      	bpl.n	8003aea <_svfiprintf_r+0x36>
 8003ac8:	690b      	ldr	r3, [r1, #16]
 8003aca:	b973      	cbnz	r3, 8003aea <_svfiprintf_r+0x36>
 8003acc:	2140      	movs	r1, #64	@ 0x40
 8003ace:	f7ff ff09 	bl	80038e4 <_malloc_r>
 8003ad2:	6028      	str	r0, [r5, #0]
 8003ad4:	6128      	str	r0, [r5, #16]
 8003ad6:	b930      	cbnz	r0, 8003ae6 <_svfiprintf_r+0x32>
 8003ad8:	230c      	movs	r3, #12
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	b01d      	add	sp, #116	@ 0x74
 8003ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae6:	2340      	movs	r3, #64	@ 0x40
 8003ae8:	616b      	str	r3, [r5, #20]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aee:	2320      	movs	r3, #32
 8003af0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af8:	2330      	movs	r3, #48	@ 0x30
 8003afa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c98 <_svfiprintf_r+0x1e4>
 8003afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b02:	f04f 0901 	mov.w	r9, #1
 8003b06:	4623      	mov	r3, r4
 8003b08:	469a      	mov	sl, r3
 8003b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b0e:	b10a      	cbz	r2, 8003b14 <_svfiprintf_r+0x60>
 8003b10:	2a25      	cmp	r2, #37	@ 0x25
 8003b12:	d1f9      	bne.n	8003b08 <_svfiprintf_r+0x54>
 8003b14:	ebba 0b04 	subs.w	fp, sl, r4
 8003b18:	d00b      	beq.n	8003b32 <_svfiprintf_r+0x7e>
 8003b1a:	465b      	mov	r3, fp
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4638      	mov	r0, r7
 8003b22:	f7ff ff6b 	bl	80039fc <__ssputs_r>
 8003b26:	3001      	adds	r0, #1
 8003b28:	f000 80a7 	beq.w	8003c7a <_svfiprintf_r+0x1c6>
 8003b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b2e:	445a      	add	r2, fp
 8003b30:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b32:	f89a 3000 	ldrb.w	r3, [sl]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 809f 	beq.w	8003c7a <_svfiprintf_r+0x1c6>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b46:	f10a 0a01 	add.w	sl, sl, #1
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	9307      	str	r3, [sp, #28]
 8003b4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b52:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b54:	4654      	mov	r4, sl
 8003b56:	2205      	movs	r2, #5
 8003b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5c:	484e      	ldr	r0, [pc, #312]	@ (8003c98 <_svfiprintf_r+0x1e4>)
 8003b5e:	f7fc fb3f 	bl	80001e0 <memchr>
 8003b62:	9a04      	ldr	r2, [sp, #16]
 8003b64:	b9d8      	cbnz	r0, 8003b9e <_svfiprintf_r+0xea>
 8003b66:	06d0      	lsls	r0, r2, #27
 8003b68:	bf44      	itt	mi
 8003b6a:	2320      	movmi	r3, #32
 8003b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b70:	0711      	lsls	r1, r2, #28
 8003b72:	bf44      	itt	mi
 8003b74:	232b      	movmi	r3, #43	@ 0x2b
 8003b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b80:	d015      	beq.n	8003bae <_svfiprintf_r+0xfa>
 8003b82:	9a07      	ldr	r2, [sp, #28]
 8003b84:	4654      	mov	r4, sl
 8003b86:	2000      	movs	r0, #0
 8003b88:	f04f 0c0a 	mov.w	ip, #10
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b92:	3b30      	subs	r3, #48	@ 0x30
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d94b      	bls.n	8003c30 <_svfiprintf_r+0x17c>
 8003b98:	b1b0      	cbz	r0, 8003bc8 <_svfiprintf_r+0x114>
 8003b9a:	9207      	str	r2, [sp, #28]
 8003b9c:	e014      	b.n	8003bc8 <_svfiprintf_r+0x114>
 8003b9e:	eba0 0308 	sub.w	r3, r0, r8
 8003ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	46a2      	mov	sl, r4
 8003bac:	e7d2      	b.n	8003b54 <_svfiprintf_r+0xa0>
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	1d19      	adds	r1, r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	9103      	str	r1, [sp, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfbb      	ittet	lt
 8003bba:	425b      	neglt	r3, r3
 8003bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8003bc0:	9307      	strge	r3, [sp, #28]
 8003bc2:	9307      	strlt	r3, [sp, #28]
 8003bc4:	bfb8      	it	lt
 8003bc6:	9204      	strlt	r2, [sp, #16]
 8003bc8:	7823      	ldrb	r3, [r4, #0]
 8003bca:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bcc:	d10a      	bne.n	8003be4 <_svfiprintf_r+0x130>
 8003bce:	7863      	ldrb	r3, [r4, #1]
 8003bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bd2:	d132      	bne.n	8003c3a <_svfiprintf_r+0x186>
 8003bd4:	9b03      	ldr	r3, [sp, #12]
 8003bd6:	1d1a      	adds	r2, r3, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	9203      	str	r2, [sp, #12]
 8003bdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003be0:	3402      	adds	r4, #2
 8003be2:	9305      	str	r3, [sp, #20]
 8003be4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ca8 <_svfiprintf_r+0x1f4>
 8003be8:	7821      	ldrb	r1, [r4, #0]
 8003bea:	2203      	movs	r2, #3
 8003bec:	4650      	mov	r0, sl
 8003bee:	f7fc faf7 	bl	80001e0 <memchr>
 8003bf2:	b138      	cbz	r0, 8003c04 <_svfiprintf_r+0x150>
 8003bf4:	9b04      	ldr	r3, [sp, #16]
 8003bf6:	eba0 000a 	sub.w	r0, r0, sl
 8003bfa:	2240      	movs	r2, #64	@ 0x40
 8003bfc:	4082      	lsls	r2, r0
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	3401      	adds	r4, #1
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c08:	4824      	ldr	r0, [pc, #144]	@ (8003c9c <_svfiprintf_r+0x1e8>)
 8003c0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c0e:	2206      	movs	r2, #6
 8003c10:	f7fc fae6 	bl	80001e0 <memchr>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d036      	beq.n	8003c86 <_svfiprintf_r+0x1d2>
 8003c18:	4b21      	ldr	r3, [pc, #132]	@ (8003ca0 <_svfiprintf_r+0x1ec>)
 8003c1a:	bb1b      	cbnz	r3, 8003c64 <_svfiprintf_r+0x1b0>
 8003c1c:	9b03      	ldr	r3, [sp, #12]
 8003c1e:	3307      	adds	r3, #7
 8003c20:	f023 0307 	bic.w	r3, r3, #7
 8003c24:	3308      	adds	r3, #8
 8003c26:	9303      	str	r3, [sp, #12]
 8003c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c2a:	4433      	add	r3, r6
 8003c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c2e:	e76a      	b.n	8003b06 <_svfiprintf_r+0x52>
 8003c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c34:	460c      	mov	r4, r1
 8003c36:	2001      	movs	r0, #1
 8003c38:	e7a8      	b.n	8003b8c <_svfiprintf_r+0xd8>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	3401      	adds	r4, #1
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	4619      	mov	r1, r3
 8003c42:	f04f 0c0a 	mov.w	ip, #10
 8003c46:	4620      	mov	r0, r4
 8003c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c4c:	3a30      	subs	r2, #48	@ 0x30
 8003c4e:	2a09      	cmp	r2, #9
 8003c50:	d903      	bls.n	8003c5a <_svfiprintf_r+0x1a6>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0c6      	beq.n	8003be4 <_svfiprintf_r+0x130>
 8003c56:	9105      	str	r1, [sp, #20]
 8003c58:	e7c4      	b.n	8003be4 <_svfiprintf_r+0x130>
 8003c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c5e:	4604      	mov	r4, r0
 8003c60:	2301      	movs	r3, #1
 8003c62:	e7f0      	b.n	8003c46 <_svfiprintf_r+0x192>
 8003c64:	ab03      	add	r3, sp, #12
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	462a      	mov	r2, r5
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <_svfiprintf_r+0x1f0>)
 8003c6c:	a904      	add	r1, sp, #16
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f3af 8000 	nop.w
 8003c74:	1c42      	adds	r2, r0, #1
 8003c76:	4606      	mov	r6, r0
 8003c78:	d1d6      	bne.n	8003c28 <_svfiprintf_r+0x174>
 8003c7a:	89ab      	ldrh	r3, [r5, #12]
 8003c7c:	065b      	lsls	r3, r3, #25
 8003c7e:	f53f af2d 	bmi.w	8003adc <_svfiprintf_r+0x28>
 8003c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c84:	e72c      	b.n	8003ae0 <_svfiprintf_r+0x2c>
 8003c86:	ab03      	add	r3, sp, #12
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462a      	mov	r2, r5
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <_svfiprintf_r+0x1f0>)
 8003c8e:	a904      	add	r1, sp, #16
 8003c90:	4638      	mov	r0, r7
 8003c92:	f000 f879 	bl	8003d88 <_printf_i>
 8003c96:	e7ed      	b.n	8003c74 <_svfiprintf_r+0x1c0>
 8003c98:	0802b468 	.word	0x0802b468
 8003c9c:	0802b472 	.word	0x0802b472
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	080039fd 	.word	0x080039fd
 8003ca8:	0802b46e 	.word	0x0802b46e

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4698      	mov	r8, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	3b00      	subs	r3, #0
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d08:	4641      	mov	r1, r8
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c8      	blx	r9
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	f003 0306 	and.w	r3, r3, #6
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf02      	ittt	eq
 8003d1e:	68e5      	ldreq	r5, [r4, #12]
 8003d20:	6833      	ldreq	r3, [r6, #0]
 8003d22:	1aed      	subeq	r5, r5, r3
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4641      	mov	r1, r8
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c8      	blx	r9
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	@ 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4641      	mov	r1, r8
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c8      	blx	r9
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d90:	2f78      	cmp	r7, #120	@ 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	@ 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d1 	beq.w	8003f4c <_printf_i+0x1c4>
 8003daa:	2f58      	cmp	r7, #88	@ 0x58
 8003dac:	f000 80b8 	beq.w	8003f20 <_printf_i+0x198>
 8003db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f33 	.word	0x08003f33
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003eed 	.word	0x08003eed
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f55 	.word	0x08003f55
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e5f 	.word	0x08003e5f
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003ef5 	.word	0x08003ef5
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6032      	str	r2, [r6, #0]
 8003e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09c      	b.n	8003f6e <_printf_i+0x1e6>
 8003e34:	6833      	ldr	r3, [r6, #0]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	6031      	str	r1, [r6, #0]
 8003e3c:	0606      	lsls	r6, r0, #24
 8003e3e:	d501      	bpl.n	8003e44 <_printf_i+0xbc>
 8003e40:	681d      	ldr	r5, [r3, #0]
 8003e42:	e003      	b.n	8003e4c <_printf_i+0xc4>
 8003e44:	0645      	lsls	r5, r0, #25
 8003e46:	d5fb      	bpl.n	8003e40 <_printf_i+0xb8>
 8003e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	da03      	bge.n	8003e58 <_printf_i+0xd0>
 8003e50:	232d      	movs	r3, #45	@ 0x2d
 8003e52:	426d      	negs	r5, r5
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e58:	4858      	ldr	r0, [pc, #352]	@ (8003fbc <_printf_i+0x234>)
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	e011      	b.n	8003e82 <_printf_i+0xfa>
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	0608      	lsls	r0, r1, #24
 8003e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0xe8>
 8003e6a:	0649      	lsls	r1, r1, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e72:	4852      	ldr	r0, [pc, #328]	@ (8003fbc <_printf_i+0x234>)
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	bf14      	ite	ne
 8003e78:	230a      	movne	r3, #10
 8003e7a:	2308      	moveq	r3, #8
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e82:	6866      	ldr	r6, [r4, #4]
 8003e84:	60a6      	str	r6, [r4, #8]
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	db05      	blt.n	8003e96 <_printf_i+0x10e>
 8003e8a:	6821      	ldr	r1, [r4, #0]
 8003e8c:	432e      	orrs	r6, r5
 8003e8e:	f021 0104 	bic.w	r1, r1, #4
 8003e92:	6021      	str	r1, [r4, #0]
 8003e94:	d04b      	beq.n	8003f2e <_printf_i+0x1a6>
 8003e96:	4616      	mov	r6, r2
 8003e98:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e9c:	fb03 5711 	mls	r7, r3, r1, r5
 8003ea0:	5dc7      	ldrb	r7, [r0, r7]
 8003ea2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ea6:	462f      	mov	r7, r5
 8003ea8:	42bb      	cmp	r3, r7
 8003eaa:	460d      	mov	r5, r1
 8003eac:	d9f4      	bls.n	8003e98 <_printf_i+0x110>
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d10b      	bne.n	8003eca <_printf_i+0x142>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	07df      	lsls	r7, r3, #31
 8003eb6:	d508      	bpl.n	8003eca <_printf_i+0x142>
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	6861      	ldr	r1, [r4, #4]
 8003ebc:	4299      	cmp	r1, r3
 8003ebe:	bfde      	ittt	le
 8003ec0:	2330      	movle	r3, #48	@ 0x30
 8003ec2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ec6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eca:	1b92      	subs	r2, r2, r6
 8003ecc:	6122      	str	r2, [r4, #16]
 8003ece:	f8cd a000 	str.w	sl, [sp]
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	aa03      	add	r2, sp, #12
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4640      	mov	r0, r8
 8003eda:	f7ff fee7 	bl	8003cac <_printf_common>
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d14a      	bne.n	8003f78 <_printf_i+0x1f0>
 8003ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee6:	b004      	add	sp, #16
 8003ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	f043 0320 	orr.w	r3, r3, #32
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	4832      	ldr	r0, [pc, #200]	@ (8003fc0 <_printf_i+0x238>)
 8003ef6:	2778      	movs	r7, #120	@ 0x78
 8003ef8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	061f      	lsls	r7, r3, #24
 8003f02:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f06:	d402      	bmi.n	8003f0e <_printf_i+0x186>
 8003f08:	065f      	lsls	r7, r3, #25
 8003f0a:	bf48      	it	mi
 8003f0c:	b2ad      	uxthmi	r5, r5
 8003f0e:	6031      	str	r1, [r6, #0]
 8003f10:	07d9      	lsls	r1, r3, #31
 8003f12:	bf44      	itt	mi
 8003f14:	f043 0320 	orrmi.w	r3, r3, #32
 8003f18:	6023      	strmi	r3, [r4, #0]
 8003f1a:	b11d      	cbz	r5, 8003f24 <_printf_i+0x19c>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	e7ad      	b.n	8003e7c <_printf_i+0xf4>
 8003f20:	4826      	ldr	r0, [pc, #152]	@ (8003fbc <_printf_i+0x234>)
 8003f22:	e7e9      	b.n	8003ef8 <_printf_i+0x170>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	e7f6      	b.n	8003f1c <_printf_i+0x194>
 8003f2e:	4616      	mov	r6, r2
 8003f30:	e7bd      	b.n	8003eae <_printf_i+0x126>
 8003f32:	6833      	ldr	r3, [r6, #0]
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	6961      	ldr	r1, [r4, #20]
 8003f38:	1d18      	adds	r0, r3, #4
 8003f3a:	6030      	str	r0, [r6, #0]
 8003f3c:	062e      	lsls	r6, r5, #24
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	d501      	bpl.n	8003f46 <_printf_i+0x1be>
 8003f42:	6019      	str	r1, [r3, #0]
 8003f44:	e002      	b.n	8003f4c <_printf_i+0x1c4>
 8003f46:	0668      	lsls	r0, r5, #25
 8003f48:	d5fb      	bpl.n	8003f42 <_printf_i+0x1ba>
 8003f4a:	8019      	strh	r1, [r3, #0]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6123      	str	r3, [r4, #16]
 8003f50:	4616      	mov	r6, r2
 8003f52:	e7bc      	b.n	8003ece <_printf_i+0x146>
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	6032      	str	r2, [r6, #0]
 8003f5a:	681e      	ldr	r6, [r3, #0]
 8003f5c:	6862      	ldr	r2, [r4, #4]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7fc f93d 	bl	80001e0 <memchr>
 8003f66:	b108      	cbz	r0, 8003f6c <_printf_i+0x1e4>
 8003f68:	1b80      	subs	r0, r0, r6
 8003f6a:	6060      	str	r0, [r4, #4]
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	6123      	str	r3, [r4, #16]
 8003f70:	2300      	movs	r3, #0
 8003f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f76:	e7aa      	b.n	8003ece <_printf_i+0x146>
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	4632      	mov	r2, r6
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	4640      	mov	r0, r8
 8003f80:	47d0      	blx	sl
 8003f82:	3001      	adds	r0, #1
 8003f84:	d0ad      	beq.n	8003ee2 <_printf_i+0x15a>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	079b      	lsls	r3, r3, #30
 8003f8a:	d413      	bmi.n	8003fb4 <_printf_i+0x22c>
 8003f8c:	68e0      	ldr	r0, [r4, #12]
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	4298      	cmp	r0, r3
 8003f92:	bfb8      	it	lt
 8003f94:	4618      	movlt	r0, r3
 8003f96:	e7a6      	b.n	8003ee6 <_printf_i+0x15e>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4632      	mov	r2, r6
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	47d0      	blx	sl
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d09d      	beq.n	8003ee2 <_printf_i+0x15a>
 8003fa6:	3501      	adds	r5, #1
 8003fa8:	68e3      	ldr	r3, [r4, #12]
 8003faa:	9903      	ldr	r1, [sp, #12]
 8003fac:	1a5b      	subs	r3, r3, r1
 8003fae:	42ab      	cmp	r3, r5
 8003fb0:	dcf2      	bgt.n	8003f98 <_printf_i+0x210>
 8003fb2:	e7eb      	b.n	8003f8c <_printf_i+0x204>
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	f104 0619 	add.w	r6, r4, #25
 8003fba:	e7f5      	b.n	8003fa8 <_printf_i+0x220>
 8003fbc:	0802b479 	.word	0x0802b479
 8003fc0:	0802b48a 	.word	0x0802b48a

08003fc4 <memmove>:
 8003fc4:	4288      	cmp	r0, r1
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	eb01 0402 	add.w	r4, r1, r2
 8003fcc:	d902      	bls.n	8003fd4 <memmove+0x10>
 8003fce:	4284      	cmp	r4, r0
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	d807      	bhi.n	8003fe4 <memmove+0x20>
 8003fd4:	1e43      	subs	r3, r0, #1
 8003fd6:	42a1      	cmp	r1, r4
 8003fd8:	d008      	beq.n	8003fec <memmove+0x28>
 8003fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fe2:	e7f8      	b.n	8003fd6 <memmove+0x12>
 8003fe4:	4402      	add	r2, r0
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	428a      	cmp	r2, r1
 8003fea:	d100      	bne.n	8003fee <memmove+0x2a>
 8003fec:	bd10      	pop	{r4, pc}
 8003fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ff6:	e7f7      	b.n	8003fe8 <memmove+0x24>

08003ff8 <_sbrk_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4d06      	ldr	r5, [pc, #24]	@ (8004014 <_sbrk_r+0x1c>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	f7fd fa42 	bl	800148c <_sbrk>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_sbrk_r+0x1a>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	b103      	cbz	r3, 8004012 <_sbrk_r+0x1a>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	20000214 	.word	0x20000214

08004018 <memcpy>:
 8004018:	440a      	add	r2, r1
 800401a:	4291      	cmp	r1, r2
 800401c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004020:	d100      	bne.n	8004024 <memcpy+0xc>
 8004022:	4770      	bx	lr
 8004024:	b510      	push	{r4, lr}
 8004026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800402a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800402e:	4291      	cmp	r1, r2
 8004030:	d1f9      	bne.n	8004026 <memcpy+0xe>
 8004032:	bd10      	pop	{r4, pc}

08004034 <_realloc_r>:
 8004034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004038:	4607      	mov	r7, r0
 800403a:	4614      	mov	r4, r2
 800403c:	460d      	mov	r5, r1
 800403e:	b921      	cbnz	r1, 800404a <_realloc_r+0x16>
 8004040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004044:	4611      	mov	r1, r2
 8004046:	f7ff bc4d 	b.w	80038e4 <_malloc_r>
 800404a:	b92a      	cbnz	r2, 8004058 <_realloc_r+0x24>
 800404c:	f7ff fbde 	bl	800380c <_free_r>
 8004050:	4625      	mov	r5, r4
 8004052:	4628      	mov	r0, r5
 8004054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004058:	f000 f81a 	bl	8004090 <_malloc_usable_size_r>
 800405c:	4284      	cmp	r4, r0
 800405e:	4606      	mov	r6, r0
 8004060:	d802      	bhi.n	8004068 <_realloc_r+0x34>
 8004062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004066:	d8f4      	bhi.n	8004052 <_realloc_r+0x1e>
 8004068:	4621      	mov	r1, r4
 800406a:	4638      	mov	r0, r7
 800406c:	f7ff fc3a 	bl	80038e4 <_malloc_r>
 8004070:	4680      	mov	r8, r0
 8004072:	b908      	cbnz	r0, 8004078 <_realloc_r+0x44>
 8004074:	4645      	mov	r5, r8
 8004076:	e7ec      	b.n	8004052 <_realloc_r+0x1e>
 8004078:	42b4      	cmp	r4, r6
 800407a:	4622      	mov	r2, r4
 800407c:	4629      	mov	r1, r5
 800407e:	bf28      	it	cs
 8004080:	4632      	movcs	r2, r6
 8004082:	f7ff ffc9 	bl	8004018 <memcpy>
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff fbbf 	bl	800380c <_free_r>
 800408e:	e7f1      	b.n	8004074 <_realloc_r+0x40>

08004090 <_malloc_usable_size_r>:
 8004090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004094:	1f18      	subs	r0, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bfbc      	itt	lt
 800409a:	580b      	ldrlt	r3, [r1, r0]
 800409c:	18c0      	addlt	r0, r0, r3
 800409e:	4770      	bx	lr

080040a0 <cos>:
 80040a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040a2:	ec53 2b10 	vmov	r2, r3, d0
 80040a6:	4826      	ldr	r0, [pc, #152]	@ (8004140 <cos+0xa0>)
 80040a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80040ac:	4281      	cmp	r1, r0
 80040ae:	d806      	bhi.n	80040be <cos+0x1e>
 80040b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004138 <cos+0x98>
 80040b4:	b005      	add	sp, #20
 80040b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80040ba:	f000 b899 	b.w	80041f0 <__kernel_cos>
 80040be:	4821      	ldr	r0, [pc, #132]	@ (8004144 <cos+0xa4>)
 80040c0:	4281      	cmp	r1, r0
 80040c2:	d908      	bls.n	80040d6 <cos+0x36>
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	f7fc f8de 	bl	8000288 <__aeabi_dsub>
 80040cc:	ec41 0b10 	vmov	d0, r0, r1
 80040d0:	b005      	add	sp, #20
 80040d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d6:	4668      	mov	r0, sp
 80040d8:	f000 fa0e 	bl	80044f8 <__ieee754_rem_pio2>
 80040dc:	f000 0003 	and.w	r0, r0, #3
 80040e0:	2801      	cmp	r0, #1
 80040e2:	d00b      	beq.n	80040fc <cos+0x5c>
 80040e4:	2802      	cmp	r0, #2
 80040e6:	d015      	beq.n	8004114 <cos+0x74>
 80040e8:	b9d8      	cbnz	r0, 8004122 <cos+0x82>
 80040ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040ee:	ed9d 0b00 	vldr	d0, [sp]
 80040f2:	f000 f87d 	bl	80041f0 <__kernel_cos>
 80040f6:	ec51 0b10 	vmov	r0, r1, d0
 80040fa:	e7e7      	b.n	80040cc <cos+0x2c>
 80040fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004100:	ed9d 0b00 	vldr	d0, [sp]
 8004104:	f000 f93c 	bl	8004380 <__kernel_sin>
 8004108:	ec53 2b10 	vmov	r2, r3, d0
 800410c:	4610      	mov	r0, r2
 800410e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004112:	e7db      	b.n	80040cc <cos+0x2c>
 8004114:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004118:	ed9d 0b00 	vldr	d0, [sp]
 800411c:	f000 f868 	bl	80041f0 <__kernel_cos>
 8004120:	e7f2      	b.n	8004108 <cos+0x68>
 8004122:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004126:	ed9d 0b00 	vldr	d0, [sp]
 800412a:	2001      	movs	r0, #1
 800412c:	f000 f928 	bl	8004380 <__kernel_sin>
 8004130:	e7e1      	b.n	80040f6 <cos+0x56>
 8004132:	bf00      	nop
 8004134:	f3af 8000 	nop.w
	...
 8004140:	3fe921fb 	.word	0x3fe921fb
 8004144:	7fefffff 	.word	0x7fefffff

08004148 <sin>:
 8004148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800414a:	ec53 2b10 	vmov	r2, r3, d0
 800414e:	4826      	ldr	r0, [pc, #152]	@ (80041e8 <sin+0xa0>)
 8004150:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004154:	4281      	cmp	r1, r0
 8004156:	d807      	bhi.n	8004168 <sin+0x20>
 8004158:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80041e0 <sin+0x98>
 800415c:	2000      	movs	r0, #0
 800415e:	b005      	add	sp, #20
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	f000 b90c 	b.w	8004380 <__kernel_sin>
 8004168:	4820      	ldr	r0, [pc, #128]	@ (80041ec <sin+0xa4>)
 800416a:	4281      	cmp	r1, r0
 800416c:	d908      	bls.n	8004180 <sin+0x38>
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc f889 	bl	8000288 <__aeabi_dsub>
 8004176:	ec41 0b10 	vmov	d0, r0, r1
 800417a:	b005      	add	sp, #20
 800417c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004180:	4668      	mov	r0, sp
 8004182:	f000 f9b9 	bl	80044f8 <__ieee754_rem_pio2>
 8004186:	f000 0003 	and.w	r0, r0, #3
 800418a:	2801      	cmp	r0, #1
 800418c:	d00c      	beq.n	80041a8 <sin+0x60>
 800418e:	2802      	cmp	r0, #2
 8004190:	d011      	beq.n	80041b6 <sin+0x6e>
 8004192:	b9e8      	cbnz	r0, 80041d0 <sin+0x88>
 8004194:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004198:	ed9d 0b00 	vldr	d0, [sp]
 800419c:	2001      	movs	r0, #1
 800419e:	f000 f8ef 	bl	8004380 <__kernel_sin>
 80041a2:	ec51 0b10 	vmov	r0, r1, d0
 80041a6:	e7e6      	b.n	8004176 <sin+0x2e>
 80041a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041ac:	ed9d 0b00 	vldr	d0, [sp]
 80041b0:	f000 f81e 	bl	80041f0 <__kernel_cos>
 80041b4:	e7f5      	b.n	80041a2 <sin+0x5a>
 80041b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041ba:	ed9d 0b00 	vldr	d0, [sp]
 80041be:	2001      	movs	r0, #1
 80041c0:	f000 f8de 	bl	8004380 <__kernel_sin>
 80041c4:	ec53 2b10 	vmov	r2, r3, d0
 80041c8:	4610      	mov	r0, r2
 80041ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80041ce:	e7d2      	b.n	8004176 <sin+0x2e>
 80041d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041d4:	ed9d 0b00 	vldr	d0, [sp]
 80041d8:	f000 f80a 	bl	80041f0 <__kernel_cos>
 80041dc:	e7f2      	b.n	80041c4 <sin+0x7c>
 80041de:	bf00      	nop
	...
 80041e8:	3fe921fb 	.word	0x3fe921fb
 80041ec:	7fefffff 	.word	0x7fefffff

080041f0 <__kernel_cos>:
 80041f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	ec57 6b10 	vmov	r6, r7, d0
 80041f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80041fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004200:	ed8d 1b00 	vstr	d1, [sp]
 8004204:	d206      	bcs.n	8004214 <__kernel_cos+0x24>
 8004206:	4630      	mov	r0, r6
 8004208:	4639      	mov	r1, r7
 800420a:	f7fc fc8f 	bl	8000b2c <__aeabi_d2iz>
 800420e:	2800      	cmp	r0, #0
 8004210:	f000 8088 	beq.w	8004324 <__kernel_cos+0x134>
 8004214:	4632      	mov	r2, r6
 8004216:	463b      	mov	r3, r7
 8004218:	4630      	mov	r0, r6
 800421a:	4639      	mov	r1, r7
 800421c:	f7fc f9ec 	bl	80005f8 <__aeabi_dmul>
 8004220:	4b51      	ldr	r3, [pc, #324]	@ (8004368 <__kernel_cos+0x178>)
 8004222:	2200      	movs	r2, #0
 8004224:	4604      	mov	r4, r0
 8004226:	460d      	mov	r5, r1
 8004228:	f7fc f9e6 	bl	80005f8 <__aeabi_dmul>
 800422c:	a340      	add	r3, pc, #256	@ (adr r3, 8004330 <__kernel_cos+0x140>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	4682      	mov	sl, r0
 8004234:	468b      	mov	fp, r1
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f9dd 	bl	80005f8 <__aeabi_dmul>
 800423e:	a33e      	add	r3, pc, #248	@ (adr r3, 8004338 <__kernel_cos+0x148>)
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f7fc f822 	bl	800028c <__adddf3>
 8004248:	4622      	mov	r2, r4
 800424a:	462b      	mov	r3, r5
 800424c:	f7fc f9d4 	bl	80005f8 <__aeabi_dmul>
 8004250:	a33b      	add	r3, pc, #236	@ (adr r3, 8004340 <__kernel_cos+0x150>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f7fc f817 	bl	8000288 <__aeabi_dsub>
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	f7fc f9cb 	bl	80005f8 <__aeabi_dmul>
 8004262:	a339      	add	r3, pc, #228	@ (adr r3, 8004348 <__kernel_cos+0x158>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fc f810 	bl	800028c <__adddf3>
 800426c:	4622      	mov	r2, r4
 800426e:	462b      	mov	r3, r5
 8004270:	f7fc f9c2 	bl	80005f8 <__aeabi_dmul>
 8004274:	a336      	add	r3, pc, #216	@ (adr r3, 8004350 <__kernel_cos+0x160>)
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f7fc f805 	bl	8000288 <__aeabi_dsub>
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	f7fc f9b9 	bl	80005f8 <__aeabi_dmul>
 8004286:	a334      	add	r3, pc, #208	@ (adr r3, 8004358 <__kernel_cos+0x168>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f7fb fffe 	bl	800028c <__adddf3>
 8004290:	4622      	mov	r2, r4
 8004292:	462b      	mov	r3, r5
 8004294:	f7fc f9b0 	bl	80005f8 <__aeabi_dmul>
 8004298:	4622      	mov	r2, r4
 800429a:	462b      	mov	r3, r5
 800429c:	f7fc f9ac 	bl	80005f8 <__aeabi_dmul>
 80042a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042a4:	4604      	mov	r4, r0
 80042a6:	460d      	mov	r5, r1
 80042a8:	4630      	mov	r0, r6
 80042aa:	4639      	mov	r1, r7
 80042ac:	f7fc f9a4 	bl	80005f8 <__aeabi_dmul>
 80042b0:	460b      	mov	r3, r1
 80042b2:	4602      	mov	r2, r0
 80042b4:	4629      	mov	r1, r5
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7fb ffe6 	bl	8000288 <__aeabi_dsub>
 80042bc:	4b2b      	ldr	r3, [pc, #172]	@ (800436c <__kernel_cos+0x17c>)
 80042be:	4598      	cmp	r8, r3
 80042c0:	4606      	mov	r6, r0
 80042c2:	460f      	mov	r7, r1
 80042c4:	d810      	bhi.n	80042e8 <__kernel_cos+0xf8>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4650      	mov	r0, sl
 80042cc:	4659      	mov	r1, fp
 80042ce:	f7fb ffdb 	bl	8000288 <__aeabi_dsub>
 80042d2:	460b      	mov	r3, r1
 80042d4:	4926      	ldr	r1, [pc, #152]	@ (8004370 <__kernel_cos+0x180>)
 80042d6:	4602      	mov	r2, r0
 80042d8:	2000      	movs	r0, #0
 80042da:	f7fb ffd5 	bl	8000288 <__aeabi_dsub>
 80042de:	ec41 0b10 	vmov	d0, r0, r1
 80042e2:	b003      	add	sp, #12
 80042e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e8:	4b22      	ldr	r3, [pc, #136]	@ (8004374 <__kernel_cos+0x184>)
 80042ea:	4921      	ldr	r1, [pc, #132]	@ (8004370 <__kernel_cos+0x180>)
 80042ec:	4598      	cmp	r8, r3
 80042ee:	bf8c      	ite	hi
 80042f0:	4d21      	ldrhi	r5, [pc, #132]	@ (8004378 <__kernel_cos+0x188>)
 80042f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80042f6:	2400      	movs	r4, #0
 80042f8:	4622      	mov	r2, r4
 80042fa:	462b      	mov	r3, r5
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7fb ffc3 	bl	8000288 <__aeabi_dsub>
 8004302:	4622      	mov	r2, r4
 8004304:	4680      	mov	r8, r0
 8004306:	4689      	mov	r9, r1
 8004308:	462b      	mov	r3, r5
 800430a:	4650      	mov	r0, sl
 800430c:	4659      	mov	r1, fp
 800430e:	f7fb ffbb 	bl	8000288 <__aeabi_dsub>
 8004312:	4632      	mov	r2, r6
 8004314:	463b      	mov	r3, r7
 8004316:	f7fb ffb7 	bl	8000288 <__aeabi_dsub>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4640      	mov	r0, r8
 8004320:	4649      	mov	r1, r9
 8004322:	e7da      	b.n	80042da <__kernel_cos+0xea>
 8004324:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004360 <__kernel_cos+0x170>
 8004328:	e7db      	b.n	80042e2 <__kernel_cos+0xf2>
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w
 8004330:	be8838d4 	.word	0xbe8838d4
 8004334:	bda8fae9 	.word	0xbda8fae9
 8004338:	bdb4b1c4 	.word	0xbdb4b1c4
 800433c:	3e21ee9e 	.word	0x3e21ee9e
 8004340:	809c52ad 	.word	0x809c52ad
 8004344:	3e927e4f 	.word	0x3e927e4f
 8004348:	19cb1590 	.word	0x19cb1590
 800434c:	3efa01a0 	.word	0x3efa01a0
 8004350:	16c15177 	.word	0x16c15177
 8004354:	3f56c16c 	.word	0x3f56c16c
 8004358:	5555554c 	.word	0x5555554c
 800435c:	3fa55555 	.word	0x3fa55555
 8004360:	00000000 	.word	0x00000000
 8004364:	3ff00000 	.word	0x3ff00000
 8004368:	3fe00000 	.word	0x3fe00000
 800436c:	3fd33332 	.word	0x3fd33332
 8004370:	3ff00000 	.word	0x3ff00000
 8004374:	3fe90000 	.word	0x3fe90000
 8004378:	3fd20000 	.word	0x3fd20000
 800437c:	00000000 	.word	0x00000000

08004380 <__kernel_sin>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	ec55 4b10 	vmov	r4, r5, d0
 8004388:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800438c:	b085      	sub	sp, #20
 800438e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004392:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004396:	4680      	mov	r8, r0
 8004398:	d205      	bcs.n	80043a6 <__kernel_sin+0x26>
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fc fbc5 	bl	8000b2c <__aeabi_d2iz>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d052      	beq.n	800444c <__kernel_sin+0xcc>
 80043a6:	4622      	mov	r2, r4
 80043a8:	462b      	mov	r3, r5
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fc f923 	bl	80005f8 <__aeabi_dmul>
 80043b2:	4682      	mov	sl, r0
 80043b4:	468b      	mov	fp, r1
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4620      	mov	r0, r4
 80043bc:	4629      	mov	r1, r5
 80043be:	f7fc f91b 	bl	80005f8 <__aeabi_dmul>
 80043c2:	a342      	add	r3, pc, #264	@ (adr r3, 80044cc <__kernel_sin+0x14c>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	e9cd 0100 	strd	r0, r1, [sp]
 80043cc:	4650      	mov	r0, sl
 80043ce:	4659      	mov	r1, fp
 80043d0:	f7fc f912 	bl	80005f8 <__aeabi_dmul>
 80043d4:	a33f      	add	r3, pc, #252	@ (adr r3, 80044d4 <__kernel_sin+0x154>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fb ff55 	bl	8000288 <__aeabi_dsub>
 80043de:	4652      	mov	r2, sl
 80043e0:	465b      	mov	r3, fp
 80043e2:	f7fc f909 	bl	80005f8 <__aeabi_dmul>
 80043e6:	a33d      	add	r3, pc, #244	@ (adr r3, 80044dc <__kernel_sin+0x15c>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fb ff4e 	bl	800028c <__adddf3>
 80043f0:	4652      	mov	r2, sl
 80043f2:	465b      	mov	r3, fp
 80043f4:	f7fc f900 	bl	80005f8 <__aeabi_dmul>
 80043f8:	a33a      	add	r3, pc, #232	@ (adr r3, 80044e4 <__kernel_sin+0x164>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fb ff43 	bl	8000288 <__aeabi_dsub>
 8004402:	4652      	mov	r2, sl
 8004404:	465b      	mov	r3, fp
 8004406:	f7fc f8f7 	bl	80005f8 <__aeabi_dmul>
 800440a:	a338      	add	r3, pc, #224	@ (adr r3, 80044ec <__kernel_sin+0x16c>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fb ff3c 	bl	800028c <__adddf3>
 8004414:	4606      	mov	r6, r0
 8004416:	460f      	mov	r7, r1
 8004418:	f1b8 0f00 	cmp.w	r8, #0
 800441c:	d11b      	bne.n	8004456 <__kernel_sin+0xd6>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4650      	mov	r0, sl
 8004424:	4659      	mov	r1, fp
 8004426:	f7fc f8e7 	bl	80005f8 <__aeabi_dmul>
 800442a:	a325      	add	r3, pc, #148	@ (adr r3, 80044c0 <__kernel_sin+0x140>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f7fb ff2a 	bl	8000288 <__aeabi_dsub>
 8004434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004438:	f7fc f8de 	bl	80005f8 <__aeabi_dmul>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4620      	mov	r0, r4
 8004442:	4629      	mov	r1, r5
 8004444:	f7fb ff22 	bl	800028c <__adddf3>
 8004448:	4604      	mov	r4, r0
 800444a:	460d      	mov	r5, r1
 800444c:	ec45 4b10 	vmov	d0, r4, r5
 8004450:	b005      	add	sp, #20
 8004452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <__kernel_sin+0x148>)
 800445c:	2200      	movs	r2, #0
 800445e:	f7fc f8cb 	bl	80005f8 <__aeabi_dmul>
 8004462:	4632      	mov	r2, r6
 8004464:	4680      	mov	r8, r0
 8004466:	4689      	mov	r9, r1
 8004468:	463b      	mov	r3, r7
 800446a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800446e:	f7fc f8c3 	bl	80005f8 <__aeabi_dmul>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4640      	mov	r0, r8
 8004478:	4649      	mov	r1, r9
 800447a:	f7fb ff05 	bl	8000288 <__aeabi_dsub>
 800447e:	4652      	mov	r2, sl
 8004480:	465b      	mov	r3, fp
 8004482:	f7fc f8b9 	bl	80005f8 <__aeabi_dmul>
 8004486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800448a:	f7fb fefd 	bl	8000288 <__aeabi_dsub>
 800448e:	a30c      	add	r3, pc, #48	@ (adr r3, 80044c0 <__kernel_sin+0x140>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	4606      	mov	r6, r0
 8004496:	460f      	mov	r7, r1
 8004498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800449c:	f7fc f8ac 	bl	80005f8 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4630      	mov	r0, r6
 80044a6:	4639      	mov	r1, r7
 80044a8:	f7fb fef0 	bl	800028c <__adddf3>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4620      	mov	r0, r4
 80044b2:	4629      	mov	r1, r5
 80044b4:	f7fb fee8 	bl	8000288 <__aeabi_dsub>
 80044b8:	e7c6      	b.n	8004448 <__kernel_sin+0xc8>
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w
 80044c0:	55555549 	.word	0x55555549
 80044c4:	3fc55555 	.word	0x3fc55555
 80044c8:	3fe00000 	.word	0x3fe00000
 80044cc:	5acfd57c 	.word	0x5acfd57c
 80044d0:	3de5d93a 	.word	0x3de5d93a
 80044d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80044d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80044dc:	57b1fe7d 	.word	0x57b1fe7d
 80044e0:	3ec71de3 	.word	0x3ec71de3
 80044e4:	19c161d5 	.word	0x19c161d5
 80044e8:	3f2a01a0 	.word	0x3f2a01a0
 80044ec:	1110f8a6 	.word	0x1110f8a6
 80044f0:	3f811111 	.word	0x3f811111
 80044f4:	00000000 	.word	0x00000000

080044f8 <__ieee754_rem_pio2>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	ec57 6b10 	vmov	r6, r7, d0
 8004500:	4bc5      	ldr	r3, [pc, #788]	@ (8004818 <__ieee754_rem_pio2+0x320>)
 8004502:	b08d      	sub	sp, #52	@ 0x34
 8004504:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004508:	4598      	cmp	r8, r3
 800450a:	4604      	mov	r4, r0
 800450c:	9704      	str	r7, [sp, #16]
 800450e:	d807      	bhi.n	8004520 <__ieee754_rem_pio2+0x28>
 8004510:	2200      	movs	r2, #0
 8004512:	2300      	movs	r3, #0
 8004514:	ed80 0b00 	vstr	d0, [r0]
 8004518:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800451c:	2500      	movs	r5, #0
 800451e:	e028      	b.n	8004572 <__ieee754_rem_pio2+0x7a>
 8004520:	4bbe      	ldr	r3, [pc, #760]	@ (800481c <__ieee754_rem_pio2+0x324>)
 8004522:	4598      	cmp	r8, r3
 8004524:	d878      	bhi.n	8004618 <__ieee754_rem_pio2+0x120>
 8004526:	9b04      	ldr	r3, [sp, #16]
 8004528:	4dbd      	ldr	r5, [pc, #756]	@ (8004820 <__ieee754_rem_pio2+0x328>)
 800452a:	2b00      	cmp	r3, #0
 800452c:	4630      	mov	r0, r6
 800452e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2e8>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	4639      	mov	r1, r7
 8004536:	dd38      	ble.n	80045aa <__ieee754_rem_pio2+0xb2>
 8004538:	f7fb fea6 	bl	8000288 <__aeabi_dsub>
 800453c:	45a8      	cmp	r8, r5
 800453e:	4606      	mov	r6, r0
 8004540:	460f      	mov	r7, r1
 8004542:	d01a      	beq.n	800457a <__ieee754_rem_pio2+0x82>
 8004544:	a3a8      	add	r3, pc, #672	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f0>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fb fe9d 	bl	8000288 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4680      	mov	r8, r0
 8004554:	4689      	mov	r9, r1
 8004556:	4630      	mov	r0, r6
 8004558:	4639      	mov	r1, r7
 800455a:	f7fb fe95 	bl	8000288 <__aeabi_dsub>
 800455e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f0>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fb fe90 	bl	8000288 <__aeabi_dsub>
 8004568:	e9c4 8900 	strd	r8, r9, [r4]
 800456c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004570:	2501      	movs	r5, #1
 8004572:	4628      	mov	r0, r5
 8004574:	b00d      	add	sp, #52	@ 0x34
 8004576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457a:	a39d      	add	r3, pc, #628	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x2f8>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f7fb fe82 	bl	8000288 <__aeabi_dsub>
 8004584:	a39c      	add	r3, pc, #624	@ (adr r3, 80047f8 <__ieee754_rem_pio2+0x300>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	4606      	mov	r6, r0
 800458c:	460f      	mov	r7, r1
 800458e:	f7fb fe7b 	bl	8000288 <__aeabi_dsub>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4680      	mov	r8, r0
 8004598:	4689      	mov	r9, r1
 800459a:	4630      	mov	r0, r6
 800459c:	4639      	mov	r1, r7
 800459e:	f7fb fe73 	bl	8000288 <__aeabi_dsub>
 80045a2:	a395      	add	r3, pc, #596	@ (adr r3, 80047f8 <__ieee754_rem_pio2+0x300>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	e7dc      	b.n	8004564 <__ieee754_rem_pio2+0x6c>
 80045aa:	f7fb fe6f 	bl	800028c <__adddf3>
 80045ae:	45a8      	cmp	r8, r5
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	d018      	beq.n	80045e8 <__ieee754_rem_pio2+0xf0>
 80045b6:	a38c      	add	r3, pc, #560	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f0>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f7fb fe66 	bl	800028c <__adddf3>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4680      	mov	r8, r0
 80045c6:	4689      	mov	r9, r1
 80045c8:	4630      	mov	r0, r6
 80045ca:	4639      	mov	r1, r7
 80045cc:	f7fb fe5c 	bl	8000288 <__aeabi_dsub>
 80045d0:	a385      	add	r3, pc, #532	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f0>)
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f7fb fe59 	bl	800028c <__adddf3>
 80045da:	f04f 35ff 	mov.w	r5, #4294967295
 80045de:	e9c4 8900 	strd	r8, r9, [r4]
 80045e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045e6:	e7c4      	b.n	8004572 <__ieee754_rem_pio2+0x7a>
 80045e8:	a381      	add	r3, pc, #516	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x2f8>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fb fe4d 	bl	800028c <__adddf3>
 80045f2:	a381      	add	r3, pc, #516	@ (adr r3, 80047f8 <__ieee754_rem_pio2+0x300>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	4606      	mov	r6, r0
 80045fa:	460f      	mov	r7, r1
 80045fc:	f7fb fe46 	bl	800028c <__adddf3>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4680      	mov	r8, r0
 8004606:	4689      	mov	r9, r1
 8004608:	4630      	mov	r0, r6
 800460a:	4639      	mov	r1, r7
 800460c:	f7fb fe3c 	bl	8000288 <__aeabi_dsub>
 8004610:	a379      	add	r3, pc, #484	@ (adr r3, 80047f8 <__ieee754_rem_pio2+0x300>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	e7de      	b.n	80045d6 <__ieee754_rem_pio2+0xde>
 8004618:	4b82      	ldr	r3, [pc, #520]	@ (8004824 <__ieee754_rem_pio2+0x32c>)
 800461a:	4598      	cmp	r8, r3
 800461c:	f200 80d1 	bhi.w	80047c2 <__ieee754_rem_pio2+0x2ca>
 8004620:	f000 f966 	bl	80048f0 <fabs>
 8004624:	ec57 6b10 	vmov	r6, r7, d0
 8004628:	a375      	add	r3, pc, #468	@ (adr r3, 8004800 <__ieee754_rem_pio2+0x308>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f7fb ffe1 	bl	80005f8 <__aeabi_dmul>
 8004636:	4b7c      	ldr	r3, [pc, #496]	@ (8004828 <__ieee754_rem_pio2+0x330>)
 8004638:	2200      	movs	r2, #0
 800463a:	f7fb fe27 	bl	800028c <__adddf3>
 800463e:	f7fc fa75 	bl	8000b2c <__aeabi_d2iz>
 8004642:	4605      	mov	r5, r0
 8004644:	f7fb ff6e 	bl	8000524 <__aeabi_i2d>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004650:	a363      	add	r3, pc, #396	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2e8>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb ffcf 	bl	80005f8 <__aeabi_dmul>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4630      	mov	r0, r6
 8004660:	4639      	mov	r1, r7
 8004662:	f7fb fe11 	bl	8000288 <__aeabi_dsub>
 8004666:	a360      	add	r3, pc, #384	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f0>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	4682      	mov	sl, r0
 800466e:	468b      	mov	fp, r1
 8004670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004674:	f7fb ffc0 	bl	80005f8 <__aeabi_dmul>
 8004678:	2d1f      	cmp	r5, #31
 800467a:	4606      	mov	r6, r0
 800467c:	460f      	mov	r7, r1
 800467e:	dc0c      	bgt.n	800469a <__ieee754_rem_pio2+0x1a2>
 8004680:	4b6a      	ldr	r3, [pc, #424]	@ (800482c <__ieee754_rem_pio2+0x334>)
 8004682:	1e6a      	subs	r2, r5, #1
 8004684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004688:	4543      	cmp	r3, r8
 800468a:	d006      	beq.n	800469a <__ieee754_rem_pio2+0x1a2>
 800468c:	4632      	mov	r2, r6
 800468e:	463b      	mov	r3, r7
 8004690:	4650      	mov	r0, sl
 8004692:	4659      	mov	r1, fp
 8004694:	f7fb fdf8 	bl	8000288 <__aeabi_dsub>
 8004698:	e00e      	b.n	80046b8 <__ieee754_rem_pio2+0x1c0>
 800469a:	463b      	mov	r3, r7
 800469c:	4632      	mov	r2, r6
 800469e:	4650      	mov	r0, sl
 80046a0:	4659      	mov	r1, fp
 80046a2:	f7fb fdf1 	bl	8000288 <__aeabi_dsub>
 80046a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	dc02      	bgt.n	80046be <__ieee754_rem_pio2+0x1c6>
 80046b8:	e9c4 0100 	strd	r0, r1, [r4]
 80046bc:	e039      	b.n	8004732 <__ieee754_rem_pio2+0x23a>
 80046be:	a34c      	add	r3, pc, #304	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x2f8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c8:	f7fb ff96 	bl	80005f8 <__aeabi_dmul>
 80046cc:	4606      	mov	r6, r0
 80046ce:	460f      	mov	r7, r1
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4650      	mov	r0, sl
 80046d6:	4659      	mov	r1, fp
 80046d8:	f7fb fdd6 	bl	8000288 <__aeabi_dsub>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4680      	mov	r8, r0
 80046e2:	4689      	mov	r9, r1
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fb fdce 	bl	8000288 <__aeabi_dsub>
 80046ec:	4632      	mov	r2, r6
 80046ee:	463b      	mov	r3, r7
 80046f0:	f7fb fdca 	bl	8000288 <__aeabi_dsub>
 80046f4:	a340      	add	r3, pc, #256	@ (adr r3, 80047f8 <__ieee754_rem_pio2+0x300>)
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	4606      	mov	r6, r0
 80046fc:	460f      	mov	r7, r1
 80046fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004702:	f7fb ff79 	bl	80005f8 <__aeabi_dmul>
 8004706:	4632      	mov	r2, r6
 8004708:	463b      	mov	r3, r7
 800470a:	f7fb fdbd 	bl	8000288 <__aeabi_dsub>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4606      	mov	r6, r0
 8004714:	460f      	mov	r7, r1
 8004716:	4640      	mov	r0, r8
 8004718:	4649      	mov	r1, r9
 800471a:	f7fb fdb5 	bl	8000288 <__aeabi_dsub>
 800471e:	9a05      	ldr	r2, [sp, #20]
 8004720:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b31      	cmp	r3, #49	@ 0x31
 8004728:	dc20      	bgt.n	800476c <__ieee754_rem_pio2+0x274>
 800472a:	e9c4 0100 	strd	r0, r1, [r4]
 800472e:	46c2      	mov	sl, r8
 8004730:	46cb      	mov	fp, r9
 8004732:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004736:	4650      	mov	r0, sl
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	4659      	mov	r1, fp
 800473e:	f7fb fda3 	bl	8000288 <__aeabi_dsub>
 8004742:	463b      	mov	r3, r7
 8004744:	4632      	mov	r2, r6
 8004746:	f7fb fd9f 	bl	8000288 <__aeabi_dsub>
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004752:	f6bf af0e 	bge.w	8004572 <__ieee754_rem_pio2+0x7a>
 8004756:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004760:	f8c4 8000 	str.w	r8, [r4]
 8004764:	60a0      	str	r0, [r4, #8]
 8004766:	60e3      	str	r3, [r4, #12]
 8004768:	426d      	negs	r5, r5
 800476a:	e702      	b.n	8004572 <__ieee754_rem_pio2+0x7a>
 800476c:	a326      	add	r3, pc, #152	@ (adr r3, 8004808 <__ieee754_rem_pio2+0x310>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004776:	f7fb ff3f 	bl	80005f8 <__aeabi_dmul>
 800477a:	4606      	mov	r6, r0
 800477c:	460f      	mov	r7, r1
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4640      	mov	r0, r8
 8004784:	4649      	mov	r1, r9
 8004786:	f7fb fd7f 	bl	8000288 <__aeabi_dsub>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4682      	mov	sl, r0
 8004790:	468b      	mov	fp, r1
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb fd77 	bl	8000288 <__aeabi_dsub>
 800479a:	4632      	mov	r2, r6
 800479c:	463b      	mov	r3, r7
 800479e:	f7fb fd73 	bl	8000288 <__aeabi_dsub>
 80047a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004810 <__ieee754_rem_pio2+0x318>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	4606      	mov	r6, r0
 80047aa:	460f      	mov	r7, r1
 80047ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b0:	f7fb ff22 	bl	80005f8 <__aeabi_dmul>
 80047b4:	4632      	mov	r2, r6
 80047b6:	463b      	mov	r3, r7
 80047b8:	f7fb fd66 	bl	8000288 <__aeabi_dsub>
 80047bc:	4606      	mov	r6, r0
 80047be:	460f      	mov	r7, r1
 80047c0:	e764      	b.n	800468c <__ieee754_rem_pio2+0x194>
 80047c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <__ieee754_rem_pio2+0x338>)
 80047c4:	4598      	cmp	r8, r3
 80047c6:	d935      	bls.n	8004834 <__ieee754_rem_pio2+0x33c>
 80047c8:	4632      	mov	r2, r6
 80047ca:	463b      	mov	r3, r7
 80047cc:	4630      	mov	r0, r6
 80047ce:	4639      	mov	r1, r7
 80047d0:	f7fb fd5a 	bl	8000288 <__aeabi_dsub>
 80047d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80047d8:	e9c4 0100 	strd	r0, r1, [r4]
 80047dc:	e69e      	b.n	800451c <__ieee754_rem_pio2+0x24>
 80047de:	bf00      	nop
 80047e0:	54400000 	.word	0x54400000
 80047e4:	3ff921fb 	.word	0x3ff921fb
 80047e8:	1a626331 	.word	0x1a626331
 80047ec:	3dd0b461 	.word	0x3dd0b461
 80047f0:	1a600000 	.word	0x1a600000
 80047f4:	3dd0b461 	.word	0x3dd0b461
 80047f8:	2e037073 	.word	0x2e037073
 80047fc:	3ba3198a 	.word	0x3ba3198a
 8004800:	6dc9c883 	.word	0x6dc9c883
 8004804:	3fe45f30 	.word	0x3fe45f30
 8004808:	2e000000 	.word	0x2e000000
 800480c:	3ba3198a 	.word	0x3ba3198a
 8004810:	252049c1 	.word	0x252049c1
 8004814:	397b839a 	.word	0x397b839a
 8004818:	3fe921fb 	.word	0x3fe921fb
 800481c:	4002d97b 	.word	0x4002d97b
 8004820:	3ff921fb 	.word	0x3ff921fb
 8004824:	413921fb 	.word	0x413921fb
 8004828:	3fe00000 	.word	0x3fe00000
 800482c:	0802b49c 	.word	0x0802b49c
 8004830:	7fefffff 	.word	0x7fefffff
 8004834:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004838:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800483c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004840:	4630      	mov	r0, r6
 8004842:	460f      	mov	r7, r1
 8004844:	f7fc f972 	bl	8000b2c <__aeabi_d2iz>
 8004848:	f7fb fe6c 	bl	8000524 <__aeabi_i2d>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4630      	mov	r0, r6
 8004852:	4639      	mov	r1, r7
 8004854:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004858:	f7fb fd16 	bl	8000288 <__aeabi_dsub>
 800485c:	4b22      	ldr	r3, [pc, #136]	@ (80048e8 <__ieee754_rem_pio2+0x3f0>)
 800485e:	2200      	movs	r2, #0
 8004860:	f7fb feca 	bl	80005f8 <__aeabi_dmul>
 8004864:	460f      	mov	r7, r1
 8004866:	4606      	mov	r6, r0
 8004868:	f7fc f960 	bl	8000b2c <__aeabi_d2iz>
 800486c:	f7fb fe5a 	bl	8000524 <__aeabi_i2d>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4630      	mov	r0, r6
 8004876:	4639      	mov	r1, r7
 8004878:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800487c:	f7fb fd04 	bl	8000288 <__aeabi_dsub>
 8004880:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <__ieee754_rem_pio2+0x3f0>)
 8004882:	2200      	movs	r2, #0
 8004884:	f7fb feb8 	bl	80005f8 <__aeabi_dmul>
 8004888:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800488c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004890:	f04f 0803 	mov.w	r8, #3
 8004894:	2600      	movs	r6, #0
 8004896:	2700      	movs	r7, #0
 8004898:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800489c:	4632      	mov	r2, r6
 800489e:	463b      	mov	r3, r7
 80048a0:	46c2      	mov	sl, r8
 80048a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80048a6:	f7fc f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d1f4      	bne.n	8004898 <__ieee754_rem_pio2+0x3a0>
 80048ae:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <__ieee754_rem_pio2+0x3f4>)
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	2302      	movs	r3, #2
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	462a      	mov	r2, r5
 80048b8:	4653      	mov	r3, sl
 80048ba:	4621      	mov	r1, r4
 80048bc:	a806      	add	r0, sp, #24
 80048be:	f000 f81f 	bl	8004900 <__kernel_rem_pio2>
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	4605      	mov	r5, r0
 80048c8:	f6bf ae53 	bge.w	8004572 <__ieee754_rem_pio2+0x7a>
 80048cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80048d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048d4:	e9c4 2300 	strd	r2, r3, [r4]
 80048d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80048dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80048e4:	e740      	b.n	8004768 <__ieee754_rem_pio2+0x270>
 80048e6:	bf00      	nop
 80048e8:	41700000 	.word	0x41700000
 80048ec:	0802b51c 	.word	0x0802b51c

080048f0 <fabs>:
 80048f0:	ec51 0b10 	vmov	r0, r1, d0
 80048f4:	4602      	mov	r2, r0
 80048f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80048fa:	ec43 2b10 	vmov	d0, r2, r3
 80048fe:	4770      	bx	lr

08004900 <__kernel_rem_pio2>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	ed2d 8b02 	vpush	{d8}
 8004908:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800490c:	f112 0f14 	cmn.w	r2, #20
 8004910:	9306      	str	r3, [sp, #24]
 8004912:	9104      	str	r1, [sp, #16]
 8004914:	4bc2      	ldr	r3, [pc, #776]	@ (8004c20 <__kernel_rem_pio2+0x320>)
 8004916:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004918:	9008      	str	r0, [sp, #32]
 800491a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	9b06      	ldr	r3, [sp, #24]
 8004922:	f103 33ff 	add.w	r3, r3, #4294967295
 8004926:	bfa8      	it	ge
 8004928:	1ed4      	subge	r4, r2, #3
 800492a:	9305      	str	r3, [sp, #20]
 800492c:	bfb2      	itee	lt
 800492e:	2400      	movlt	r4, #0
 8004930:	2318      	movge	r3, #24
 8004932:	fb94 f4f3 	sdivge	r4, r4, r3
 8004936:	f06f 0317 	mvn.w	r3, #23
 800493a:	fb04 3303 	mla	r3, r4, r3, r3
 800493e:	eb03 0b02 	add.w	fp, r3, r2
 8004942:	9b00      	ldr	r3, [sp, #0]
 8004944:	9a05      	ldr	r2, [sp, #20]
 8004946:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8004c10 <__kernel_rem_pio2+0x310>
 800494a:	eb03 0802 	add.w	r8, r3, r2
 800494e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004950:	1aa7      	subs	r7, r4, r2
 8004952:	ae20      	add	r6, sp, #128	@ 0x80
 8004954:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004958:	2500      	movs	r5, #0
 800495a:	4545      	cmp	r5, r8
 800495c:	dd12      	ble.n	8004984 <__kernel_rem_pio2+0x84>
 800495e:	9b06      	ldr	r3, [sp, #24]
 8004960:	aa20      	add	r2, sp, #128	@ 0x80
 8004962:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004966:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800496a:	2700      	movs	r7, #0
 800496c:	9b00      	ldr	r3, [sp, #0]
 800496e:	429f      	cmp	r7, r3
 8004970:	dc2e      	bgt.n	80049d0 <__kernel_rem_pio2+0xd0>
 8004972:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8004c10 <__kernel_rem_pio2+0x310>
 8004976:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800497a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800497e:	46a8      	mov	r8, r5
 8004980:	2600      	movs	r6, #0
 8004982:	e01b      	b.n	80049bc <__kernel_rem_pio2+0xbc>
 8004984:	42ef      	cmn	r7, r5
 8004986:	d407      	bmi.n	8004998 <__kernel_rem_pio2+0x98>
 8004988:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800498c:	f7fb fdca 	bl	8000524 <__aeabi_i2d>
 8004990:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004994:	3501      	adds	r5, #1
 8004996:	e7e0      	b.n	800495a <__kernel_rem_pio2+0x5a>
 8004998:	ec51 0b18 	vmov	r0, r1, d8
 800499c:	e7f8      	b.n	8004990 <__kernel_rem_pio2+0x90>
 800499e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80049a2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80049a6:	f7fb fe27 	bl	80005f8 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b2:	f7fb fc6b 	bl	800028c <__adddf3>
 80049b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ba:	3601      	adds	r6, #1
 80049bc:	9b05      	ldr	r3, [sp, #20]
 80049be:	429e      	cmp	r6, r3
 80049c0:	dded      	ble.n	800499e <__kernel_rem_pio2+0x9e>
 80049c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049c6:	3701      	adds	r7, #1
 80049c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80049cc:	3508      	adds	r5, #8
 80049ce:	e7cd      	b.n	800496c <__kernel_rem_pio2+0x6c>
 80049d0:	9b00      	ldr	r3, [sp, #0]
 80049d2:	f8dd 8000 	ldr.w	r8, [sp]
 80049d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80049d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80049dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80049de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80049e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80049ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049ec:	ab98      	add	r3, sp, #608	@ 0x260
 80049ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80049f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80049f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80049fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80049fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80049fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004a02:	46a1      	mov	r9, r4
 8004a04:	46c2      	mov	sl, r8
 8004a06:	f1ba 0f00 	cmp.w	sl, #0
 8004a0a:	dc77      	bgt.n	8004afc <__kernel_rem_pio2+0x1fc>
 8004a0c:	4658      	mov	r0, fp
 8004a0e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004a12:	f000 fac5 	bl	8004fa0 <scalbn>
 8004a16:	ec57 6b10 	vmov	r6, r7, d0
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004a20:	4630      	mov	r0, r6
 8004a22:	4639      	mov	r1, r7
 8004a24:	f7fb fde8 	bl	80005f8 <__aeabi_dmul>
 8004a28:	ec41 0b10 	vmov	d0, r0, r1
 8004a2c:	f000 fb34 	bl	8005098 <floor>
 8004a30:	4b7c      	ldr	r3, [pc, #496]	@ (8004c24 <__kernel_rem_pio2+0x324>)
 8004a32:	ec51 0b10 	vmov	r0, r1, d0
 8004a36:	2200      	movs	r2, #0
 8004a38:	f7fb fdde 	bl	80005f8 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4630      	mov	r0, r6
 8004a42:	4639      	mov	r1, r7
 8004a44:	f7fb fc20 	bl	8000288 <__aeabi_dsub>
 8004a48:	460f      	mov	r7, r1
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	f7fc f86e 	bl	8000b2c <__aeabi_d2iz>
 8004a50:	9002      	str	r0, [sp, #8]
 8004a52:	f7fb fd67 	bl	8000524 <__aeabi_i2d>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	f7fb fc13 	bl	8000288 <__aeabi_dsub>
 8004a62:	f1bb 0f00 	cmp.w	fp, #0
 8004a66:	4606      	mov	r6, r0
 8004a68:	460f      	mov	r7, r1
 8004a6a:	dd6c      	ble.n	8004b46 <__kernel_rem_pio2+0x246>
 8004a6c:	f108 31ff 	add.w	r1, r8, #4294967295
 8004a70:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a72:	9d02      	ldr	r5, [sp, #8]
 8004a74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a78:	f1cb 0018 	rsb	r0, fp, #24
 8004a7c:	fa43 f200 	asr.w	r2, r3, r0
 8004a80:	4415      	add	r5, r2
 8004a82:	4082      	lsls	r2, r0
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	aa0c      	add	r2, sp, #48	@ 0x30
 8004a88:	9502      	str	r5, [sp, #8]
 8004a8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004a8e:	f1cb 0217 	rsb	r2, fp, #23
 8004a92:	fa43 f902 	asr.w	r9, r3, r2
 8004a96:	f1b9 0f00 	cmp.w	r9, #0
 8004a9a:	dd64      	ble.n	8004b66 <__kernel_rem_pio2+0x266>
 8004a9c:	9b02      	ldr	r3, [sp, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	4615      	mov	r5, r2
 8004aa6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004aaa:	4590      	cmp	r8, r2
 8004aac:	f300 80a1 	bgt.w	8004bf2 <__kernel_rem_pio2+0x2f2>
 8004ab0:	f1bb 0f00 	cmp.w	fp, #0
 8004ab4:	dd07      	ble.n	8004ac6 <__kernel_rem_pio2+0x1c6>
 8004ab6:	f1bb 0f01 	cmp.w	fp, #1
 8004aba:	f000 80c1 	beq.w	8004c40 <__kernel_rem_pio2+0x340>
 8004abe:	f1bb 0f02 	cmp.w	fp, #2
 8004ac2:	f000 80c8 	beq.w	8004c56 <__kernel_rem_pio2+0x356>
 8004ac6:	f1b9 0f02 	cmp.w	r9, #2
 8004aca:	d14c      	bne.n	8004b66 <__kernel_rem_pio2+0x266>
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	4955      	ldr	r1, [pc, #340]	@ (8004c28 <__kernel_rem_pio2+0x328>)
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f7fb fbd8 	bl	8000288 <__aeabi_dsub>
 8004ad8:	4606      	mov	r6, r0
 8004ada:	460f      	mov	r7, r1
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	d042      	beq.n	8004b66 <__kernel_rem_pio2+0x266>
 8004ae0:	4658      	mov	r0, fp
 8004ae2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004c18 <__kernel_rem_pio2+0x318>
 8004ae6:	f000 fa5b 	bl	8004fa0 <scalbn>
 8004aea:	4630      	mov	r0, r6
 8004aec:	4639      	mov	r1, r7
 8004aee:	ec53 2b10 	vmov	r2, r3, d0
 8004af2:	f7fb fbc9 	bl	8000288 <__aeabi_dsub>
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	e034      	b.n	8004b66 <__kernel_rem_pio2+0x266>
 8004afc:	4b4b      	ldr	r3, [pc, #300]	@ (8004c2c <__kernel_rem_pio2+0x32c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b04:	f7fb fd78 	bl	80005f8 <__aeabi_dmul>
 8004b08:	f7fc f810 	bl	8000b2c <__aeabi_d2iz>
 8004b0c:	f7fb fd0a 	bl	8000524 <__aeabi_i2d>
 8004b10:	4b47      	ldr	r3, [pc, #284]	@ (8004c30 <__kernel_rem_pio2+0x330>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	4606      	mov	r6, r0
 8004b16:	460f      	mov	r7, r1
 8004b18:	f7fb fd6e 	bl	80005f8 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b24:	f7fb fbb0 	bl	8000288 <__aeabi_dsub>
 8004b28:	f7fc f800 	bl	8000b2c <__aeabi_d2iz>
 8004b2c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004b30:	f849 0b04 	str.w	r0, [r9], #4
 8004b34:	4639      	mov	r1, r7
 8004b36:	4630      	mov	r0, r6
 8004b38:	f7fb fba8 	bl	800028c <__adddf3>
 8004b3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b44:	e75f      	b.n	8004a06 <__kernel_rem_pio2+0x106>
 8004b46:	d107      	bne.n	8004b58 <__kernel_rem_pio2+0x258>
 8004b48:	f108 33ff 	add.w	r3, r8, #4294967295
 8004b4c:	aa0c      	add	r2, sp, #48	@ 0x30
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004b56:	e79e      	b.n	8004a96 <__kernel_rem_pio2+0x196>
 8004b58:	4b36      	ldr	r3, [pc, #216]	@ (8004c34 <__kernel_rem_pio2+0x334>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f7fb ffd2 	bl	8000b04 <__aeabi_dcmpge>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d143      	bne.n	8004bec <__kernel_rem_pio2+0x2ec>
 8004b64:	4681      	mov	r9, r0
 8004b66:	2200      	movs	r2, #0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f000 80c1 	beq.w	8004cfa <__kernel_rem_pio2+0x3fa>
 8004b78:	f108 33ff 	add.w	r3, r8, #4294967295
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	9900      	ldr	r1, [sp, #0]
 8004b80:	428b      	cmp	r3, r1
 8004b82:	da70      	bge.n	8004c66 <__kernel_rem_pio2+0x366>
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	f000 808b 	beq.w	8004ca0 <__kernel_rem_pio2+0x3a0>
 8004b8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b8e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b90:	f1ab 0b18 	sub.w	fp, fp, #24
 8004b94:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f6      	beq.n	8004b8a <__kernel_rem_pio2+0x28a>
 8004b9c:	4658      	mov	r0, fp
 8004b9e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8004c18 <__kernel_rem_pio2+0x318>
 8004ba2:	f000 f9fd 	bl	8004fa0 <scalbn>
 8004ba6:	f108 0301 	add.w	r3, r8, #1
 8004baa:	00da      	lsls	r2, r3, #3
 8004bac:	9205      	str	r2, [sp, #20]
 8004bae:	ec55 4b10 	vmov	r4, r5, d0
 8004bb2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004bb4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004c2c <__kernel_rem_pio2+0x32c>
 8004bb8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004bbc:	4646      	mov	r6, r8
 8004bbe:	f04f 0a00 	mov.w	sl, #0
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	f280 80d1 	bge.w	8004d6a <__kernel_rem_pio2+0x46a>
 8004bc8:	4644      	mov	r4, r8
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	f2c0 80ff 	blt.w	8004dce <__kernel_rem_pio2+0x4ce>
 8004bd0:	4b19      	ldr	r3, [pc, #100]	@ (8004c38 <__kernel_rem_pio2+0x338>)
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004bd6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bda:	9306      	str	r3, [sp, #24]
 8004bdc:	f04f 0a00 	mov.w	sl, #0
 8004be0:	f04f 0b00 	mov.w	fp, #0
 8004be4:	2600      	movs	r6, #0
 8004be6:	eba8 0504 	sub.w	r5, r8, r4
 8004bea:	e0e4      	b.n	8004db6 <__kernel_rem_pio2+0x4b6>
 8004bec:	f04f 0902 	mov.w	r9, #2
 8004bf0:	e754      	b.n	8004a9c <__kernel_rem_pio2+0x19c>
 8004bf2:	f854 3b04 	ldr.w	r3, [r4], #4
 8004bf6:	bb0d      	cbnz	r5, 8004c3c <__kernel_rem_pio2+0x33c>
 8004bf8:	b123      	cbz	r3, 8004c04 <__kernel_rem_pio2+0x304>
 8004bfa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004bfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c02:	2301      	movs	r3, #1
 8004c04:	3201      	adds	r2, #1
 8004c06:	461d      	mov	r5, r3
 8004c08:	e74f      	b.n	8004aaa <__kernel_rem_pio2+0x1aa>
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w
	...
 8004c1c:	3ff00000 	.word	0x3ff00000
 8004c20:	0802b668 	.word	0x0802b668
 8004c24:	40200000 	.word	0x40200000
 8004c28:	3ff00000 	.word	0x3ff00000
 8004c2c:	3e700000 	.word	0x3e700000
 8004c30:	41700000 	.word	0x41700000
 8004c34:	3fe00000 	.word	0x3fe00000
 8004c38:	0802b628 	.word	0x0802b628
 8004c3c:	1acb      	subs	r3, r1, r3
 8004c3e:	e7de      	b.n	8004bfe <__kernel_rem_pio2+0x2fe>
 8004c40:	f108 32ff 	add.w	r2, r8, #4294967295
 8004c44:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004c4e:	a90c      	add	r1, sp, #48	@ 0x30
 8004c50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004c54:	e737      	b.n	8004ac6 <__kernel_rem_pio2+0x1c6>
 8004c56:	f108 32ff 	add.w	r2, r8, #4294967295
 8004c5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c64:	e7f3      	b.n	8004c4e <__kernel_rem_pio2+0x34e>
 8004c66:	a90c      	add	r1, sp, #48	@ 0x30
 8004c68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	e785      	b.n	8004b7e <__kernel_rem_pio2+0x27e>
 8004c72:	3401      	adds	r4, #1
 8004c74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d0fa      	beq.n	8004c72 <__kernel_rem_pio2+0x372>
 8004c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c82:	eb0d 0503 	add.w	r5, sp, r3
 8004c86:	9b06      	ldr	r3, [sp, #24]
 8004c88:	aa20      	add	r2, sp, #128	@ 0x80
 8004c8a:	4443      	add	r3, r8
 8004c8c:	f108 0701 	add.w	r7, r8, #1
 8004c90:	3d98      	subs	r5, #152	@ 0x98
 8004c92:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004c96:	4444      	add	r4, r8
 8004c98:	42bc      	cmp	r4, r7
 8004c9a:	da04      	bge.n	8004ca6 <__kernel_rem_pio2+0x3a6>
 8004c9c:	46a0      	mov	r8, r4
 8004c9e:	e6a2      	b.n	80049e6 <__kernel_rem_pio2+0xe6>
 8004ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ca2:	2401      	movs	r4, #1
 8004ca4:	e7e6      	b.n	8004c74 <__kernel_rem_pio2+0x374>
 8004ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004cac:	f7fb fc3a 	bl	8000524 <__aeabi_i2d>
 8004cb0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8004f70 <__kernel_rem_pio2+0x670>
 8004cb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cc0:	46b2      	mov	sl, r6
 8004cc2:	f04f 0800 	mov.w	r8, #0
 8004cc6:	9b05      	ldr	r3, [sp, #20]
 8004cc8:	4598      	cmp	r8, r3
 8004cca:	dd05      	ble.n	8004cd8 <__kernel_rem_pio2+0x3d8>
 8004ccc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cd0:	3701      	adds	r7, #1
 8004cd2:	eca5 7b02 	vstmia	r5!, {d7}
 8004cd6:	e7df      	b.n	8004c98 <__kernel_rem_pio2+0x398>
 8004cd8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004cdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004ce0:	f7fb fc8a 	bl	80005f8 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cec:	f7fb face 	bl	800028c <__adddf3>
 8004cf0:	f108 0801 	add.w	r8, r8, #1
 8004cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cf8:	e7e5      	b.n	8004cc6 <__kernel_rem_pio2+0x3c6>
 8004cfa:	f1cb 0000 	rsb	r0, fp, #0
 8004cfe:	ec47 6b10 	vmov	d0, r6, r7
 8004d02:	f000 f94d 	bl	8004fa0 <scalbn>
 8004d06:	ec55 4b10 	vmov	r4, r5, d0
 8004d0a:	4b9b      	ldr	r3, [pc, #620]	@ (8004f78 <__kernel_rem_pio2+0x678>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4620      	mov	r0, r4
 8004d10:	4629      	mov	r1, r5
 8004d12:	f7fb fef7 	bl	8000b04 <__aeabi_dcmpge>
 8004d16:	b300      	cbz	r0, 8004d5a <__kernel_rem_pio2+0x45a>
 8004d18:	4b98      	ldr	r3, [pc, #608]	@ (8004f7c <__kernel_rem_pio2+0x67c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fc6a 	bl	80005f8 <__aeabi_dmul>
 8004d24:	f7fb ff02 	bl	8000b2c <__aeabi_d2iz>
 8004d28:	4606      	mov	r6, r0
 8004d2a:	f7fb fbfb 	bl	8000524 <__aeabi_i2d>
 8004d2e:	4b92      	ldr	r3, [pc, #584]	@ (8004f78 <__kernel_rem_pio2+0x678>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	f7fb fc61 	bl	80005f8 <__aeabi_dmul>
 8004d36:	460b      	mov	r3, r1
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f7fb faa3 	bl	8000288 <__aeabi_dsub>
 8004d42:	f7fb fef3 	bl	8000b2c <__aeabi_d2iz>
 8004d46:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d48:	f10b 0b18 	add.w	fp, fp, #24
 8004d4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004d50:	f108 0801 	add.w	r8, r8, #1
 8004d54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004d58:	e720      	b.n	8004b9c <__kernel_rem_pio2+0x29c>
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f7fb fee5 	bl	8000b2c <__aeabi_d2iz>
 8004d62:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004d68:	e718      	b.n	8004b9c <__kernel_rem_pio2+0x29c>
 8004d6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004d70:	f7fb fbd8 	bl	8000524 <__aeabi_i2d>
 8004d74:	4622      	mov	r2, r4
 8004d76:	462b      	mov	r3, r5
 8004d78:	f7fb fc3e 	bl	80005f8 <__aeabi_dmul>
 8004d7c:	4652      	mov	r2, sl
 8004d7e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004d82:	465b      	mov	r3, fp
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb fc36 	bl	80005f8 <__aeabi_dmul>
 8004d8c:	3e01      	subs	r6, #1
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	e716      	b.n	8004bc2 <__kernel_rem_pio2+0x2c2>
 8004d94:	9906      	ldr	r1, [sp, #24]
 8004d96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004d9a:	9106      	str	r1, [sp, #24]
 8004d9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004da0:	f7fb fc2a 	bl	80005f8 <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4650      	mov	r0, sl
 8004daa:	4659      	mov	r1, fp
 8004dac:	f7fb fa6e 	bl	800028c <__adddf3>
 8004db0:	3601      	adds	r6, #1
 8004db2:	4682      	mov	sl, r0
 8004db4:	468b      	mov	fp, r1
 8004db6:	9b00      	ldr	r3, [sp, #0]
 8004db8:	429e      	cmp	r6, r3
 8004dba:	dc01      	bgt.n	8004dc0 <__kernel_rem_pio2+0x4c0>
 8004dbc:	42ae      	cmp	r6, r5
 8004dbe:	dde9      	ble.n	8004d94 <__kernel_rem_pio2+0x494>
 8004dc0:	ab48      	add	r3, sp, #288	@ 0x120
 8004dc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004dc6:	e9c5 ab00 	strd	sl, fp, [r5]
 8004dca:	3c01      	subs	r4, #1
 8004dcc:	e6fd      	b.n	8004bca <__kernel_rem_pio2+0x2ca>
 8004dce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	dc0b      	bgt.n	8004dec <__kernel_rem_pio2+0x4ec>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	dc35      	bgt.n	8004e44 <__kernel_rem_pio2+0x544>
 8004dd8:	d059      	beq.n	8004e8e <__kernel_rem_pio2+0x58e>
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	f003 0007 	and.w	r0, r3, #7
 8004de0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004de4:	ecbd 8b02 	vpop	{d8}
 8004de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d1f3      	bne.n	8004dda <__kernel_rem_pio2+0x4da>
 8004df2:	9b05      	ldr	r3, [sp, #20]
 8004df4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004df8:	eb0d 0403 	add.w	r4, sp, r3
 8004dfc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004e00:	4625      	mov	r5, r4
 8004e02:	46c2      	mov	sl, r8
 8004e04:	f1ba 0f00 	cmp.w	sl, #0
 8004e08:	dc69      	bgt.n	8004ede <__kernel_rem_pio2+0x5de>
 8004e0a:	4645      	mov	r5, r8
 8004e0c:	2d01      	cmp	r5, #1
 8004e0e:	f300 8087 	bgt.w	8004f20 <__kernel_rem_pio2+0x620>
 8004e12:	9c05      	ldr	r4, [sp, #20]
 8004e14:	ab48      	add	r3, sp, #288	@ 0x120
 8004e16:	441c      	add	r4, r3
 8004e18:	2000      	movs	r0, #0
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f1b8 0f01 	cmp.w	r8, #1
 8004e20:	f300 809c 	bgt.w	8004f5c <__kernel_rem_pio2+0x65c>
 8004e24:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004e28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004e2c:	f1b9 0f00 	cmp.w	r9, #0
 8004e30:	f040 80a6 	bne.w	8004f80 <__kernel_rem_pio2+0x680>
 8004e34:	9b04      	ldr	r3, [sp, #16]
 8004e36:	e9c3 5600 	strd	r5, r6, [r3]
 8004e3a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004e3e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004e42:	e7ca      	b.n	8004dda <__kernel_rem_pio2+0x4da>
 8004e44:	9d05      	ldr	r5, [sp, #20]
 8004e46:	ab48      	add	r3, sp, #288	@ 0x120
 8004e48:	441d      	add	r5, r3
 8004e4a:	4644      	mov	r4, r8
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2c00      	cmp	r4, #0
 8004e52:	da35      	bge.n	8004ec0 <__kernel_rem_pio2+0x5c0>
 8004e54:	f1b9 0f00 	cmp.w	r9, #0
 8004e58:	d038      	beq.n	8004ecc <__kernel_rem_pio2+0x5cc>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e60:	9c04      	ldr	r4, [sp, #16]
 8004e62:	e9c4 2300 	strd	r2, r3, [r4]
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004e6e:	f7fb fa0b 	bl	8000288 <__aeabi_dsub>
 8004e72:	ad4a      	add	r5, sp, #296	@ 0x128
 8004e74:	2401      	movs	r4, #1
 8004e76:	45a0      	cmp	r8, r4
 8004e78:	da2b      	bge.n	8004ed2 <__kernel_rem_pio2+0x5d2>
 8004e7a:	f1b9 0f00 	cmp.w	r9, #0
 8004e7e:	d002      	beq.n	8004e86 <__kernel_rem_pio2+0x586>
 8004e80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e84:	4619      	mov	r1, r3
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004e8c:	e7a5      	b.n	8004dda <__kernel_rem_pio2+0x4da>
 8004e8e:	9c05      	ldr	r4, [sp, #20]
 8004e90:	ab48      	add	r3, sp, #288	@ 0x120
 8004e92:	441c      	add	r4, r3
 8004e94:	2000      	movs	r0, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	f1b8 0f00 	cmp.w	r8, #0
 8004e9c:	da09      	bge.n	8004eb2 <__kernel_rem_pio2+0x5b2>
 8004e9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ea2:	d002      	beq.n	8004eaa <__kernel_rem_pio2+0x5aa>
 8004ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	9b04      	ldr	r3, [sp, #16]
 8004eac:	e9c3 0100 	strd	r0, r1, [r3]
 8004eb0:	e793      	b.n	8004dda <__kernel_rem_pio2+0x4da>
 8004eb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004eb6:	f7fb f9e9 	bl	800028c <__adddf3>
 8004eba:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ebe:	e7eb      	b.n	8004e98 <__kernel_rem_pio2+0x598>
 8004ec0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004ec4:	f7fb f9e2 	bl	800028c <__adddf3>
 8004ec8:	3c01      	subs	r4, #1
 8004eca:	e7c1      	b.n	8004e50 <__kernel_rem_pio2+0x550>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	e7c6      	b.n	8004e60 <__kernel_rem_pio2+0x560>
 8004ed2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004ed6:	f7fb f9d9 	bl	800028c <__adddf3>
 8004eda:	3401      	adds	r4, #1
 8004edc:	e7cb      	b.n	8004e76 <__kernel_rem_pio2+0x576>
 8004ede:	ed35 7b02 	vldmdb	r5!, {d7}
 8004ee2:	ed8d 7b00 	vstr	d7, [sp]
 8004ee6:	ed95 7b02 	vldr	d7, [r5, #8]
 8004eea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eee:	ec53 2b17 	vmov	r2, r3, d7
 8004ef2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004ef6:	f7fb f9c9 	bl	800028c <__adddf3>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4606      	mov	r6, r0
 8004f00:	460f      	mov	r7, r1
 8004f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f06:	f7fb f9bf 	bl	8000288 <__aeabi_dsub>
 8004f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f0e:	f7fb f9bd 	bl	800028c <__adddf3>
 8004f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f16:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004f1a:	e9c5 6700 	strd	r6, r7, [r5]
 8004f1e:	e771      	b.n	8004e04 <__kernel_rem_pio2+0x504>
 8004f20:	ed34 7b02 	vldmdb	r4!, {d7}
 8004f24:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004f28:	ec51 0b17 	vmov	r0, r1, d7
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	465b      	mov	r3, fp
 8004f30:	ed8d 7b00 	vstr	d7, [sp]
 8004f34:	f7fb f9aa 	bl	800028c <__adddf3>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460f      	mov	r7, r1
 8004f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f44:	f7fb f9a0 	bl	8000288 <__aeabi_dsub>
 8004f48:	4652      	mov	r2, sl
 8004f4a:	465b      	mov	r3, fp
 8004f4c:	f7fb f99e 	bl	800028c <__adddf3>
 8004f50:	3d01      	subs	r5, #1
 8004f52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f56:	e9c4 6700 	strd	r6, r7, [r4]
 8004f5a:	e757      	b.n	8004e0c <__kernel_rem_pio2+0x50c>
 8004f5c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f60:	f7fb f994 	bl	800028c <__adddf3>
 8004f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f68:	e758      	b.n	8004e1c <__kernel_rem_pio2+0x51c>
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w
	...
 8004f78:	41700000 	.word	0x41700000
 8004f7c:	3e700000 	.word	0x3e700000
 8004f80:	9b04      	ldr	r3, [sp, #16]
 8004f82:	9a04      	ldr	r2, [sp, #16]
 8004f84:	601d      	str	r5, [r3, #0]
 8004f86:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004f8a:	605c      	str	r4, [r3, #4]
 8004f8c:	609f      	str	r7, [r3, #8]
 8004f8e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004f92:	60d3      	str	r3, [r2, #12]
 8004f94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f98:	6110      	str	r0, [r2, #16]
 8004f9a:	6153      	str	r3, [r2, #20]
 8004f9c:	e71d      	b.n	8004dda <__kernel_rem_pio2+0x4da>
 8004f9e:	bf00      	nop

08004fa0 <scalbn>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	ec55 4b10 	vmov	r4, r5, d0
 8004fa6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004faa:	4606      	mov	r6, r0
 8004fac:	462b      	mov	r3, r5
 8004fae:	b991      	cbnz	r1, 8004fd6 <scalbn+0x36>
 8004fb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004fb4:	4323      	orrs	r3, r4
 8004fb6:	d03b      	beq.n	8005030 <scalbn+0x90>
 8004fb8:	4b33      	ldr	r3, [pc, #204]	@ (8005088 <scalbn+0xe8>)
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f7fb fb1a 	bl	80005f8 <__aeabi_dmul>
 8004fc4:	4b31      	ldr	r3, [pc, #196]	@ (800508c <scalbn+0xec>)
 8004fc6:	429e      	cmp	r6, r3
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	da0f      	bge.n	8004fee <scalbn+0x4e>
 8004fce:	a326      	add	r3, pc, #152	@ (adr r3, 8005068 <scalbn+0xc8>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	e01e      	b.n	8005014 <scalbn+0x74>
 8004fd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	d10b      	bne.n	8004ff6 <scalbn+0x56>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb f952 	bl	800028c <__adddf3>
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	e020      	b.n	8005030 <scalbn+0x90>
 8004fee:	460b      	mov	r3, r1
 8004ff0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004ff4:	3936      	subs	r1, #54	@ 0x36
 8004ff6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004ffa:	4296      	cmp	r6, r2
 8004ffc:	dd0d      	ble.n	800501a <scalbn+0x7a>
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	a11b      	add	r1, pc, #108	@ (adr r1, 8005070 <scalbn+0xd0>)
 8005002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005006:	da02      	bge.n	800500e <scalbn+0x6e>
 8005008:	a11b      	add	r1, pc, #108	@ (adr r1, 8005078 <scalbn+0xd8>)
 800500a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800500e:	a318      	add	r3, pc, #96	@ (adr r3, 8005070 <scalbn+0xd0>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	e7e6      	b.n	8004fe8 <scalbn+0x48>
 800501a:	1872      	adds	r2, r6, r1
 800501c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005020:	428a      	cmp	r2, r1
 8005022:	dcec      	bgt.n	8004ffe <scalbn+0x5e>
 8005024:	2a00      	cmp	r2, #0
 8005026:	dd06      	ble.n	8005036 <scalbn+0x96>
 8005028:	f36f 531e 	bfc	r3, #20, #11
 800502c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005030:	ec45 4b10 	vmov	d0, r4, r5
 8005034:	bd70      	pop	{r4, r5, r6, pc}
 8005036:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800503a:	da08      	bge.n	800504e <scalbn+0xae>
 800503c:	2d00      	cmp	r5, #0
 800503e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005068 <scalbn+0xc8>)
 8005040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005044:	dac3      	bge.n	8004fce <scalbn+0x2e>
 8005046:	a10e      	add	r1, pc, #56	@ (adr r1, 8005080 <scalbn+0xe0>)
 8005048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800504c:	e7bf      	b.n	8004fce <scalbn+0x2e>
 800504e:	3236      	adds	r2, #54	@ 0x36
 8005050:	f36f 531e 	bfc	r3, #20, #11
 8005054:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005058:	4620      	mov	r0, r4
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <scalbn+0xf0>)
 800505c:	4629      	mov	r1, r5
 800505e:	2200      	movs	r2, #0
 8005060:	e7d8      	b.n	8005014 <scalbn+0x74>
 8005062:	bf00      	nop
 8005064:	f3af 8000 	nop.w
 8005068:	c2f8f359 	.word	0xc2f8f359
 800506c:	01a56e1f 	.word	0x01a56e1f
 8005070:	8800759c 	.word	0x8800759c
 8005074:	7e37e43c 	.word	0x7e37e43c
 8005078:	8800759c 	.word	0x8800759c
 800507c:	fe37e43c 	.word	0xfe37e43c
 8005080:	c2f8f359 	.word	0xc2f8f359
 8005084:	81a56e1f 	.word	0x81a56e1f
 8005088:	43500000 	.word	0x43500000
 800508c:	ffff3cb0 	.word	0xffff3cb0
 8005090:	3c900000 	.word	0x3c900000
 8005094:	00000000 	.word	0x00000000

08005098 <floor>:
 8005098:	ec51 0b10 	vmov	r0, r1, d0
 800509c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80050a8:	2e13      	cmp	r6, #19
 80050aa:	460c      	mov	r4, r1
 80050ac:	4605      	mov	r5, r0
 80050ae:	4680      	mov	r8, r0
 80050b0:	dc34      	bgt.n	800511c <floor+0x84>
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	da17      	bge.n	80050e6 <floor+0x4e>
 80050b6:	a332      	add	r3, pc, #200	@ (adr r3, 8005180 <floor+0xe8>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb f8e6 	bl	800028c <__adddf3>
 80050c0:	2200      	movs	r2, #0
 80050c2:	2300      	movs	r3, #0
 80050c4:	f7fb fd28 	bl	8000b18 <__aeabi_dcmpgt>
 80050c8:	b150      	cbz	r0, 80050e0 <floor+0x48>
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	da55      	bge.n	800517a <floor+0xe2>
 80050ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80050d2:	432c      	orrs	r4, r5
 80050d4:	2500      	movs	r5, #0
 80050d6:	42ac      	cmp	r4, r5
 80050d8:	4c2b      	ldr	r4, [pc, #172]	@ (8005188 <floor+0xf0>)
 80050da:	bf08      	it	eq
 80050dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	e023      	b.n	800512e <floor+0x96>
 80050e6:	4f29      	ldr	r7, [pc, #164]	@ (800518c <floor+0xf4>)
 80050e8:	4137      	asrs	r7, r6
 80050ea:	ea01 0307 	and.w	r3, r1, r7
 80050ee:	4303      	orrs	r3, r0
 80050f0:	d01d      	beq.n	800512e <floor+0x96>
 80050f2:	a323      	add	r3, pc, #140	@ (adr r3, 8005180 <floor+0xe8>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f8c8 	bl	800028c <__adddf3>
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	f7fb fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 8005104:	2800      	cmp	r0, #0
 8005106:	d0eb      	beq.n	80050e0 <floor+0x48>
 8005108:	2c00      	cmp	r4, #0
 800510a:	bfbe      	ittt	lt
 800510c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005110:	4133      	asrlt	r3, r6
 8005112:	18e4      	addlt	r4, r4, r3
 8005114:	ea24 0407 	bic.w	r4, r4, r7
 8005118:	2500      	movs	r5, #0
 800511a:	e7e1      	b.n	80050e0 <floor+0x48>
 800511c:	2e33      	cmp	r6, #51	@ 0x33
 800511e:	dd0a      	ble.n	8005136 <floor+0x9e>
 8005120:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005124:	d103      	bne.n	800512e <floor+0x96>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	f7fb f8af 	bl	800028c <__adddf3>
 800512e:	ec41 0b10 	vmov	d0, r0, r1
 8005132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005136:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800513a:	f04f 37ff 	mov.w	r7, #4294967295
 800513e:	40df      	lsrs	r7, r3
 8005140:	4207      	tst	r7, r0
 8005142:	d0f4      	beq.n	800512e <floor+0x96>
 8005144:	a30e      	add	r3, pc, #56	@ (adr r3, 8005180 <floor+0xe8>)
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f7fb f89f 	bl	800028c <__adddf3>
 800514e:	2200      	movs	r2, #0
 8005150:	2300      	movs	r3, #0
 8005152:	f7fb fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8005156:	2800      	cmp	r0, #0
 8005158:	d0c2      	beq.n	80050e0 <floor+0x48>
 800515a:	2c00      	cmp	r4, #0
 800515c:	da0a      	bge.n	8005174 <floor+0xdc>
 800515e:	2e14      	cmp	r6, #20
 8005160:	d101      	bne.n	8005166 <floor+0xce>
 8005162:	3401      	adds	r4, #1
 8005164:	e006      	b.n	8005174 <floor+0xdc>
 8005166:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800516a:	2301      	movs	r3, #1
 800516c:	40b3      	lsls	r3, r6
 800516e:	441d      	add	r5, r3
 8005170:	4545      	cmp	r5, r8
 8005172:	d3f6      	bcc.n	8005162 <floor+0xca>
 8005174:	ea25 0507 	bic.w	r5, r5, r7
 8005178:	e7b2      	b.n	80050e0 <floor+0x48>
 800517a:	2500      	movs	r5, #0
 800517c:	462c      	mov	r4, r5
 800517e:	e7af      	b.n	80050e0 <floor+0x48>
 8005180:	8800759c 	.word	0x8800759c
 8005184:	7e37e43c 	.word	0x7e37e43c
 8005188:	bff00000 	.word	0xbff00000
 800518c:	000fffff 	.word	0x000fffff

08005190 <_init>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr

0800519c <_fini>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr
