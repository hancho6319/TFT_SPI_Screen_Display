
TFT_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026478  08005060  08005060  00006060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b4d8  0802b4d8  0002d060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802b4d8  0802b4d8  0002c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b4e0  0802b4e0  0002d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b4e0  0802b4e0  0002c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802b4e4  0802b4e4  0002c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0802b4e8  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000060  0802b548  0002d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0802b548  0002d224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000744d  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001644  00000000  00000000  000344dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00035b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000576  00000000  00000000  00036278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001533b  00000000  00000000  000367ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000858e  00000000  00000000  0004bb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866d9  00000000  00000000  000540b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000260c  00000000  00000000  000da7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dcde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005048 	.word	0x08005048

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005048 	.word	0x08005048

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b988 	b.w	8000f84 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	468e      	mov	lr, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	4688      	mov	r8, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d962      	bls.n	8000d68 <__udivmoddi4+0xdc>
 8000ca2:	fab2 f682 	clz	r6, r2
 8000ca6:	b14e      	cbz	r6, 8000cbc <__udivmoddi4+0x30>
 8000ca8:	f1c6 0320 	rsb	r3, r6, #32
 8000cac:	fa01 f806 	lsl.w	r8, r1, r6
 8000cb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb4:	40b7      	lsls	r7, r6
 8000cb6:	ea43 0808 	orr.w	r8, r3, r8
 8000cba:	40b4      	lsls	r4, r6
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd2:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ce0:	f080 80ea 	bcs.w	8000eb8 <__udivmoddi4+0x22c>
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f240 80e7 	bls.w	8000eb8 <__udivmoddi4+0x22c>
 8000cea:	3902      	subs	r1, #2
 8000cec:	443b      	add	r3, r7
 8000cee:	1a9a      	subs	r2, r3, r2
 8000cf0:	b2a3      	uxth	r3, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d02:	459c      	cmp	ip, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x8e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 80d6 	bcs.w	8000ebc <__udivmoddi4+0x230>
 8000d10:	459c      	cmp	ip, r3
 8000d12:	f240 80d3 	bls.w	8000ebc <__udivmoddi4+0x230>
 8000d16:	443b      	add	r3, r7
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1e:	eba3 030c 	sub.w	r3, r3, ip
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40f3      	lsrs	r3, r6
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xb6>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb0>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x14c>
 8000d4a:	4573      	cmp	r3, lr
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xc8>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 8105 	bhi.w	8000f5e <__udivmoddi4+0x2d2>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d0e5      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d62:	e9c5 4800 	strd	r4, r8, [r5]
 8000d66:	e7e2      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f000 8090 	beq.w	8000e8e <__udivmoddi4+0x202>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f040 80a4 	bne.w	8000ec0 <__udivmoddi4+0x234>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	0c03      	lsrs	r3, r0, #16
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	b280      	uxth	r0, r0
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d92:	fb04 f20c 	mul.w	r2, r4, ip
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x11e>
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x11c>
 8000da2:	429a      	cmp	r2, r3
 8000da4:	f200 80e0 	bhi.w	8000f68 <__udivmoddi4+0x2dc>
 8000da8:	46c4      	mov	ip, r8
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000db0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db8:	fb02 f404 	mul.w	r4, r2, r4
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x144>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x142>
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	f200 80ca 	bhi.w	8000f62 <__udivmoddi4+0x2d6>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	1b1b      	subs	r3, r3, r4
 8000dd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x98>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa0e f401 	lsl.w	r4, lr, r1
 8000de8:	fa20 f306 	lsr.w	r3, r0, r6
 8000dec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000df0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df4:	4323      	orrs	r3, r4
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	fa1f fc87 	uxth.w	ip, r7
 8000dfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000e02:	0c1c      	lsrs	r4, r3, #16
 8000e04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1a0>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1e:	f080 809c 	bcs.w	8000f5a <__udivmoddi4+0x2ce>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f240 8099 	bls.w	8000f5a <__udivmoddi4+0x2ce>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	fa1f fe83 	uxth.w	lr, r3
 8000e34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e38:	fb09 4413 	mls	r4, r9, r3, r4
 8000e3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e44:	45a4      	cmp	ip, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1ce>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4e:	f080 8082 	bcs.w	8000f56 <__udivmoddi4+0x2ca>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d97f      	bls.n	8000f56 <__udivmoddi4+0x2ca>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e66:	4564      	cmp	r4, ip
 8000e68:	4673      	mov	r3, lr
 8000e6a:	46e1      	mov	r9, ip
 8000e6c:	d362      	bcc.n	8000f34 <__udivmoddi4+0x2a8>
 8000e6e:	d05f      	beq.n	8000f30 <__udivmoddi4+0x2a4>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x1fe>
 8000e72:	ebb8 0203 	subs.w	r2, r8, r3
 8000e76:	eb64 0409 	sbc.w	r4, r4, r9
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e82:	431e      	orrs	r6, r3
 8000e84:	40cc      	lsrs	r4, r1
 8000e86:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e74f      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000e8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e92:	0c01      	lsrs	r1, r0, #16
 8000e94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e98:	b280      	uxth	r0, r0
 8000e9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	463c      	mov	r4, r7
 8000ea4:	46b8      	mov	r8, r7
 8000ea6:	46be      	mov	lr, r7
 8000ea8:	2620      	movs	r6, #32
 8000eaa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eae:	eba2 0208 	sub.w	r2, r2, r8
 8000eb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb6:	e766      	b.n	8000d86 <__udivmoddi4+0xfa>
 8000eb8:	4601      	mov	r1, r0
 8000eba:	e718      	b.n	8000cee <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e72c      	b.n	8000d1a <__udivmoddi4+0x8e>
 8000ec0:	f1c6 0220 	rsb	r2, r6, #32
 8000ec4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec8:	40b7      	lsls	r7, r6
 8000eca:	40b1      	lsls	r1, r6
 8000ecc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ee0:	0c11      	lsrs	r1, r2, #16
 8000ee2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee6:	fb08 f904 	mul.w	r9, r8, r4
 8000eea:	40b0      	lsls	r0, r6
 8000eec:	4589      	cmp	r9, r1
 8000eee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ef2:	b280      	uxth	r0, r0
 8000ef4:	d93e      	bls.n	8000f74 <__udivmoddi4+0x2e8>
 8000ef6:	1879      	adds	r1, r7, r1
 8000ef8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000efc:	d201      	bcs.n	8000f02 <__udivmoddi4+0x276>
 8000efe:	4589      	cmp	r9, r1
 8000f00:	d81f      	bhi.n	8000f42 <__udivmoddi4+0x2b6>
 8000f02:	eba1 0109 	sub.w	r1, r1, r9
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f12:	b292      	uxth	r2, r2
 8000f14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f18:	4542      	cmp	r2, r8
 8000f1a:	d229      	bcs.n	8000f70 <__udivmoddi4+0x2e4>
 8000f1c:	18ba      	adds	r2, r7, r2
 8000f1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f22:	d2c4      	bcs.n	8000eae <__udivmoddi4+0x222>
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d2c2      	bcs.n	8000eae <__udivmoddi4+0x222>
 8000f28:	f1a9 0102 	sub.w	r1, r9, #2
 8000f2c:	443a      	add	r2, r7
 8000f2e:	e7be      	b.n	8000eae <__udivmoddi4+0x222>
 8000f30:	45f0      	cmp	r8, lr
 8000f32:	d29d      	bcs.n	8000e70 <__udivmoddi4+0x1e4>
 8000f34:	ebbe 0302 	subs.w	r3, lr, r2
 8000f38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	46e1      	mov	r9, ip
 8000f40:	e796      	b.n	8000e70 <__udivmoddi4+0x1e4>
 8000f42:	eba7 0909 	sub.w	r9, r7, r9
 8000f46:	4449      	add	r1, r9
 8000f48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f50:	fb09 f804 	mul.w	r8, r9, r4
 8000f54:	e7db      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f56:	4673      	mov	r3, lr
 8000f58:	e77f      	b.n	8000e5a <__udivmoddi4+0x1ce>
 8000f5a:	4650      	mov	r0, sl
 8000f5c:	e766      	b.n	8000e2c <__udivmoddi4+0x1a0>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e6fd      	b.n	8000d5e <__udivmoddi4+0xd2>
 8000f62:	443b      	add	r3, r7
 8000f64:	3a02      	subs	r2, #2
 8000f66:	e733      	b.n	8000dd0 <__udivmoddi4+0x144>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	443b      	add	r3, r7
 8000f6e:	e71c      	b.n	8000daa <__udivmoddi4+0x11e>
 8000f70:	4649      	mov	r1, r9
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x222>
 8000f74:	eba1 0109 	sub.w	r1, r1, r9
 8000f78:	46c4      	mov	ip, r8
 8000f7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7e:	fb09 f804 	mul.w	r8, r9, r4
 8000f82:	e7c4      	b.n	8000f0e <__udivmoddi4+0x282>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f001 f941 	bl	8002214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f853 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f8ef 	bl	8001178 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f9a:	f000 f8b7 	bl	800110c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  TFT_Init();
 8000f9e:	f000 fa1b 	bl	80013d8 <TFT_Init>
  TFT_SetRotation(TFT_ROTATION_0);
 8000fa2:	2048      	movs	r0, #72	@ 0x48
 8000fa4:	f000 fedc 	bl	8001d60 <TFT_SetRotation>
  TFT_InvertColors(TRUE);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f000 fb13 	bl	80015d4 <TFT_InvertColors>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		  // Display background image
    /* USER CODE END WHILE */
		      TFT_BackgroundImage(0, 0, image4, IMAGE_WIDTH, IMAGE_HEIGHT);
 8000fae:	23f0      	movs	r3, #240	@ 0xf0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800102c <main+0xa4>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f001 f8ae 	bl	800211c <TFT_BackgroundImage>
		      TFT_printf(10, 5, TFT_WHITE, TRANSPARENT, 1, "10:37PM");
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <main+0xa8>)
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fce:	2105      	movs	r1, #5
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f000 ff03 	bl	8001ddc <TFT_printf>
		      TFT_DrawSymbol(230, 5, BATTERY_50, TFT_WHITE, 2);
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fde:	220d      	movs	r2, #13
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	20e6      	movs	r0, #230	@ 0xe6
 8000fe4:	f000 fb62 	bl	80016ac <TFT_DrawSymbol>
		      TFT_DrawSymbol(250, 5, BATTERY_CHARGING, TFT_WHITE, 1);
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff0:	2210      	movs	r2, #16
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	20fa      	movs	r0, #250	@ 0xfa
 8000ff6:	f000 fb59 	bl	80016ac <TFT_DrawSymbol>
//	      TFT_BackgroundImage(0, 0, image4, IMAGE_WIDTH, IMAGE_HEIGHT);
//
//	      // Show full character set capabilities
//	      TFT_printf(10, 10, TFT_WHITE, TFT_BLUE, 1, "UPPERCASE: ABCDEFGHIJKLMNOPQRSTUVWXYZ");
//	      TFT_printf(10, 25, TFT_GREEN, TRANSPARENT, 1, "lowercase: abcdefghijklmnopqrstuvwxyz");
	      TFT_printf(10, 110, TFT_YELLOW, TRANSPARENT, 1, "Jollofyyj!!! Rice of Nigeria");
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <main+0xac>)
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001008:	216e      	movs	r1, #110	@ 0x6e
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fee6 	bl	8001ddc <TFT_printf>
	      TFT_printf(10, 80, TFT_CYAN, TRANSPARENT, 1, "1234567890!!1234567890");
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <main+0xb0>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800101e:	2150      	movs	r1, #80	@ 0x50
 8001020:	200a      	movs	r0, #10
 8001022:	f000 fedb 	bl	8001ddc <TFT_printf>
	      TFT_printf(10, 110, TFT_YELLOW, TRANSPARENT, 1, "Jollofyyj!!! Rice of Nigeria");
 8001026:	bf00      	nop
 8001028:	e7e7      	b.n	8000ffa <main+0x72>
 800102a:	bf00      	nop
 800102c:	080050a0 	.word	0x080050a0
 8001030:	08005060 	.word	0x08005060
 8001034:	08005068 	.word	0x08005068
 8001038:	08005088 	.word	0x08005088

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	@ 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fb06 	bl	800365c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <SystemClock_Config+0xc8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <SystemClock_Config+0xc8>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <SystemClock_Config+0xc8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <SystemClock_Config+0xcc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <SystemClock_Config+0xcc>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <SystemClock_Config+0xcc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010ac:	230c      	movs	r3, #12
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010b0:	2360      	movs	r3, #96	@ 0x60
 80010b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fbc1 	bl	8002848 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010cc:	f000 f896 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2103      	movs	r1, #3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fe23 	bl	8002d38 <HAL_RCC_ClockConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010f8:	f000 f880 	bl	80011fc <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3750      	adds	r7, #80	@ 0x50
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001112:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <MX_SPI1_Init+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001118:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800111c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_SPI1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001158:	220a      	movs	r2, #10
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_SPI1_Init+0x64>)
 800115e:	f001 ff97 	bl	8003090 <HAL_SPI_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001168:	f000 f848 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000007c 	.word	0x2000007c
 8001174:	40013000 	.word	0x40013000

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_GPIO_Init+0x7c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <MX_GPIO_Init+0x7c>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_GPIO_Init+0x7c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_GPIO_Init+0x7c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <MX_GPIO_Init+0x7c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_GPIO_Init+0x7c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2113      	movs	r1, #19
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <MX_GPIO_Init+0x80>)
 80011cc:	f001 fb22 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80011d0:	2313      	movs	r3, #19
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_GPIO_Init+0x80>)
 80011e8:	f001 f990 	bl	800250c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_Handler+0x8>

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_MspInit+0x4c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_SPI_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12b      	bne.n	80012d2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_SPI_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_SPI_MspInit+0x88>)
 8001284:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_SPI_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_SPI_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_SPI_MspInit+0x88>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012b2:	23e0      	movs	r3, #224	@ 0xe0
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c2:	2305      	movs	r3, #5
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <HAL_SPI_MspInit+0x8c>)
 80012ce:	f001 f91d 	bl	800250c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	@ 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40013000 	.word	0x40013000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <NMI_Handler+0x4>

080012f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <MemManage_Handler+0x4>

08001300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <UsageFault_Handler+0x4>

08001310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 ffbb 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f002 f978 	bl	800366c <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200000d4 	.word	0x200000d4
 80013b0:	20000228 	.word	0x20000228

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <TFT_Init>:


/**************************************************************************/
                           /* Utility Functions */
/**************************************************************************/
void TFT_Init(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2110      	movs	r1, #16
 80013e0:	4822      	ldr	r0, [pc, #136]	@ (800146c <TFT_Init+0x94>)
 80013e2:	f001 fa17 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2102      	movs	r1, #2
 80013ea:	4820      	ldr	r0, [pc, #128]	@ (800146c <TFT_Init+0x94>)
 80013ec:	f001 fa12 	bl	8002814 <HAL_GPIO_WritePin>

    TFT_Reset();
 80013f0:	f000 f8ae 	bl	8001550 <TFT_Reset>

    TFT_WriteCommand(TFT_SWRESET);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f000 f83b 	bl	8001470 <TFT_WriteCommand>
    HAL_Delay(150);
 80013fa:	2096      	movs	r0, #150	@ 0x96
 80013fc:	f000 ff7c 	bl	80022f8 <HAL_Delay>

    TFT_WriteCommand(TFT_SLPOUT);
 8001400:	2011      	movs	r0, #17
 8001402:	f000 f835 	bl	8001470 <TFT_WriteCommand>
    HAL_Delay(120);
 8001406:	2078      	movs	r0, #120	@ 0x78
 8001408:	f000 ff76 	bl	80022f8 <HAL_Delay>

    TFT_WriteCommand(TFT_COLMOD);
 800140c:	203a      	movs	r0, #58	@ 0x3a
 800140e:	f000 f82f 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData(0x55);
 8001412:	2055      	movs	r0, #85	@ 0x55
 8001414:	f000 f84e 	bl	80014b4 <TFT_WriteData>

    TFT_SetRotation(TFT_ROTATION_0);
 8001418:	2048      	movs	r0, #72	@ 0x48
 800141a:	f000 fca1 	bl	8001d60 <TFT_SetRotation>

    TFT_WriteCommand(TFT_PWCTR1);
 800141e:	20c0      	movs	r0, #192	@ 0xc0
 8001420:	f000 f826 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData(0x23);
 8001424:	2023      	movs	r0, #35	@ 0x23
 8001426:	f000 f845 	bl	80014b4 <TFT_WriteData>

    TFT_WriteCommand(TFT_PWCTR2);
 800142a:	20c1      	movs	r0, #193	@ 0xc1
 800142c:	f000 f820 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData(0x10);
 8001430:	2010      	movs	r0, #16
 8001432:	f000 f83f 	bl	80014b4 <TFT_WriteData>

    TFT_WriteCommand(TFT_VMCTR1);
 8001436:	20c5      	movs	r0, #197	@ 0xc5
 8001438:	f000 f81a 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData(0x3E);
 800143c:	203e      	movs	r0, #62	@ 0x3e
 800143e:	f000 f839 	bl	80014b4 <TFT_WriteData>
    TFT_WriteData(0x28);
 8001442:	2028      	movs	r0, #40	@ 0x28
 8001444:	f000 f836 	bl	80014b4 <TFT_WriteData>

    TFT_WriteCommand(TFT_VMCTR2);
 8001448:	20c7      	movs	r0, #199	@ 0xc7
 800144a:	f000 f811 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData(0x86);
 800144e:	2086      	movs	r0, #134	@ 0x86
 8001450:	f000 f830 	bl	80014b4 <TFT_WriteData>

    TFT_WriteCommand(TFT_INVON);
 8001454:	2021      	movs	r0, #33	@ 0x21
 8001456:	f000 f80b 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteCommand(TFT_DISPON);
 800145a:	2029      	movs	r0, #41	@ 0x29
 800145c:	f000 f808 	bl	8001470 <TFT_WriteCommand>
    HAL_Delay(120);
 8001460:	2078      	movs	r0, #120	@ 0x78
 8001462:	f000 ff49 	bl	80022f8 <HAL_Delay>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000

08001470 <TFT_WriteCommand>:

// Hardware-specific functions (implement these according to your setup)
void TFT_WriteCommand(uint8_t cmd) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2102      	movs	r1, #2
 800147e:	480b      	ldr	r0, [pc, #44]	@ (80014ac <TFT_WriteCommand+0x3c>)
 8001480:	f001 f9c8 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2110      	movs	r1, #16
 8001488:	4808      	ldr	r0, [pc, #32]	@ (80014ac <TFT_WriteCommand+0x3c>)
 800148a:	f001 f9c3 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800148e:	1df9      	adds	r1, r7, #7
 8001490:	2364      	movs	r3, #100	@ 0x64
 8001492:	2201      	movs	r2, #1
 8001494:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <TFT_WriteCommand+0x40>)
 8001496:	f001 fe84 	bl	80031a2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2110      	movs	r1, #16
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <TFT_WriteCommand+0x3c>)
 80014a0:	f001 f9b8 	bl	8002814 <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020000 	.word	0x40020000
 80014b0:	2000007c 	.word	0x2000007c

080014b4 <TFT_WriteData>:

void TFT_WriteData(uint8_t data) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2102      	movs	r1, #2
 80014c2:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <TFT_WriteData+0x3c>)
 80014c4:	f001 f9a6 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2110      	movs	r1, #16
 80014cc:	4808      	ldr	r0, [pc, #32]	@ (80014f0 <TFT_WriteData+0x3c>)
 80014ce:	f001 f9a1 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80014d2:	1df9      	adds	r1, r7, #7
 80014d4:	2364      	movs	r3, #100	@ 0x64
 80014d6:	2201      	movs	r2, #1
 80014d8:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <TFT_WriteData+0x40>)
 80014da:	f001 fe62 	bl	80031a2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2110      	movs	r1, #16
 80014e2:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <TFT_WriteData+0x3c>)
 80014e4:	f001 f996 	bl	8002814 <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40020000 	.word	0x40020000
 80014f4:	2000007c 	.word	0x2000007c

080014f8 <TFT_WriteData16>:

void TFT_WriteData16(uint16_t data) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = data >> 8;
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2102      	movs	r1, #2
 8001516:	480c      	ldr	r0, [pc, #48]	@ (8001548 <TFT_WriteData16+0x50>)
 8001518:	f001 f97c 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2110      	movs	r1, #16
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <TFT_WriteData16+0x50>)
 8001522:	f001 f977 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
 8001526:	f107 010c 	add.w	r1, r7, #12
 800152a:	2364      	movs	r3, #100	@ 0x64
 800152c:	2202      	movs	r2, #2
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <TFT_WriteData16+0x54>)
 8001530:	f001 fe37 	bl	80031a2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2110      	movs	r1, #16
 8001538:	4803      	ldr	r0, [pc, #12]	@ (8001548 <TFT_WriteData16+0x50>)
 800153a:	f001 f96b 	bl	8002814 <HAL_GPIO_WritePin>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020000 	.word	0x40020000
 800154c:	2000007c 	.word	0x2000007c

08001550 <TFT_Reset>:

void TFT_Reset(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_RST_PORT, TFT_RST_PIN, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2101      	movs	r1, #1
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <TFT_Reset+0x28>)
 800155a:	f001 f95b 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800155e:	2064      	movs	r0, #100	@ 0x64
 8001560:	f000 feca 	bl	80022f8 <HAL_Delay>
    HAL_GPIO_WritePin(TFT_RST_PORT, TFT_RST_PIN, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <TFT_Reset+0x28>)
 800156a:	f001 f953 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f000 fec2 	bl	80022f8 <HAL_Delay>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40020000 	.word	0x40020000

0800157c <TFT_SetAddressWindow>:

void TFT_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4604      	mov	r4, r0
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4623      	mov	r3, r4
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	4603      	mov	r3, r0
 8001590:	80bb      	strh	r3, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	807b      	strh	r3, [r7, #2]
 8001596:	4613      	mov	r3, r2
 8001598:	803b      	strh	r3, [r7, #0]
	TFT_WriteCommand(TFT_CASET);
 800159a:	202a      	movs	r0, #42	@ 0x2a
 800159c:	f7ff ff68 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData16(x0);
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffa8 	bl	80014f8 <TFT_WriteData16>
    TFT_WriteData16(x1);
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffa4 	bl	80014f8 <TFT_WriteData16>

    TFT_WriteCommand(TFT_RASET);
 80015b0:	202b      	movs	r0, #43	@ 0x2b
 80015b2:	f7ff ff5d 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData16(y0);
 80015b6:	88bb      	ldrh	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff9d 	bl	80014f8 <TFT_WriteData16>
    TFT_WriteData16(y1);
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff99 	bl	80014f8 <TFT_WriteData16>

    TFT_WriteCommand(TFT_RAMWR);
 80015c6:	202c      	movs	r0, #44	@ 0x2c
 80015c8:	f7ff ff52 	bl	8001470 <TFT_WriteCommand>
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}

080015d4 <TFT_InvertColors>:


void TFT_InvertColors(uint8_t invert) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
    if (invert) {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <TFT_InvertColors+0x18>
        TFT_WriteCommand(TFT_INVON);  // Display inversion on
 80015e4:	2021      	movs	r0, #33	@ 0x21
 80015e6:	f7ff ff43 	bl	8001470 <TFT_WriteCommand>
    } else {
        TFT_WriteCommand(TFT_INVOFF); // Display inversion off
    }
}
 80015ea:	e002      	b.n	80015f2 <TFT_InvertColors+0x1e>
        TFT_WriteCommand(TFT_INVOFF); // Display inversion off
 80015ec:	2020      	movs	r0, #32
 80015ee:	f7ff ff3f 	bl	8001470 <TFT_WriteCommand>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <TFT_DrawPixel>:
 * @param y Y coordinate (0 to height-1)
 * @param color 16-bit color value (RGB565 format)
 * @note Includes boundary checking and optimized SPI transmission
 * @example TFT_DrawPixel(100, 150, TFT_RED);
 */
void TFT_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	460b      	mov	r3, r1
 8001608:	80bb      	strh	r3, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	807b      	strh	r3, [r7, #2]
    // Boundary checking - prevent drawing outside display area
    if (x >= TFT_GetWidth() || y >= TFT_GetHeight()) {
 800160e:	f000 fbbd 	bl	8001d8c <TFT_GetWidth>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4293      	cmp	r3, r2
 800161a:	d23f      	bcs.n	800169c <TFT_DrawPixel+0xa0>
 800161c:	f000 fbca 	bl	8001db4 <TFT_GetHeight>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	88bb      	ldrh	r3, [r7, #4]
 8001626:	4293      	cmp	r3, r2
 8001628:	d238      	bcs.n	800169c <TFT_DrawPixel+0xa0>
        return; // Pixel outside display boundaries
    }

    // Set address window to single pixel
    TFT_WriteCommand(TFT_CASET); // Column address set
 800162a:	202a      	movs	r0, #42	@ 0x2a
 800162c:	f7ff ff20 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData16(x);
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff60 	bl	80014f8 <TFT_WriteData16>
    TFT_WriteData16(x);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff5c 	bl	80014f8 <TFT_WriteData16>

    TFT_WriteCommand(TFT_RASET); // Row address set
 8001640:	202b      	movs	r0, #43	@ 0x2b
 8001642:	f7ff ff15 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData16(y);
 8001646:	88bb      	ldrh	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff55 	bl	80014f8 <TFT_WriteData16>
    TFT_WriteData16(y);
 800164e:	88bb      	ldrh	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff51 	bl	80014f8 <TFT_WriteData16>

    TFT_WriteCommand(TFT_RAMWR); // Memory write
 8001656:	202c      	movs	r0, #44	@ 0x2c
 8001658:	f7ff ff0a 	bl	8001470 <TFT_WriteCommand>

    // Send pixel data with optimized SPI transmission
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET); // Data mode
 800165c:	2201      	movs	r2, #1
 800165e:	2102      	movs	r1, #2
 8001660:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <TFT_DrawPixel+0xa8>)
 8001662:	f001 f8d7 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET); // CS low
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	480e      	ldr	r0, [pc, #56]	@ (80016a4 <TFT_DrawPixel+0xa8>)
 800166c:	f001 f8d2 	bl	8002814 <HAL_GPIO_WritePin>

    uint8_t color_data[2] = {color >> 8, color & 0xFF};
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29b      	uxth	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	733b      	strb	r3, [r7, #12]
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, color_data, 2, HAL_MAX_DELAY);
 8001680:	f107 010c 	add.w	r1, r7, #12
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	2202      	movs	r2, #2
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <TFT_DrawPixel+0xac>)
 800168c:	f001 fd89 	bl	80031a2 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET); // CS high
 8001690:	2201      	movs	r2, #1
 8001692:	2110      	movs	r1, #16
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <TFT_DrawPixel+0xa8>)
 8001696:	f001 f8bd 	bl	8002814 <HAL_GPIO_WritePin>
 800169a:	e000      	b.n	800169e <TFT_DrawPixel+0xa2>
        return; // Pixel outside display boundaries
 800169c:	bf00      	nop
}
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020000 	.word	0x40020000
 80016a8:	2000007c 	.word	0x2000007c

080016ac <TFT_DrawSymbol>:
    }
}



void TFT_DrawSymbol(uint16_t x, uint16_t y, uint8_t symbol, uint16_t color, uint8_t size) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	80fb      	strh	r3, [r7, #6]
 80016be:	4603      	mov	r3, r0
 80016c0:	80bb      	strh	r3, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	4613      	mov	r3, r2
 80016c8:	803b      	strh	r3, [r7, #0]
    if(symbol < 1 || symbol > 26) return; // Updated range check
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d07f      	beq.n	80017d0 <TFT_DrawSymbol+0x124>
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	2b1a      	cmp	r3, #26
 80016d4:	d87c      	bhi.n	80017d0 <TFT_DrawSymbol+0x124>

    const uint8_t *bitmap = symbol_bitmaps[symbol - 1];
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	3b01      	subs	r3, #1
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4a3e      	ldr	r2, [pc, #248]	@ (80017d8 <TFT_DrawSymbol+0x12c>)
 80016de:	4413      	add	r3, r2
 80016e0:	60bb      	str	r3, [r7, #8]

    // Special handling for battery levels with bars
    if(symbol >= BATTERY_0 && symbol <= BATTERY_100) {
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b0a      	cmp	r3, #10
 80016e6:	d90d      	bls.n	8001704 <TFT_DrawSymbol+0x58>
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d80a      	bhi.n	8001704 <TFT_DrawSymbol+0x58>
        TFT_DrawBatteryWithBars(x, y, symbol, color, size);
 80016ee:	88f8      	ldrh	r0, [r7, #6]
 80016f0:	88b9      	ldrh	r1, [r7, #4]
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	883c      	ldrh	r4, [r7, #0]
 80016f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4623      	mov	r3, r4
 80016fe:	f000 f86d 	bl	80017dc <TFT_DrawBatteryWithBars>
        return;
 8001702:	e066      	b.n	80017d2 <TFT_DrawSymbol+0x126>
    }

    // Special handling for WiFi signals with bars
    if(symbol >= WIFI_0 && symbol <= WIFI_4) {
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d90d      	bls.n	8001726 <TFT_DrawSymbol+0x7a>
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	2b15      	cmp	r3, #21
 800170e:	d80a      	bhi.n	8001726 <TFT_DrawSymbol+0x7a>
        TFT_DrawWifiWithBars(x, y, symbol, color, size);
 8001710:	88f8      	ldrh	r0, [r7, #6]
 8001712:	88b9      	ldrh	r1, [r7, #4]
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	883c      	ldrh	r4, [r7, #0]
 8001718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4623      	mov	r3, r4
 8001720:	f000 f900 	bl	8001924 <TFT_DrawWifiWithBars>
        return;
 8001724:	e055      	b.n	80017d2 <TFT_DrawSymbol+0x126>
    }

    // Standard symbol drawing
    for(uint8_t row = 0; row < 8; row++) {
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e04d      	b.n	80017c8 <TFT_DrawSymbol+0x11c>
        for(uint8_t col = 0; col < 8; col++) {
 800172c:	2300      	movs	r3, #0
 800172e:	73bb      	strb	r3, [r7, #14]
 8001730:	e044      	b.n	80017bc <TFT_DrawSymbol+0x110>
            if(bitmap[row] & (1 << (7 - col))) {
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	fa42 f303 	asr.w	r3, r2, r3
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d033      	beq.n	80017b6 <TFT_DrawSymbol+0x10a>
                if(size == 1) {
 800174e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10e      	bne.n	8001774 <TFT_DrawSymbol+0xc8>
                    TFT_DrawPixel(x + col, y + row, color);
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	b29a      	uxth	r2, r3
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4413      	add	r3, r2
 800175e:	b298      	uxth	r0, r3
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	b29a      	uxth	r2, r3
 8001764:	88bb      	ldrh	r3, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	883a      	ldrh	r2, [r7, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff ff45 	bl	80015fc <TFT_DrawPixel>
 8001772:	e020      	b.n	80017b6 <TFT_DrawSymbol+0x10a>
                } else {
                    TFT_DrawFilledRect(x + col * size, y + row * size, size, size, color);
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	b29a      	uxth	r2, r3
 8001778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800177c:	b29b      	uxth	r3, r3
 800177e:	fb12 f303 	smulbb	r3, r2, r3
 8001782:	b29a      	uxth	r2, r3
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	4413      	add	r3, r2
 8001788:	b298      	uxth	r0, r3
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	b29a      	uxth	r2, r3
 800178e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001792:	b29b      	uxth	r3, r3
 8001794:	fb12 f303 	smulbb	r3, r2, r3
 8001798:	b29a      	uxth	r2, r3
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	b299      	uxth	r1, r3
 80017a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017aa:	b29c      	uxth	r4, r3
 80017ac:	883b      	ldrh	r3, [r7, #0]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4623      	mov	r3, r4
 80017b2:	f000 fa25 	bl	8001c00 <TFT_DrawFilledRect>
        for(uint8_t col = 0; col < 8; col++) {
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73bb      	strb	r3, [r7, #14]
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d9b7      	bls.n	8001732 <TFT_DrawSymbol+0x86>
    for(uint8_t row = 0; row < 8; row++) {
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	3301      	adds	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d9ae      	bls.n	800172c <TFT_DrawSymbol+0x80>
 80017ce:	e000      	b.n	80017d2 <TFT_DrawSymbol+0x126>
    if(symbol < 1 || symbol > 26) return; // Updated range check
 80017d0:	bf00      	nop
                }
            }
        }
    }
}
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	0802b1f8 	.word	0x0802b1f8

080017dc <TFT_DrawBatteryWithBars>:

// Helper function for battery with bars
void TFT_DrawBatteryWithBars(uint16_t x, uint16_t y, uint8_t battery_level, uint16_t color, uint8_t size) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	4604      	mov	r4, r0
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	4603      	mov	r3, r0
 80017f0:	80bb      	strh	r3, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
 80017f6:	4613      	mov	r3, r2
 80017f8:	803b      	strh	r3, [r7, #0]
    // Draw battery outline
    uint16_t battery_width = 8 * size;
 80017fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017fe:	b29b      	uxth	r3, r3
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	82bb      	strh	r3, [r7, #20]
    uint16_t battery_height = 4 * size;
 8001804:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001808:	b29b      	uxth	r3, r3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	827b      	strh	r3, [r7, #18]
    uint16_t tip_width = 1 * size;
 800180e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001812:	823b      	strh	r3, [r7, #16]
    uint16_t tip_height = 2 * size;
 8001814:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	81fb      	strh	r3, [r7, #14]

    // Battery tip
    TFT_DrawFilledRect(x + battery_width, y + size, tip_width, tip_height, color);
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	8abb      	ldrh	r3, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	b298      	uxth	r0, r3
 8001826:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800182a:	b29a      	uxth	r2, r3
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	b299      	uxth	r1, r3
 8001832:	89fc      	ldrh	r4, [r7, #14]
 8001834:	8a3a      	ldrh	r2, [r7, #16]
 8001836:	883b      	ldrh	r3, [r7, #0]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4623      	mov	r3, r4
 800183c:	f000 f9e0 	bl	8001c00 <TFT_DrawFilledRect>

    // Battery body
    TFT_DrawRect(x, y, battery_width, battery_height, color);
 8001840:	8a7c      	ldrh	r4, [r7, #18]
 8001842:	8aba      	ldrh	r2, [r7, #20]
 8001844:	88b9      	ldrh	r1, [r7, #4]
 8001846:	88f8      	ldrh	r0, [r7, #6]
 8001848:	883b      	ldrh	r3, [r7, #0]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4623      	mov	r3, r4
 800184e:	f000 f989 	bl	8001b64 <TFT_DrawRect>

    // Calculate fill level based on battery level
    uint8_t fill_bars = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    switch(battery_level) {
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	3b0b      	subs	r3, #11
 800185a:	2b04      	cmp	r3, #4
 800185c:	d81b      	bhi.n	8001896 <TFT_DrawBatteryWithBars+0xba>
 800185e:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <TFT_DrawBatteryWithBars+0x88>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001879 	.word	0x08001879
 8001868:	0800187f 	.word	0x0800187f
 800186c:	08001885 	.word	0x08001885
 8001870:	0800188b 	.word	0x0800188b
 8001874:	08001891 	.word	0x08001891
        case BATTERY_0:    fill_bars = 0; break;
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
 800187c:	e00e      	b.n	800189c <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_25:   fill_bars = 1; break;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
 8001882:	e00b      	b.n	800189c <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_50:   fill_bars = 2; break;
 8001884:	2302      	movs	r3, #2
 8001886:	75fb      	strb	r3, [r7, #23]
 8001888:	e008      	b.n	800189c <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_75:   fill_bars = 3; break;
 800188a:	2303      	movs	r3, #3
 800188c:	75fb      	strb	r3, [r7, #23]
 800188e:	e005      	b.n	800189c <TFT_DrawBatteryWithBars+0xc0>
        case BATTERY_100:  fill_bars = 4; break;
 8001890:	2304      	movs	r3, #4
 8001892:	75fb      	strb	r3, [r7, #23]
 8001894:	e002      	b.n	800189c <TFT_DrawBatteryWithBars+0xc0>
        default:           fill_bars = 0; break;
 8001896:	2300      	movs	r3, #0
 8001898:	75fb      	strb	r3, [r7, #23]
 800189a:	bf00      	nop
    }

    // Draw fill bars
    if(fill_bars > 0) {
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03c      	beq.n	800191c <TFT_DrawBatteryWithBars+0x140>
        uint16_t bar_width = (battery_width - 2 * size) / 4;
 80018a2:	8aba      	ldrh	r2, [r7, #20]
 80018a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da00      	bge.n	80018b2 <TFT_DrawBatteryWithBars+0xd6>
 80018b0:	3303      	adds	r3, #3
 80018b2:	109b      	asrs	r3, r3, #2
 80018b4:	81bb      	strh	r3, [r7, #12]
        uint16_t bar_spacing = 1 * size;
 80018b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018ba:	817b      	strh	r3, [r7, #10]
        uint16_t fill_height = battery_height - 2 * size;
 80018bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	8a7a      	ldrh	r2, [r7, #18]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	813b      	strh	r3, [r7, #8]

        for(uint8_t i = 0; i < fill_bars; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	75bb      	strb	r3, [r7, #22]
 80018d0:	e020      	b.n	8001914 <TFT_DrawBatteryWithBars+0x138>
            TFT_DrawFilledRect(x + size + i * (bar_width + bar_spacing),
 80018d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4413      	add	r3, r2
 80018dc:	b29a      	uxth	r2, r3
 80018de:	7dbb      	ldrb	r3, [r7, #22]
 80018e0:	b299      	uxth	r1, r3
 80018e2:	89b8      	ldrh	r0, [r7, #12]
 80018e4:	897b      	ldrh	r3, [r7, #10]
 80018e6:	4403      	add	r3, r0
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	fb11 f303 	smulbb	r3, r1, r3
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	b298      	uxth	r0, r3
 80018f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	b299      	uxth	r1, r3
 8001900:	893c      	ldrh	r4, [r7, #8]
 8001902:	89ba      	ldrh	r2, [r7, #12]
 8001904:	883b      	ldrh	r3, [r7, #0]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4623      	mov	r3, r4
 800190a:	f000 f979 	bl	8001c00 <TFT_DrawFilledRect>
        for(uint8_t i = 0; i < fill_bars; i++) {
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	3301      	adds	r3, #1
 8001912:	75bb      	strb	r3, [r7, #22]
 8001914:	7dba      	ldrb	r2, [r7, #22]
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3da      	bcc.n	80018d2 <TFT_DrawBatteryWithBars+0xf6>
                              bar_width,
                              fill_height,
                              color);
        }
    }
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}

08001924 <TFT_DrawWifiWithBars>:

// Helper function for WiFi with bars
void TFT_DrawWifiWithBars(uint16_t x, uint16_t y, uint8_t wifi_strength, uint16_t color, uint8_t size) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b087      	sub	sp, #28
 8001928:	af02      	add	r7, sp, #8
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4603      	mov	r3, r0
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	4613      	mov	r3, r2
 8001940:	803b      	strh	r3, [r7, #0]
    uint8_t bars = wifi_strength - WIFI_0;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	3b11      	subs	r3, #17
 8001946:	73fb      	strb	r3, [r7, #15]

    // Draw WiFi arcs based on signal strength
    if(bars >= 1) {
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d014      	beq.n	8001978 <TFT_DrawWifiWithBars+0x54>
        // Outer arc (largest)
        TFT_DrawArc(x + 4*size, y + 4*size, 4*size, 225, 315, color);
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	18d0      	adds	r0, r2, r3
 8001958:	88ba      	ldrh	r2, [r7, #4]
 800195a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	18d1      	adds	r1, r2, r3
 8001962:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001966:	009a      	lsls	r2, r3, #2
 8001968:	883b      	ldrh	r3, [r7, #0]
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	f240 133b 	movw	r3, #315	@ 0x13b
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	23e1      	movs	r3, #225	@ 0xe1
 8001974:	f000 f85c 	bl	8001a30 <TFT_DrawArc>
    }
    if(bars >= 2) {
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d916      	bls.n	80019ac <TFT_DrawWifiWithBars+0x88>
        // Middle arc
        TFT_DrawArc(x + 4*size, y + 4*size, 3*size, 225, 315, color);
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	18d0      	adds	r0, r2, r3
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	18d1      	adds	r1, r2, r3
 8001992:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	441a      	add	r2, r3
 800199c:	883b      	ldrh	r3, [r7, #0]
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	f240 133b 	movw	r3, #315	@ 0x13b
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	23e1      	movs	r3, #225	@ 0xe1
 80019a8:	f000 f842 	bl	8001a30 <TFT_DrawArc>
    }
    if(bars >= 3) {
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d914      	bls.n	80019dc <TFT_DrawWifiWithBars+0xb8>
        // Inner arc
        TFT_DrawArc(x + 4*size, y + 4*size, 2*size, 225, 315, color);
 80019b2:	88fa      	ldrh	r2, [r7, #6]
 80019b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	18d0      	adds	r0, r2, r3
 80019bc:	88ba      	ldrh	r2, [r7, #4]
 80019be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	18d1      	adds	r1, r2, r3
 80019c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019ca:	005a      	lsls	r2, r3, #1
 80019cc:	883b      	ldrh	r3, [r7, #0]
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f240 133b 	movw	r3, #315	@ 0x13b
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	23e1      	movs	r3, #225	@ 0xe1
 80019d8:	f000 f82a 	bl	8001a30 <TFT_DrawArc>
    }
    if(bars >= 4) {
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d922      	bls.n	8001a28 <TFT_DrawWifiWithBars+0x104>
        // Center dot
        TFT_DrawFilledRect(x + 3*size, y + 3*size, 2*size, 2*size, color);
 80019e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	0052      	lsls	r2, r2, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4413      	add	r3, r2
 80019f4:	b298      	uxth	r0, r3
 80019f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	b29c      	uxth	r4, r3
 8001a1e:	883b      	ldrh	r3, [r7, #0]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4623      	mov	r3, r4
 8001a24:	f000 f8ec 	bl	8001c00 <TFT_DrawFilledRect>
    }
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <TFT_DrawArc>:

// Simple arc drawing function for WiFi
void TFT_DrawArc(uint16_t x, uint16_t y, uint16_t radius, uint16_t start_angle, uint16_t end_angle, uint16_t color) {
 8001a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4623      	mov	r3, r4
 8001a42:	80fb      	strh	r3, [r7, #6]
 8001a44:	4603      	mov	r3, r0
 8001a46:	80bb      	strh	r3, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	803b      	strh	r3, [r7, #0]
    // Simplified arc drawing - in real implementation, use proper arc algorithm
    for(uint16_t angle = start_angle; angle <= end_angle; angle += 5) {
 8001a50:	883b      	ldrh	r3, [r7, #0]
 8001a52:	82fb      	strh	r3, [r7, #22]
 8001a54:	e074      	b.n	8001b40 <TFT_DrawArc+0x110>
        float rad = angle * 3.14159 / 180;
 8001a56:	8afb      	ldrh	r3, [r7, #22]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd63 	bl	8000524 <__aeabi_i2d>
 8001a5e:	a33f      	add	r3, pc, #252	@ (adr r3, 8001b5c <TFT_DrawArc+0x12c>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fdc8 	bl	80005f8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b38      	ldr	r3, [pc, #224]	@ (8001b58 <TFT_DrawArc+0x128>)
 8001a76:	f7fe fee9 	bl	800084c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f89b 	bl	8000bbc <__aeabi_d2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	613b      	str	r3, [r7, #16]
        uint16_t px = x + radius * cos(rad);
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd49 	bl	8000524 <__aeabi_i2d>
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd43 	bl	8000524 <__aeabi_i2d>
 8001a9e:	4680      	mov	r8, r0
 8001aa0:	4689      	mov	r9, r1
 8001aa2:	6938      	ldr	r0, [r7, #16]
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	ec43 2b10 	vmov	d0, r2, r3
 8001ab0:	f002 fa52 	bl	8003f58 <cos>
 8001ab4:	ec53 2b10 	vmov	r2, r3, d0
 8001ab8:	4640      	mov	r0, r8
 8001aba:	4649      	mov	r1, r9
 8001abc:	f7fe fd9c 	bl	80005f8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fbe0 	bl	800028c <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f852 	bl	8000b7c <__aeabi_d2uiz>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	81fb      	strh	r3, [r7, #14]
        uint16_t py = y + radius * sin(rad);
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd20 	bl	8000524 <__aeabi_i2d>
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd1a 	bl	8000524 <__aeabi_i2d>
 8001af0:	4680      	mov	r8, r0
 8001af2:	4689      	mov	r9, r1
 8001af4:	6938      	ldr	r0, [r7, #16]
 8001af6:	f7fe fd27 	bl	8000548 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	ec43 2b10 	vmov	d0, r2, r3
 8001b02:	f002 fa7d 	bl	8004000 <sin>
 8001b06:	ec53 2b10 	vmov	r2, r3, d0
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	f7fe fd73 	bl	80005f8 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fbb7 	bl	800028c <__adddf3>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff f829 	bl	8000b7c <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	81bb      	strh	r3, [r7, #12]
        TFT_DrawPixel(px, py, color);
 8001b2e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b30:	89b9      	ldrh	r1, [r7, #12]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd61 	bl	80015fc <TFT_DrawPixel>
    for(uint16_t angle = start_angle; angle <= end_angle; angle += 5) {
 8001b3a:	8afb      	ldrh	r3, [r7, #22]
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	82fb      	strh	r3, [r7, #22]
 8001b40:	8afa      	ldrh	r2, [r7, #22]
 8001b42:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d986      	bls.n	8001a56 <TFT_DrawArc+0x26>
    }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	40668000 	.word	0x40668000
 8001b5c:	f01b866e 	.word	0xf01b866e
 8001b60:	400921f9 	.word	0x400921f9

08001b64 <TFT_DrawRect>:
    uint16_t text_width = strlen(str) * spacing;
    uint16_t x = (width - text_width) / 2;
    TFT_DrawStringSize(x, y, str, color, bg, font_size);
}

void TFT_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4623      	mov	r3, r4
 8001b74:	80fb      	strh	r3, [r7, #6]
 8001b76:	4603      	mov	r3, r0
 8001b78:	80bb      	strh	r3, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	803b      	strh	r3, [r7, #0]
    for(uint16_t i = x; i < x + w; i++) {
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	81fb      	strh	r3, [r7, #14]
 8001b86:	e013      	b.n	8001bb0 <TFT_DrawRect+0x4c>
        TFT_DrawPixel(i, y, color);
 8001b88:	8c3a      	ldrh	r2, [r7, #32]
 8001b8a:	88b9      	ldrh	r1, [r7, #4]
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fd34 	bl	80015fc <TFT_DrawPixel>
        TFT_DrawPixel(i, y + h - 1, color);
 8001b94:	88ba      	ldrh	r2, [r7, #4]
 8001b96:	883b      	ldrh	r3, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	8c3a      	ldrh	r2, [r7, #32]
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fd29 	bl	80015fc <TFT_DrawPixel>
    for(uint16_t i = x; i < x + w; i++) {
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	3301      	adds	r3, #1
 8001bae:	81fb      	strh	r3, [r7, #14]
 8001bb0:	89fa      	ldrh	r2, [r7, #14]
 8001bb2:	88f9      	ldrh	r1, [r7, #6]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbe5      	blt.n	8001b88 <TFT_DrawRect+0x24>
    }
    for(uint16_t i = y; i < y + h; i++) {
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	81bb      	strh	r3, [r7, #12]
 8001bc0:	e013      	b.n	8001bea <TFT_DrawRect+0x86>
        TFT_DrawPixel(x, i, color);
 8001bc2:	8c3a      	ldrh	r2, [r7, #32]
 8001bc4:	89b9      	ldrh	r1, [r7, #12]
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fd17 	bl	80015fc <TFT_DrawPixel>
        TFT_DrawPixel(x + w - 1, i, color);
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	8c3a      	ldrh	r2, [r7, #32]
 8001bdc:	89b9      	ldrh	r1, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fd0c 	bl	80015fc <TFT_DrawPixel>
    for(uint16_t i = y; i < y + h; i++) {
 8001be4:	89bb      	ldrh	r3, [r7, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	81bb      	strh	r3, [r7, #12]
 8001bea:	89ba      	ldrh	r2, [r7, #12]
 8001bec:	88b9      	ldrh	r1, [r7, #4]
 8001bee:	883b      	ldrh	r3, [r7, #0]
 8001bf0:	440b      	add	r3, r1
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbe5      	blt.n	8001bc2 <TFT_DrawRect+0x5e>
    }
}
 8001bf6:	bf00      	nop
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd90      	pop	{r4, r7, pc}

08001c00 <TFT_DrawFilledRect>:

void TFT_DrawFilledRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4604      	mov	r4, r0
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4623      	mov	r3, r4
 8001c10:	80fb      	strh	r3, [r7, #6]
 8001c12:	4603      	mov	r3, r0
 8001c14:	80bb      	strh	r3, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	803b      	strh	r3, [r7, #0]
    // Boundary checking and clipping
    if (x >= TFT_GetWidth() || y >= TFT_GetHeight()) return;
 8001c1e:	f000 f8b5 	bl	8001d8c <TFT_GetWidth>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	f080 808e 	bcs.w	8001d4a <TFT_DrawFilledRect+0x14a>
 8001c2e:	f000 f8c1 	bl	8001db4 <TFT_GetHeight>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	f080 8086 	bcs.w	8001d4a <TFT_DrawFilledRect+0x14a>

    // Clip rectangle to screen boundaries
    uint16_t x_end = x + w;
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4413      	add	r3, r2
 8001c44:	82fb      	strh	r3, [r7, #22]
    uint16_t y_end = y + h;
 8001c46:	88ba      	ldrh	r2, [r7, #4]
 8001c48:	883b      	ldrh	r3, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	82bb      	strh	r3, [r7, #20]

    if (x_end > TFT_GetWidth()) x_end = TFT_GetWidth();
 8001c4e:	f000 f89d 	bl	8001d8c <TFT_GetWidth>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	8afb      	ldrh	r3, [r7, #22]
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d903      	bls.n	8001c64 <TFT_DrawFilledRect+0x64>
 8001c5c:	f000 f896 	bl	8001d8c <TFT_GetWidth>
 8001c60:	4603      	mov	r3, r0
 8001c62:	82fb      	strh	r3, [r7, #22]
    if (y_end > TFT_GetHeight()) y_end = TFT_GetHeight();
 8001c64:	f000 f8a6 	bl	8001db4 <TFT_GetHeight>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	8abb      	ldrh	r3, [r7, #20]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d903      	bls.n	8001c7a <TFT_DrawFilledRect+0x7a>
 8001c72:	f000 f89f 	bl	8001db4 <TFT_GetHeight>
 8001c76:	4603      	mov	r3, r0
 8001c78:	82bb      	strh	r3, [r7, #20]

    w = x_end - x;
 8001c7a:	8afa      	ldrh	r2, [r7, #22]
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	807b      	strh	r3, [r7, #2]
    h = y_end - y;
 8001c82:	8aba      	ldrh	r2, [r7, #20]
 8001c84:	88bb      	ldrh	r3, [r7, #4]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	803b      	strh	r3, [r7, #0]

    if (w == 0 || h == 0) return;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05e      	beq.n	8001d4e <TFT_DrawFilledRect+0x14e>
 8001c90:	883b      	ldrh	r3, [r7, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d05b      	beq.n	8001d4e <TFT_DrawFilledRect+0x14e>

    // Set address window for the entire rectangle
    TFT_WriteCommand(TFT_CASET); // Column address set
 8001c96:	202a      	movs	r0, #42	@ 0x2a
 8001c98:	f7ff fbea 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData16(x);
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc2a 	bl	80014f8 <TFT_WriteData16>
    TFT_WriteData16(x + w - 1);
 8001ca4:	88fa      	ldrh	r2, [r7, #6]
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	4413      	add	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc21 	bl	80014f8 <TFT_WriteData16>

    TFT_WriteCommand(TFT_RASET); // Row address set
 8001cb6:	202b      	movs	r0, #43	@ 0x2b
 8001cb8:	f7ff fbda 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData16(y);
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fc1a 	bl	80014f8 <TFT_WriteData16>
    TFT_WriteData16(y + h - 1);
 8001cc4:	88ba      	ldrh	r2, [r7, #4]
 8001cc6:	883b      	ldrh	r3, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fc11 	bl	80014f8 <TFT_WriteData16>

    TFT_WriteCommand(TFT_RAMWR); // Memory write
 8001cd6:	202c      	movs	r0, #44	@ 0x2c
 8001cd8:	f7ff fbca 	bl	8001470 <TFT_WriteCommand>

    // Send all pixel data at once
    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET); // Data mode
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2102      	movs	r1, #2
 8001ce0:	481d      	ldr	r0, [pc, #116]	@ (8001d58 <TFT_DrawFilledRect+0x158>)
 8001ce2:	f000 fd97 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET); // CS low
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2110      	movs	r1, #16
 8001cea:	481b      	ldr	r0, [pc, #108]	@ (8001d58 <TFT_DrawFilledRect+0x158>)
 8001cec:	f000 fd92 	bl	8002814 <HAL_GPIO_WritePin>

    uint32_t total_pixels = w * h;
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	883a      	ldrh	r2, [r7, #0]
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	60fb      	str	r3, [r7, #12]
    uint8_t color_high = color >> 8;
 8001cfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	72fb      	strb	r3, [r7, #11]
    uint8_t color_low = color & 0xFF;
 8001d04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	72bb      	strb	r3, [r7, #10]

    // Send pixel data in chunks to avoid large buffer allocation
    for(uint32_t i = 0; i < total_pixels; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e012      	b.n	8001d36 <TFT_DrawFilledRect+0x136>
        HAL_SPI_Transmit(&hspi1, &color_high, 1, HAL_MAX_DELAY);
 8001d10:	f107 010b 	add.w	r1, r7, #11
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <TFT_DrawFilledRect+0x15c>)
 8001d1c:	f001 fa41 	bl	80031a2 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&hspi1, &color_low, 1, HAL_MAX_DELAY);
 8001d20:	f107 010a 	add.w	r1, r7, #10
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	2201      	movs	r2, #1
 8001d2a:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <TFT_DrawFilledRect+0x15c>)
 8001d2c:	f001 fa39 	bl	80031a2 <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < total_pixels; i++) {
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	3301      	adds	r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3e8      	bcc.n	8001d10 <TFT_DrawFilledRect+0x110>
    }

    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET); // CS high
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2110      	movs	r1, #16
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <TFT_DrawFilledRect+0x158>)
 8001d44:	f000 fd66 	bl	8002814 <HAL_GPIO_WritePin>
 8001d48:	e002      	b.n	8001d50 <TFT_DrawFilledRect+0x150>
    if (x >= TFT_GetWidth() || y >= TFT_GetHeight()) return;
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <TFT_DrawFilledRect+0x150>
    if (w == 0 || h == 0) return;
 8001d4e:	bf00      	nop
}
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	2000007c 	.word	0x2000007c

08001d60 <TFT_SetRotation>:
    uint16_t y = (screen_height - h) / 2;
    TFT_DrawRect(x, y, w, h, color);
}


void TFT_SetRotation(uint8_t rotation) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
    tft_rotation = rotation;
 8001d6a:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <TFT_SetRotation+0x28>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	7013      	strb	r3, [r2, #0]
    TFT_WriteCommand(TFT_MADCTL);
 8001d70:	2036      	movs	r0, #54	@ 0x36
 8001d72:	f7ff fb7d 	bl	8001470 <TFT_WriteCommand>
    TFT_WriteData(rotation);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb9b 	bl	80014b4 <TFT_WriteData>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000004 	.word	0x20000004

08001d8c <TFT_GetWidth>:

void TFT_Rotate0(void) {
    TFT_SetRotation(TFT_ROTATION_0);
}

uint16_t TFT_GetWidth(void) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
    switch(tft_rotation) {
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <TFT_GetWidth+0x24>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b48      	cmp	r3, #72	@ 0x48
 8001d96:	d001      	beq.n	8001d9c <TFT_GetWidth+0x10>
 8001d98:	2b88      	cmp	r3, #136	@ 0x88
 8001d9a:	d102      	bne.n	8001da2 <TFT_GetWidth+0x16>
        case TFT_ROTATION_0:
        case TFT_ROTATION_180:
            return TFT_WIDTH_LANDSCAPE;
 8001d9c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001da0:	e000      	b.n	8001da4 <TFT_GetWidth+0x18>
        case TFT_ROTATION_90:
        case TFT_ROTATION_270:
        default:
            return TFT_WIDTH_PORTRAIT;
 8001da2:	23f0      	movs	r3, #240	@ 0xf0
    }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000004 	.word	0x20000004

08001db4 <TFT_GetHeight>:

uint16_t TFT_GetHeight(void) {
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
    switch(tft_rotation) {
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <TFT_GetHeight+0x24>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b48      	cmp	r3, #72	@ 0x48
 8001dbe:	d001      	beq.n	8001dc4 <TFT_GetHeight+0x10>
 8001dc0:	2b88      	cmp	r3, #136	@ 0x88
 8001dc2:	d101      	bne.n	8001dc8 <TFT_GetHeight+0x14>
        case TFT_ROTATION_0:
        case TFT_ROTATION_180:
            return TFT_HEIGHT_LANDSCAPE;
 8001dc4:	23f0      	movs	r3, #240	@ 0xf0
 8001dc6:	e001      	b.n	8001dcc <TFT_GetHeight+0x18>
        case TFT_ROTATION_90:
        case TFT_ROTATION_270:
        default:
            return TFT_HEIGHT_PORTRAIT;
 8001dc8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
    }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000004 	.word	0x20000004

08001ddc <TFT_printf>:
 *
 * @example:
 * TFT_printf(10, 10, TFT_WHITE, TRANSPARENT, 2, "Score: %d", score);
 * TFT_printf(50, 50, TFT_RED, TFT_BLACK, 1, "Temp: %.1f°C", temperature);
 */
void TFT_printf(uint16_t x, uint16_t y, uint16_t color, uint16_t bg_color, uint8_t font_scale, const char *format, ...) {
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b0ab      	sub	sp, #172	@ 0xac
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	4604      	mov	r4, r0
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4623      	mov	r3, r4
 8001dec:	80fb      	strh	r3, [r7, #6]
 8001dee:	4603      	mov	r3, r0
 8001df0:	80bb      	strh	r3, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]
 8001df6:	4613      	mov	r3, r2
 8001df8:	803b      	strh	r3, [r7, #0]
    char buffer[128];
    va_list args;

    va_start(args, format);
 8001dfa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001dfe:	613b      	str	r3, [r7, #16]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001e00:	f107 0014 	add.w	r0, r7, #20
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	f001 fc18 	bl	8003640 <vsniprintf>
    va_end(args);

    if (bg_color != TRANSPARENT) {
 8001e10:	883b      	ldrh	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <TFT_printf+0x60>
        uint16_t text_width, text_height;
        TFT_CalculateTextSize(buffer, font_scale, &text_width, &text_height);
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	f107 020e 	add.w	r2, r7, #14
 8001e1e:	f897 10b0 	ldrb.w	r1, [r7, #176]	@ 0xb0
 8001e22:	f107 0014 	add.w	r0, r7, #20
 8001e26:	f000 f85d 	bl	8001ee4 <TFT_CalculateTextSize>
        TFT_DrawFilledRect(x, y, text_width, text_height, bg_color);
 8001e2a:	89fa      	ldrh	r2, [r7, #14]
 8001e2c:	89bc      	ldrh	r4, [r7, #12]
 8001e2e:	88b9      	ldrh	r1, [r7, #4]
 8001e30:	88f8      	ldrh	r0, [r7, #6]
 8001e32:	883b      	ldrh	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4623      	mov	r3, r4
 8001e38:	f7ff fee2 	bl	8001c00 <TFT_DrawFilledRect>
    }

    uint16_t current_x = x;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    const char *current_char = buffer;
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    while (*current_char) {
 8001e4a:	e03e      	b.n	8001eca <TFT_printf+0xee>
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8001e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b1f      	cmp	r3, #31
 8001e54:	d92a      	bls.n	8001eac <TFT_printf+0xd0>
 8001e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e5e:	d825      	bhi.n	8001eac <TFT_printf+0xd0>
            uint8_t char_index = *current_char - ASCII_START;
 8001e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3b20      	subs	r3, #32
 8001e68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            TFT_DrawCharScaled(current_x, y, *current_char, color, bg_color, font_scale);
 8001e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	887c      	ldrh	r4, [r7, #2]
 8001e74:	88b9      	ldrh	r1, [r7, #4]
 8001e76:	f8b7 009e 	ldrh.w	r0, [r7, #158]	@ 0x9e
 8001e7a:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	883b      	ldrh	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4623      	mov	r3, r4
 8001e86:	f000 f879 	bl	8001f7c <TFT_DrawCharScaled>
            current_x += char_widths[char_index] * font_scale;
 8001e8a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001e8e:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <TFT_printf+0x104>)
 8001e90:	5cd3      	ldrb	r3, [r2, r3]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	fb12 f303 	smulbb	r3, r2, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8001eaa:	e009      	b.n	8001ec0 <TFT_printf+0xe4>
        } else {
            current_x += 4 * font_scale; // Skip unknown chars
 8001eac:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001eba:	4413      	add	r3, r2
 8001ebc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
        }
        current_char++;
 8001ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    while (*current_char) {
 8001eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1bb      	bne.n	8001e4c <TFT_printf+0x70>
    }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	37a4      	adds	r7, #164	@ 0xa4
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	0802b198 	.word	0x0802b198

08001ee4 <TFT_CalculateTextSize>:
 * @example:
 * uint16_t text_width, text_height;
 * TFT_CalculateTextSize("Hello", 2, &text_width, &text_height);
 * // text_width = total width in pixels, text_height = 24 pixels
 */
void TFT_CalculateTextSize(const char *text, uint8_t font_scale, uint16_t *width, uint16_t *height) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	72fb      	strb	r3, [r7, #11]
    *width = 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
    const char *current_char = text;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	617b      	str	r3, [r7, #20]

    while (*current_char) {
 8001efe:	e028      	b.n	8001f52 <TFT_CalculateTextSize+0x6e>
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b1f      	cmp	r3, #31
 8001f06:	d917      	bls.n	8001f38 <TFT_CalculateTextSize+0x54>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f0e:	d813      	bhi.n	8001f38 <TFT_CalculateTextSize+0x54>
            uint8_t char_index = *current_char - ASCII_START;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3b20      	subs	r3, #32
 8001f16:	74fb      	strb	r3, [r7, #19]
            *width += char_widths[char_index] * font_scale;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	4916      	ldr	r1, [pc, #88]	@ (8001f78 <TFT_CalculateTextSize+0x94>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	4619      	mov	r1, r3
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	fb11 f303 	smulbb	r3, r1, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	801a      	strh	r2, [r3, #0]
        if (*current_char >= ASCII_START && *current_char <= ASCII_END) {
 8001f36:	e009      	b.n	8001f4c <TFT_CalculateTextSize+0x68>
        } else {
            *width += 4 * font_scale; // Default width for unknown chars
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	801a      	strh	r2, [r3, #0]
        }
        current_char++;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
    while (*current_char) {
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1d2      	bne.n	8001f00 <TFT_CalculateTextSize+0x1c>
    }

    *height = 12 * font_scale;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	0052      	lsls	r2, r2, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	801a      	strh	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	0802b198 	.word	0x0802b198

08001f7c <TFT_DrawCharScaled>:
 * This function draws a single character from the 12x12 font array.
 * It handles both transparent and solid backgrounds.
 *
 * @example TFT_DrawCharScaled(100, 100, 'A', TFT_WHITE, TRANSPARENT, 2);
 */
static void TFT_DrawCharScaled(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg_color, uint8_t scale) {
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	80fb      	strh	r3, [r7, #6]
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80bb      	strh	r3, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
 8001f96:	4613      	mov	r3, r2
 8001f98:	803b      	strh	r3, [r7, #0]
    // Only handle printable ASCII characters (32-126)
    if (c < ASCII_START || c > ASCII_END) {
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	2b1f      	cmp	r3, #31
 8001f9e:	d902      	bls.n	8001fa6 <TFT_DrawCharScaled+0x2a>
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fa4:	d91b      	bls.n	8001fde <TFT_DrawCharScaled+0x62>
        // Unsupported character - draw as space
        if (bg_color != TRANSPARENT) {
 8001fa6:	8c3b      	ldrh	r3, [r7, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80b0 	beq.w	800210e <TFT_DrawCharScaled+0x192>
            TFT_DrawFilledRect(x, y, 12 * scale, 12 * scale, bg_color);
 8001fae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	0052      	lsls	r2, r2, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	0049      	lsls	r1, r1, #1
 8001fc8:	440b      	add	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	b29c      	uxth	r4, r3
 8001fce:	88b9      	ldrh	r1, [r7, #4]
 8001fd0:	88f8      	ldrh	r0, [r7, #6]
 8001fd2:	8c3b      	ldrh	r3, [r7, #32]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	f7ff fe12 	bl	8001c00 <TFT_DrawFilledRect>
        }
        return;
 8001fdc:	e097      	b.n	800210e <TFT_DrawCharScaled+0x192>
    }

    uint8_t char_index = c - ASCII_START;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	3b20      	subs	r3, #32
 8001fe2:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 12; row++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e08c      	b.n	8002104 <TFT_DrawCharScaled+0x188>
        uint16_t line = font12x12[char_index][row];
 8001fea:	7b7a      	ldrb	r2, [r7, #13]
 8001fec:	7bf9      	ldrb	r1, [r7, #15]
 8001fee:	484a      	ldr	r0, [pc, #296]	@ (8002118 <TFT_DrawCharScaled+0x19c>)
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001ffe:	817b      	strh	r3, [r7, #10]
        for (uint8_t col = 0; col < 12; col++) {
 8002000:	2300      	movs	r3, #0
 8002002:	73bb      	strb	r3, [r7, #14]
 8002004:	e078      	b.n	80020f8 <TFT_DrawCharScaled+0x17c>
            // Read bits from MSB to LSB (left to right)
            if (line & (1 << (11 - col))) {
 8002006:	897a      	ldrh	r2, [r7, #10]
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	f1c3 030b 	rsb	r3, r3, #11
 800200e:	fa42 f303 	asr.w	r3, r2, r3
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d034      	beq.n	8002084 <TFT_DrawCharScaled+0x108>
                // Draw scaled pixel for the character
                if (scale == 1) {
 800201a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10e      	bne.n	8002040 <TFT_DrawCharScaled+0xc4>
                    TFT_DrawPixel(x + col, y + row, color);
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	b29a      	uxth	r2, r3
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4413      	add	r3, r2
 800202a:	b298      	uxth	r0, r3
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	b29a      	uxth	r2, r3
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	b29b      	uxth	r3, r3
 8002036:	883a      	ldrh	r2, [r7, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f7ff fadf 	bl	80015fc <TFT_DrawPixel>
 800203e:	e058      	b.n	80020f2 <TFT_DrawCharScaled+0x176>
                } else {
                    TFT_DrawFilledRect(x + col * scale, y + row * scale, scale, scale, color);
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002048:	b29b      	uxth	r3, r3
 800204a:	fb12 f303 	smulbb	r3, r2, r3
 800204e:	b29a      	uxth	r2, r3
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	4413      	add	r3, r2
 8002054:	b298      	uxth	r0, r3
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	b29a      	uxth	r2, r3
 800205a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800205e:	b29b      	uxth	r3, r3
 8002060:	fb12 f303 	smulbb	r3, r2, r3
 8002064:	b29a      	uxth	r2, r3
 8002066:	88bb      	ldrh	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	b299      	uxth	r1, r3
 800206c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002070:	b29a      	uxth	r2, r3
 8002072:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002076:	b29c      	uxth	r4, r3
 8002078:	883b      	ldrh	r3, [r7, #0]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4623      	mov	r3, r4
 800207e:	f7ff fdbf 	bl	8001c00 <TFT_DrawFilledRect>
 8002082:	e036      	b.n	80020f2 <TFT_DrawCharScaled+0x176>
                }
            } else if (bg_color != TRANSPARENT) {
 8002084:	8c3b      	ldrh	r3, [r7, #32]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d033      	beq.n	80020f2 <TFT_DrawCharScaled+0x176>
                // Draw scaled background pixel
                if (scale == 1) {
 800208a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10e      	bne.n	80020b0 <TFT_DrawCharScaled+0x134>
                    TFT_DrawPixel(x + col, y + row, bg_color);
 8002092:	7bbb      	ldrb	r3, [r7, #14]
 8002094:	b29a      	uxth	r2, r3
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	4413      	add	r3, r2
 800209a:	b298      	uxth	r0, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8c3a      	ldrh	r2, [r7, #32]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7ff faa7 	bl	80015fc <TFT_DrawPixel>
 80020ae:	e020      	b.n	80020f2 <TFT_DrawCharScaled+0x176>
                } else {
                    TFT_DrawFilledRect(x + col * scale, y + row * scale, scale, scale, bg_color);
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	fb12 f303 	smulbb	r3, r2, r3
 80020be:	b29a      	uxth	r2, r3
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4413      	add	r3, r2
 80020c4:	b298      	uxth	r0, r3
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	fb12 f303 	smulbb	r3, r2, r3
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	88bb      	ldrh	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	b299      	uxth	r1, r3
 80020dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020e6:	b29c      	uxth	r4, r3
 80020e8:	8c3b      	ldrh	r3, [r7, #32]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4623      	mov	r3, r4
 80020ee:	f7ff fd87 	bl	8001c00 <TFT_DrawFilledRect>
        for (uint8_t col = 0; col < 12; col++) {
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73bb      	strb	r3, [r7, #14]
 80020f8:	7bbb      	ldrb	r3, [r7, #14]
 80020fa:	2b0b      	cmp	r3, #11
 80020fc:	d983      	bls.n	8002006 <TFT_DrawCharScaled+0x8a>
    for (uint8_t row = 0; row < 12; row++) {
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	3301      	adds	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b0b      	cmp	r3, #11
 8002108:	f67f af6f 	bls.w	8001fea <TFT_DrawCharScaled+0x6e>
 800210c:	e000      	b.n	8002110 <TFT_DrawCharScaled+0x194>
        return;
 800210e:	bf00      	nop
                }
            }
        }
    }
}
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	0802a8b0 	.word	0x0802a8b0

0800211c <TFT_BackgroundImage>:

void TFT_BackgroundImage(uint16_t x, uint16_t y, const uint16_t *background_image, uint16_t w, uint16_t h) {
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	81fb      	strh	r3, [r7, #14]
 800212a:	460b      	mov	r3, r1
 800212c:	81bb      	strh	r3, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
    TFT_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002132:	89fa      	ldrh	r2, [r7, #14]
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4413      	add	r3, r2
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29c      	uxth	r4, r3
 800213e:	89ba      	ldrh	r2, [r7, #12]
 8002140:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002142:	4413      	add	r3, r2
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29b      	uxth	r3, r3
 800214a:	89b9      	ldrh	r1, [r7, #12]
 800214c:	89f8      	ldrh	r0, [r7, #14]
 800214e:	4622      	mov	r2, r4
 8002150:	f7ff fa14 	bl	800157c <TFT_SetAddressWindow>

    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2102      	movs	r1, #2
 8002158:	4819      	ldr	r0, [pc, #100]	@ (80021c0 <TFT_BackgroundImage+0xa4>)
 800215a:	f000 fb5b 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2110      	movs	r1, #16
 8002162:	4817      	ldr	r0, [pc, #92]	@ (80021c0 <TFT_BackgroundImage+0xa4>)
 8002164:	f000 fb56 	bl	8002814 <HAL_GPIO_WritePin>

    for(uint32_t i = 0; i < w * h; i++) {
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e017      	b.n	800219e <TFT_BackgroundImage+0x82>
        uint16_t color = background_image[i];
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	827b      	strh	r3, [r7, #18]
        uint8_t buffer[2] = {color >> 8, color & 0xFF};
 800217a:	8a7b      	ldrh	r3, [r7, #18]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	b29b      	uxth	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	743b      	strb	r3, [r7, #16]
 8002184:	8a7b      	ldrh	r3, [r7, #18]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	747b      	strb	r3, [r7, #17]
        HAL_SPI_Transmit(&hspi1, buffer, 2, 1);
 800218a:	f107 0110 	add.w	r1, r7, #16
 800218e:	2301      	movs	r3, #1
 8002190:	2202      	movs	r2, #2
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <TFT_BackgroundImage+0xa8>)
 8002194:	f001 f805 	bl	80031a2 <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < w * h; i++) {
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d3df      	bcc.n	800216e <TFT_BackgroundImage+0x52>
    }

    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2110      	movs	r1, #16
 80021b2:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <TFT_BackgroundImage+0xa4>)
 80021b4:	f000 fb2e 	bl	8002814 <HAL_GPIO_WritePin>
}
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	40020000 	.word	0x40020000
 80021c4:	2000007c 	.word	0x2000007c

080021c8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Call the clock system initialization function.  ldr   sp, =_estack    		 /* set stack pointer */  bl  SystemInit
 80021c8:	f7ff f8f4 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480b      	ldr	r0, [pc, #44]	@ (80021fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021ce:	490c      	ldr	r1, [pc, #48]	@ (8002200 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002204 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021e4:	4c09      	ldr	r4, [pc, #36]	@ (800220c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f2:	f001 fa41 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7fe fec7 	bl	8000f88 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002204:	0802b4e8 	.word	0x0802b4e8
  ldr r2, =_sbss
 8002208:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800220c:	20000224 	.word	0x20000224

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_Init+0x40>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_Init+0x40>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_Init+0x40>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 f931 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	200f      	movs	r0, #15
 8002244:	f000 f808 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7fe ffde 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_InitTick+0x54>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_InitTick+0x58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f93b 	bl	80024f2 <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d80a      	bhi.n	80022a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228c:	2200      	movs	r2, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f000 f911 	bl	80024ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002298:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <HAL_InitTick+0x5c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000000 	.word	0x20000000
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x20>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x24>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <HAL_IncTick+0x24>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	200000d8 	.word	0x200000d8

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200000d8 	.word	0x200000d8

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff ffee 	bl	80022e0 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d005      	beq.n	800231e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_Delay+0x44>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231e:	bf00      	nop
 8002320:	f7ff ffde 	bl	80022e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d8f7      	bhi.n	8002320 <HAL_Delay+0x28>
  {
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000000c 	.word	0x2000000c

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	@ (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	@ (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	@ 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff47 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff5c 	bl	8002388 <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff8e 	bl	80023f8 <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5d 	bl	80023a4 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ffb0 	bl	8002460 <SysTick_Config>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e159      	b.n	80027dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8148 	bne.w	80027d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a2 	beq.w	80027d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b57      	ldr	r3, [pc, #348]	@ (80027f4 <HAL_GPIO_Init+0x2e8>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4a56      	ldr	r2, [pc, #344]	@ (80027f4 <HAL_GPIO_Init+0x2e8>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a2:	4b54      	ldr	r3, [pc, #336]	@ (80027f4 <HAL_GPIO_Init+0x2e8>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ae:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_GPIO_Init+0x2ec>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a49      	ldr	r2, [pc, #292]	@ (80027fc <HAL_GPIO_Init+0x2f0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d019      	beq.n	800270e <HAL_GPIO_Init+0x202>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a48      	ldr	r2, [pc, #288]	@ (8002800 <HAL_GPIO_Init+0x2f4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0x1fe>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a47      	ldr	r2, [pc, #284]	@ (8002804 <HAL_GPIO_Init+0x2f8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00d      	beq.n	8002706 <HAL_GPIO_Init+0x1fa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a46      	ldr	r2, [pc, #280]	@ (8002808 <HAL_GPIO_Init+0x2fc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <HAL_GPIO_Init+0x1f6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a45      	ldr	r2, [pc, #276]	@ (800280c <HAL_GPIO_Init+0x300>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_GPIO_Init+0x1f2>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x204>
 80026fe:	2307      	movs	r3, #7
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x204>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x204>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x204>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x204>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	@ (80027f8 <HAL_GPIO_Init+0x2ec>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272e:	4b38      	ldr	r3, [pc, #224]	@ (8002810 <HAL_GPIO_Init+0x304>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002752:	4a2f      	ldr	r2, [pc, #188]	@ (8002810 <HAL_GPIO_Init+0x304>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002758:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_GPIO_Init+0x304>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800277c:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <HAL_GPIO_Init+0x304>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002782:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <HAL_GPIO_Init+0x304>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <HAL_GPIO_Init+0x304>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ac:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <HAL_GPIO_Init+0x304>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002810 <HAL_GPIO_Init+0x304>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f aea2 	bls.w	8002528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e267      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e242      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff fcee 	bl	80022e0 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fcea 	bl	80022e0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e207      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fcda 	bl	80022e0 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fcd6 	bl	80022e0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f3      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800295e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c7      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff fc8f 	bl	80022e0 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff fc8b 	bl	80022e0 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a8      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff fc6e 	bl	80022e0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff fc6a 	bl	80022e0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e187      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7ff fc4e 	bl	80022e0 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7ff fc4a 	bl	80022e0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e167      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fc37 	bl	80022e0 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fc33 	bl	80022e0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e150      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fbf3 	bl	80022e0 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff fbef 	bl	80022e0 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e10c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff fbb4 	bl	80022e0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fbb0 	bl	80022e0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0cb      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fb9e 	bl	80022e0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fb9a 	bl	80022e0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fb6e 	bl	80022e0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff fb6a 	bl	80022e0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e087      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7ff fb43 	bl	80022e0 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7ff fb3f 	bl	80022e0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e05c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fb2c 	bl	80022e0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7ff fb28 	bl	80022e0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e045      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e038      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d121      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7ff fa5a 	bl	80022e0 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7ff fa56 	bl	80022e0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff f9ba 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	0802a8a0 	.word	0x0802a8a0
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000008 	.word	0x20000008

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b090      	sub	sp, #64	@ 0x40
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00d      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x40>
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	f200 80a1 	bhi.w	8003070 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x34>
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f36:	e09b      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f3c:	e09b      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3e:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f42:	e098      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d028      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f70:	fb03 f201 	mul.w	r2, r3, r1
 8002f74:	2300      	movs	r3, #0
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a43      	ldr	r2, [pc, #268]	@ (800308c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f84:	460a      	mov	r2, r1
 8002f86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f8a:	4413      	add	r3, r2
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	2200      	movs	r2, #0
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f9e:	f7fd fe5d 	bl	8000c5c <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002faa:	e053      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b35      	ldr	r3, [pc, #212]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	617a      	str	r2, [r7, #20]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fbe:	f04f 0b00 	mov.w	fp, #0
 8002fc2:	4652      	mov	r2, sl
 8002fc4:	465b      	mov	r3, fp
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	ebb2 080a 	subs.w	r8, r2, sl
 8002fde:	eb63 090b 	sbc.w	r9, r3, fp
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8002ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	00eb      	lsls	r3, r5, #3
 8003008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300c:	00e2      	lsls	r2, r4, #3
 800300e:	4614      	mov	r4, r2
 8003010:	461d      	mov	r5, r3
 8003012:	eb14 030a 	adds.w	r3, r4, sl
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	eb45 030b 	adc.w	r3, r5, fp
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800302a:	4629      	mov	r1, r5
 800302c:	028b      	lsls	r3, r1, #10
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003034:	4621      	mov	r1, r4
 8003036:	028a      	lsls	r2, r1, #10
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303e:	2200      	movs	r2, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003048:	f7fd fe08 	bl	8000c5c <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x184>)
 8003072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003078:	4618      	mov	r0, r3
 800307a:	3740      	adds	r7, #64	@ 0x40
 800307c:	46bd      	mov	sp, r7
 800307e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	00f42400 	.word	0x00f42400
 800308c:	017d7840 	.word	0x017d7840

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07b      	b.n	800319a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe f8b8 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0104 	and.w	r1, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	f003 0210 	and.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b2:	f7ff f895 	bl	80022e0 <HAL_GetTick>
 80031b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d001      	beq.n	80031cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	e12a      	b.n	8003422 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_SPI_Transmit+0x36>
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e122      	b.n	8003422 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Transmit+0x48>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e11b      	b.n	8003422 <HAL_SPI_Transmit+0x280>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2203      	movs	r2, #3
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	d10f      	bne.n	800325a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003264:	2b40      	cmp	r3, #64	@ 0x40
 8003266:	d007      	beq.n	8003278 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003280:	d152      	bne.n	8003328 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0xee>
 800328a:	8b7b      	ldrh	r3, [r7, #26]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d145      	bne.n	800331c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032b4:	e032      	b.n	800331c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d112      	bne.n	80032ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032e8:	e018      	b.n	800331c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ea:	f7fe fff9 	bl	80022e0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d803      	bhi.n	8003302 <HAL_SPI_Transmit+0x160>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d102      	bne.n	8003308 <HAL_SPI_Transmit+0x166>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e082      	b.n	8003422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1c7      	bne.n	80032b6 <HAL_SPI_Transmit+0x114>
 8003326:	e053      	b.n	80033d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Transmit+0x194>
 8003330:	8b7b      	ldrh	r3, [r7, #26]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d147      	bne.n	80033c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800335c:	e033      	b.n	80033c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d113      	bne.n	8003394 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003392:	e018      	b.n	80033c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003394:	f7fe ffa4 	bl	80022e0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d803      	bhi.n	80033ac <HAL_SPI_Transmit+0x20a>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d102      	bne.n	80033b2 <HAL_SPI_Transmit+0x210>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e02d      	b.n	8003422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1c6      	bne.n	800335e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8b1 	bl	800353c <SPI_EndRxTxTransaction>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003420:	2300      	movs	r3, #0
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800343c:	f7fe ff50 	bl	80022e0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4413      	add	r3, r2
 800344a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800344c:	f7fe ff48 	bl	80022e0 <HAL_GetTick>
 8003450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003452:	4b39      	ldr	r3, [pc, #228]	@ (8003538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	0d1b      	lsrs	r3, r3, #20
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003462:	e055      	b.n	8003510 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d051      	beq.n	8003510 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800346c:	f7fe ff38 	bl	80022e0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	429a      	cmp	r2, r3
 800347a:	d902      	bls.n	8003482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d13d      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349a:	d111      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a4:	d004      	beq.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ae:	d107      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c8:	d10f      	bne.n	80034ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e018      	b.n	8003530 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e002      	b.n	8003510 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3b01      	subs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	429a      	cmp	r2, r3
 800352c:	d19a      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000000 	.word	0x20000000

0800353c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2201      	movs	r2, #1
 8003550:	2102      	movs	r1, #2
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff ff6a 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e032      	b.n	80035d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800356e:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <SPI_EndRxTxTransaction+0xa0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1b      	ldr	r2, [pc, #108]	@ (80035e0 <SPI_EndRxTxTransaction+0xa4>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	0d5b      	lsrs	r3, r3, #21
 800357a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358c:	d112      	bne.n	80035b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	@ 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff ff47 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d016      	beq.n	80035d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e00f      	b.n	80035d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3b01      	subs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d0f2      	beq.n	80035b4 <SPI_EndRxTxTransaction+0x78>
 80035ce:	e000      	b.n	80035d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80035d0:	bf00      	nop
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000000 	.word	0x20000000
 80035e0:	165e9f81 	.word	0x165e9f81

080035e4 <_vsniprintf_r>:
 80035e4:	b530      	push	{r4, r5, lr}
 80035e6:	4614      	mov	r4, r2
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	b09b      	sub	sp, #108	@ 0x6c
 80035ec:	4605      	mov	r5, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	da05      	bge.n	80035fe <_vsniprintf_r+0x1a>
 80035f2:	238b      	movs	r3, #139	@ 0x8b
 80035f4:	6003      	str	r3, [r0, #0]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	b01b      	add	sp, #108	@ 0x6c
 80035fc:	bd30      	pop	{r4, r5, pc}
 80035fe:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003602:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	9319      	str	r3, [sp, #100]	@ 0x64
 800360c:	bf14      	ite	ne
 800360e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003612:	4623      	moveq	r3, r4
 8003614:	9302      	str	r3, [sp, #8]
 8003616:	9305      	str	r3, [sp, #20]
 8003618:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800361c:	9100      	str	r1, [sp, #0]
 800361e:	9104      	str	r1, [sp, #16]
 8003620:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003624:	4669      	mov	r1, sp
 8003626:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003628:	f000 f9a0 	bl	800396c <_svfiprintf_r>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	bfbc      	itt	lt
 8003630:	238b      	movlt	r3, #139	@ 0x8b
 8003632:	602b      	strlt	r3, [r5, #0]
 8003634:	2c00      	cmp	r4, #0
 8003636:	d0e0      	beq.n	80035fa <_vsniprintf_r+0x16>
 8003638:	9b00      	ldr	r3, [sp, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e7dc      	b.n	80035fa <_vsniprintf_r+0x16>

08003640 <vsniprintf>:
 8003640:	b507      	push	{r0, r1, r2, lr}
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	460a      	mov	r2, r1
 8003648:	4601      	mov	r1, r0
 800364a:	4803      	ldr	r0, [pc, #12]	@ (8003658 <vsniprintf+0x18>)
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f7ff ffc9 	bl	80035e4 <_vsniprintf_r>
 8003652:	b003      	add	sp, #12
 8003654:	f85d fb04 	ldr.w	pc, [sp], #4
 8003658:	20000010 	.word	0x20000010

0800365c <memset>:
 800365c:	4402      	add	r2, r0
 800365e:	4603      	mov	r3, r0
 8003660:	4293      	cmp	r3, r2
 8003662:	d100      	bne.n	8003666 <memset+0xa>
 8003664:	4770      	bx	lr
 8003666:	f803 1b01 	strb.w	r1, [r3], #1
 800366a:	e7f9      	b.n	8003660 <memset+0x4>

0800366c <__errno>:
 800366c:	4b01      	ldr	r3, [pc, #4]	@ (8003674 <__errno+0x8>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000010 	.word	0x20000010

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	@ (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	@ (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	@ (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	@ (80036bc <__libc_init_array+0x44>)
 800368c:	f001 fcdc 	bl	8005048 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	0802b4e0 	.word	0x0802b4e0
 80036b4:	0802b4e0 	.word	0x0802b4e0
 80036b8:	0802b4e0 	.word	0x0802b4e0
 80036bc:	0802b4e4 	.word	0x0802b4e4

080036c0 <__retarget_lock_acquire_recursive>:
 80036c0:	4770      	bx	lr

080036c2 <__retarget_lock_release_recursive>:
 80036c2:	4770      	bx	lr

080036c4 <_free_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4605      	mov	r5, r0
 80036c8:	2900      	cmp	r1, #0
 80036ca:	d041      	beq.n	8003750 <_free_r+0x8c>
 80036cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d0:	1f0c      	subs	r4, r1, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bfb8      	it	lt
 80036d6:	18e4      	addlt	r4, r4, r3
 80036d8:	f000 f8e0 	bl	800389c <__malloc_lock>
 80036dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <_free_r+0x90>)
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	b933      	cbnz	r3, 80036f0 <_free_r+0x2c>
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	6014      	str	r4, [r2, #0]
 80036e6:	4628      	mov	r0, r5
 80036e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036ec:	f000 b8dc 	b.w	80038a8 <__malloc_unlock>
 80036f0:	42a3      	cmp	r3, r4
 80036f2:	d908      	bls.n	8003706 <_free_r+0x42>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	1821      	adds	r1, r4, r0
 80036f8:	428b      	cmp	r3, r1
 80036fa:	bf01      	itttt	eq
 80036fc:	6819      	ldreq	r1, [r3, #0]
 80036fe:	685b      	ldreq	r3, [r3, #4]
 8003700:	1809      	addeq	r1, r1, r0
 8003702:	6021      	streq	r1, [r4, #0]
 8003704:	e7ed      	b.n	80036e2 <_free_r+0x1e>
 8003706:	461a      	mov	r2, r3
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	b10b      	cbz	r3, 8003710 <_free_r+0x4c>
 800370c:	42a3      	cmp	r3, r4
 800370e:	d9fa      	bls.n	8003706 <_free_r+0x42>
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	1850      	adds	r0, r2, r1
 8003714:	42a0      	cmp	r0, r4
 8003716:	d10b      	bne.n	8003730 <_free_r+0x6c>
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	4401      	add	r1, r0
 800371c:	1850      	adds	r0, r2, r1
 800371e:	4283      	cmp	r3, r0
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	d1e0      	bne.n	80036e6 <_free_r+0x22>
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	6053      	str	r3, [r2, #4]
 800372a:	4408      	add	r0, r1
 800372c:	6010      	str	r0, [r2, #0]
 800372e:	e7da      	b.n	80036e6 <_free_r+0x22>
 8003730:	d902      	bls.n	8003738 <_free_r+0x74>
 8003732:	230c      	movs	r3, #12
 8003734:	602b      	str	r3, [r5, #0]
 8003736:	e7d6      	b.n	80036e6 <_free_r+0x22>
 8003738:	6820      	ldr	r0, [r4, #0]
 800373a:	1821      	adds	r1, r4, r0
 800373c:	428b      	cmp	r3, r1
 800373e:	bf04      	itt	eq
 8003740:	6819      	ldreq	r1, [r3, #0]
 8003742:	685b      	ldreq	r3, [r3, #4]
 8003744:	6063      	str	r3, [r4, #4]
 8003746:	bf04      	itt	eq
 8003748:	1809      	addeq	r1, r1, r0
 800374a:	6021      	streq	r1, [r4, #0]
 800374c:	6054      	str	r4, [r2, #4]
 800374e:	e7ca      	b.n	80036e6 <_free_r+0x22>
 8003750:	bd38      	pop	{r3, r4, r5, pc}
 8003752:	bf00      	nop
 8003754:	20000220 	.word	0x20000220

08003758 <sbrk_aligned>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4e0f      	ldr	r6, [pc, #60]	@ (8003798 <sbrk_aligned+0x40>)
 800375c:	460c      	mov	r4, r1
 800375e:	6831      	ldr	r1, [r6, #0]
 8003760:	4605      	mov	r5, r0
 8003762:	b911      	cbnz	r1, 800376a <sbrk_aligned+0x12>
 8003764:	f000 fba4 	bl	8003eb0 <_sbrk_r>
 8003768:	6030      	str	r0, [r6, #0]
 800376a:	4621      	mov	r1, r4
 800376c:	4628      	mov	r0, r5
 800376e:	f000 fb9f 	bl	8003eb0 <_sbrk_r>
 8003772:	1c43      	adds	r3, r0, #1
 8003774:	d103      	bne.n	800377e <sbrk_aligned+0x26>
 8003776:	f04f 34ff 	mov.w	r4, #4294967295
 800377a:	4620      	mov	r0, r4
 800377c:	bd70      	pop	{r4, r5, r6, pc}
 800377e:	1cc4      	adds	r4, r0, #3
 8003780:	f024 0403 	bic.w	r4, r4, #3
 8003784:	42a0      	cmp	r0, r4
 8003786:	d0f8      	beq.n	800377a <sbrk_aligned+0x22>
 8003788:	1a21      	subs	r1, r4, r0
 800378a:	4628      	mov	r0, r5
 800378c:	f000 fb90 	bl	8003eb0 <_sbrk_r>
 8003790:	3001      	adds	r0, #1
 8003792:	d1f2      	bne.n	800377a <sbrk_aligned+0x22>
 8003794:	e7ef      	b.n	8003776 <sbrk_aligned+0x1e>
 8003796:	bf00      	nop
 8003798:	2000021c 	.word	0x2000021c

0800379c <_malloc_r>:
 800379c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037a0:	1ccd      	adds	r5, r1, #3
 80037a2:	f025 0503 	bic.w	r5, r5, #3
 80037a6:	3508      	adds	r5, #8
 80037a8:	2d0c      	cmp	r5, #12
 80037aa:	bf38      	it	cc
 80037ac:	250c      	movcc	r5, #12
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	4606      	mov	r6, r0
 80037b2:	db01      	blt.n	80037b8 <_malloc_r+0x1c>
 80037b4:	42a9      	cmp	r1, r5
 80037b6:	d904      	bls.n	80037c2 <_malloc_r+0x26>
 80037b8:	230c      	movs	r3, #12
 80037ba:	6033      	str	r3, [r6, #0]
 80037bc:	2000      	movs	r0, #0
 80037be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003898 <_malloc_r+0xfc>
 80037c6:	f000 f869 	bl	800389c <__malloc_lock>
 80037ca:	f8d8 3000 	ldr.w	r3, [r8]
 80037ce:	461c      	mov	r4, r3
 80037d0:	bb44      	cbnz	r4, 8003824 <_malloc_r+0x88>
 80037d2:	4629      	mov	r1, r5
 80037d4:	4630      	mov	r0, r6
 80037d6:	f7ff ffbf 	bl	8003758 <sbrk_aligned>
 80037da:	1c43      	adds	r3, r0, #1
 80037dc:	4604      	mov	r4, r0
 80037de:	d158      	bne.n	8003892 <_malloc_r+0xf6>
 80037e0:	f8d8 4000 	ldr.w	r4, [r8]
 80037e4:	4627      	mov	r7, r4
 80037e6:	2f00      	cmp	r7, #0
 80037e8:	d143      	bne.n	8003872 <_malloc_r+0xd6>
 80037ea:	2c00      	cmp	r4, #0
 80037ec:	d04b      	beq.n	8003886 <_malloc_r+0xea>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	4639      	mov	r1, r7
 80037f2:	4630      	mov	r0, r6
 80037f4:	eb04 0903 	add.w	r9, r4, r3
 80037f8:	f000 fb5a 	bl	8003eb0 <_sbrk_r>
 80037fc:	4581      	cmp	r9, r0
 80037fe:	d142      	bne.n	8003886 <_malloc_r+0xea>
 8003800:	6821      	ldr	r1, [r4, #0]
 8003802:	1a6d      	subs	r5, r5, r1
 8003804:	4629      	mov	r1, r5
 8003806:	4630      	mov	r0, r6
 8003808:	f7ff ffa6 	bl	8003758 <sbrk_aligned>
 800380c:	3001      	adds	r0, #1
 800380e:	d03a      	beq.n	8003886 <_malloc_r+0xea>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	442b      	add	r3, r5
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	f8d8 3000 	ldr.w	r3, [r8]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	bb62      	cbnz	r2, 8003878 <_malloc_r+0xdc>
 800381e:	f8c8 7000 	str.w	r7, [r8]
 8003822:	e00f      	b.n	8003844 <_malloc_r+0xa8>
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	1b52      	subs	r2, r2, r5
 8003828:	d420      	bmi.n	800386c <_malloc_r+0xd0>
 800382a:	2a0b      	cmp	r2, #11
 800382c:	d917      	bls.n	800385e <_malloc_r+0xc2>
 800382e:	1961      	adds	r1, r4, r5
 8003830:	42a3      	cmp	r3, r4
 8003832:	6025      	str	r5, [r4, #0]
 8003834:	bf18      	it	ne
 8003836:	6059      	strne	r1, [r3, #4]
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	bf08      	it	eq
 800383c:	f8c8 1000 	streq.w	r1, [r8]
 8003840:	5162      	str	r2, [r4, r5]
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	4630      	mov	r0, r6
 8003846:	f000 f82f 	bl	80038a8 <__malloc_unlock>
 800384a:	f104 000b 	add.w	r0, r4, #11
 800384e:	1d23      	adds	r3, r4, #4
 8003850:	f020 0007 	bic.w	r0, r0, #7
 8003854:	1ac2      	subs	r2, r0, r3
 8003856:	bf1c      	itt	ne
 8003858:	1a1b      	subne	r3, r3, r0
 800385a:	50a3      	strne	r3, [r4, r2]
 800385c:	e7af      	b.n	80037be <_malloc_r+0x22>
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	42a3      	cmp	r3, r4
 8003862:	bf0c      	ite	eq
 8003864:	f8c8 2000 	streq.w	r2, [r8]
 8003868:	605a      	strne	r2, [r3, #4]
 800386a:	e7eb      	b.n	8003844 <_malloc_r+0xa8>
 800386c:	4623      	mov	r3, r4
 800386e:	6864      	ldr	r4, [r4, #4]
 8003870:	e7ae      	b.n	80037d0 <_malloc_r+0x34>
 8003872:	463c      	mov	r4, r7
 8003874:	687f      	ldr	r7, [r7, #4]
 8003876:	e7b6      	b.n	80037e6 <_malloc_r+0x4a>
 8003878:	461a      	mov	r2, r3
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	42a3      	cmp	r3, r4
 800387e:	d1fb      	bne.n	8003878 <_malloc_r+0xdc>
 8003880:	2300      	movs	r3, #0
 8003882:	6053      	str	r3, [r2, #4]
 8003884:	e7de      	b.n	8003844 <_malloc_r+0xa8>
 8003886:	230c      	movs	r3, #12
 8003888:	6033      	str	r3, [r6, #0]
 800388a:	4630      	mov	r0, r6
 800388c:	f000 f80c 	bl	80038a8 <__malloc_unlock>
 8003890:	e794      	b.n	80037bc <_malloc_r+0x20>
 8003892:	6005      	str	r5, [r0, #0]
 8003894:	e7d6      	b.n	8003844 <_malloc_r+0xa8>
 8003896:	bf00      	nop
 8003898:	20000220 	.word	0x20000220

0800389c <__malloc_lock>:
 800389c:	4801      	ldr	r0, [pc, #4]	@ (80038a4 <__malloc_lock+0x8>)
 800389e:	f7ff bf0f 	b.w	80036c0 <__retarget_lock_acquire_recursive>
 80038a2:	bf00      	nop
 80038a4:	20000218 	.word	0x20000218

080038a8 <__malloc_unlock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	@ (80038b0 <__malloc_unlock+0x8>)
 80038aa:	f7ff bf0a 	b.w	80036c2 <__retarget_lock_release_recursive>
 80038ae:	bf00      	nop
 80038b0:	20000218 	.word	0x20000218

080038b4 <__ssputs_r>:
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	688e      	ldr	r6, [r1, #8]
 80038ba:	461f      	mov	r7, r3
 80038bc:	42be      	cmp	r6, r7
 80038be:	680b      	ldr	r3, [r1, #0]
 80038c0:	4682      	mov	sl, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	4690      	mov	r8, r2
 80038c6:	d82d      	bhi.n	8003924 <__ssputs_r+0x70>
 80038c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038d0:	d026      	beq.n	8003920 <__ssputs_r+0x6c>
 80038d2:	6965      	ldr	r5, [r4, #20]
 80038d4:	6909      	ldr	r1, [r1, #16]
 80038d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038da:	eba3 0901 	sub.w	r9, r3, r1
 80038de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e2:	1c7b      	adds	r3, r7, #1
 80038e4:	444b      	add	r3, r9
 80038e6:	106d      	asrs	r5, r5, #1
 80038e8:	429d      	cmp	r5, r3
 80038ea:	bf38      	it	cc
 80038ec:	461d      	movcc	r5, r3
 80038ee:	0553      	lsls	r3, r2, #21
 80038f0:	d527      	bpl.n	8003942 <__ssputs_r+0x8e>
 80038f2:	4629      	mov	r1, r5
 80038f4:	f7ff ff52 	bl	800379c <_malloc_r>
 80038f8:	4606      	mov	r6, r0
 80038fa:	b360      	cbz	r0, 8003956 <__ssputs_r+0xa2>
 80038fc:	6921      	ldr	r1, [r4, #16]
 80038fe:	464a      	mov	r2, r9
 8003900:	f000 fae6 	bl	8003ed0 <memcpy>
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800390a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800390e:	81a3      	strh	r3, [r4, #12]
 8003910:	6126      	str	r6, [r4, #16]
 8003912:	6165      	str	r5, [r4, #20]
 8003914:	444e      	add	r6, r9
 8003916:	eba5 0509 	sub.w	r5, r5, r9
 800391a:	6026      	str	r6, [r4, #0]
 800391c:	60a5      	str	r5, [r4, #8]
 800391e:	463e      	mov	r6, r7
 8003920:	42be      	cmp	r6, r7
 8003922:	d900      	bls.n	8003926 <__ssputs_r+0x72>
 8003924:	463e      	mov	r6, r7
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	4632      	mov	r2, r6
 800392a:	4641      	mov	r1, r8
 800392c:	f000 faa6 	bl	8003e7c <memmove>
 8003930:	68a3      	ldr	r3, [r4, #8]
 8003932:	1b9b      	subs	r3, r3, r6
 8003934:	60a3      	str	r3, [r4, #8]
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	4433      	add	r3, r6
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	2000      	movs	r0, #0
 800393e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003942:	462a      	mov	r2, r5
 8003944:	f000 fad2 	bl	8003eec <_realloc_r>
 8003948:	4606      	mov	r6, r0
 800394a:	2800      	cmp	r0, #0
 800394c:	d1e0      	bne.n	8003910 <__ssputs_r+0x5c>
 800394e:	6921      	ldr	r1, [r4, #16]
 8003950:	4650      	mov	r0, sl
 8003952:	f7ff feb7 	bl	80036c4 <_free_r>
 8003956:	230c      	movs	r3, #12
 8003958:	f8ca 3000 	str.w	r3, [sl]
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003962:	81a3      	strh	r3, [r4, #12]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	e7e9      	b.n	800393e <__ssputs_r+0x8a>
	...

0800396c <_svfiprintf_r>:
 800396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	4698      	mov	r8, r3
 8003972:	898b      	ldrh	r3, [r1, #12]
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	b09d      	sub	sp, #116	@ 0x74
 8003978:	4607      	mov	r7, r0
 800397a:	460d      	mov	r5, r1
 800397c:	4614      	mov	r4, r2
 800397e:	d510      	bpl.n	80039a2 <_svfiprintf_r+0x36>
 8003980:	690b      	ldr	r3, [r1, #16]
 8003982:	b973      	cbnz	r3, 80039a2 <_svfiprintf_r+0x36>
 8003984:	2140      	movs	r1, #64	@ 0x40
 8003986:	f7ff ff09 	bl	800379c <_malloc_r>
 800398a:	6028      	str	r0, [r5, #0]
 800398c:	6128      	str	r0, [r5, #16]
 800398e:	b930      	cbnz	r0, 800399e <_svfiprintf_r+0x32>
 8003990:	230c      	movs	r3, #12
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	b01d      	add	sp, #116	@ 0x74
 800399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399e:	2340      	movs	r3, #64	@ 0x40
 80039a0:	616b      	str	r3, [r5, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80039a6:	2320      	movs	r3, #32
 80039a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b0:	2330      	movs	r3, #48	@ 0x30
 80039b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b50 <_svfiprintf_r+0x1e4>
 80039b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039ba:	f04f 0901 	mov.w	r9, #1
 80039be:	4623      	mov	r3, r4
 80039c0:	469a      	mov	sl, r3
 80039c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c6:	b10a      	cbz	r2, 80039cc <_svfiprintf_r+0x60>
 80039c8:	2a25      	cmp	r2, #37	@ 0x25
 80039ca:	d1f9      	bne.n	80039c0 <_svfiprintf_r+0x54>
 80039cc:	ebba 0b04 	subs.w	fp, sl, r4
 80039d0:	d00b      	beq.n	80039ea <_svfiprintf_r+0x7e>
 80039d2:	465b      	mov	r3, fp
 80039d4:	4622      	mov	r2, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ff6b 	bl	80038b4 <__ssputs_r>
 80039de:	3001      	adds	r0, #1
 80039e0:	f000 80a7 	beq.w	8003b32 <_svfiprintf_r+0x1c6>
 80039e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039e6:	445a      	add	r2, fp
 80039e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ea:	f89a 3000 	ldrb.w	r3, [sl]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 809f 	beq.w	8003b32 <_svfiprintf_r+0x1c6>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039fe:	f10a 0a01 	add.w	sl, sl, #1
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	9307      	str	r3, [sp, #28]
 8003a06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a0c:	4654      	mov	r4, sl
 8003a0e:	2205      	movs	r2, #5
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	484e      	ldr	r0, [pc, #312]	@ (8003b50 <_svfiprintf_r+0x1e4>)
 8003a16:	f7fc fbe3 	bl	80001e0 <memchr>
 8003a1a:	9a04      	ldr	r2, [sp, #16]
 8003a1c:	b9d8      	cbnz	r0, 8003a56 <_svfiprintf_r+0xea>
 8003a1e:	06d0      	lsls	r0, r2, #27
 8003a20:	bf44      	itt	mi
 8003a22:	2320      	movmi	r3, #32
 8003a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a28:	0711      	lsls	r1, r2, #28
 8003a2a:	bf44      	itt	mi
 8003a2c:	232b      	movmi	r3, #43	@ 0x2b
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a32:	f89a 3000 	ldrb.w	r3, [sl]
 8003a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a38:	d015      	beq.n	8003a66 <_svfiprintf_r+0xfa>
 8003a3a:	9a07      	ldr	r2, [sp, #28]
 8003a3c:	4654      	mov	r4, sl
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f04f 0c0a 	mov.w	ip, #10
 8003a44:	4621      	mov	r1, r4
 8003a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4a:	3b30      	subs	r3, #48	@ 0x30
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d94b      	bls.n	8003ae8 <_svfiprintf_r+0x17c>
 8003a50:	b1b0      	cbz	r0, 8003a80 <_svfiprintf_r+0x114>
 8003a52:	9207      	str	r2, [sp, #28]
 8003a54:	e014      	b.n	8003a80 <_svfiprintf_r+0x114>
 8003a56:	eba0 0308 	sub.w	r3, r0, r8
 8003a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	46a2      	mov	sl, r4
 8003a64:	e7d2      	b.n	8003a0c <_svfiprintf_r+0xa0>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	1d19      	adds	r1, r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9103      	str	r1, [sp, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfbb      	ittet	lt
 8003a72:	425b      	neglt	r3, r3
 8003a74:	f042 0202 	orrlt.w	r2, r2, #2
 8003a78:	9307      	strge	r3, [sp, #28]
 8003a7a:	9307      	strlt	r3, [sp, #28]
 8003a7c:	bfb8      	it	lt
 8003a7e:	9204      	strlt	r2, [sp, #16]
 8003a80:	7823      	ldrb	r3, [r4, #0]
 8003a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a84:	d10a      	bne.n	8003a9c <_svfiprintf_r+0x130>
 8003a86:	7863      	ldrb	r3, [r4, #1]
 8003a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8a:	d132      	bne.n	8003af2 <_svfiprintf_r+0x186>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	1d1a      	adds	r2, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9203      	str	r2, [sp, #12]
 8003a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a98:	3402      	adds	r4, #2
 8003a9a:	9305      	str	r3, [sp, #20]
 8003a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b60 <_svfiprintf_r+0x1f4>
 8003aa0:	7821      	ldrb	r1, [r4, #0]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	f7fc fb9b 	bl	80001e0 <memchr>
 8003aaa:	b138      	cbz	r0, 8003abc <_svfiprintf_r+0x150>
 8003aac:	9b04      	ldr	r3, [sp, #16]
 8003aae:	eba0 000a 	sub.w	r0, r0, sl
 8003ab2:	2240      	movs	r2, #64	@ 0x40
 8003ab4:	4082      	lsls	r2, r0
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	3401      	adds	r4, #1
 8003aba:	9304      	str	r3, [sp, #16]
 8003abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac0:	4824      	ldr	r0, [pc, #144]	@ (8003b54 <_svfiprintf_r+0x1e8>)
 8003ac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ac6:	2206      	movs	r2, #6
 8003ac8:	f7fc fb8a 	bl	80001e0 <memchr>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d036      	beq.n	8003b3e <_svfiprintf_r+0x1d2>
 8003ad0:	4b21      	ldr	r3, [pc, #132]	@ (8003b58 <_svfiprintf_r+0x1ec>)
 8003ad2:	bb1b      	cbnz	r3, 8003b1c <_svfiprintf_r+0x1b0>
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	3307      	adds	r3, #7
 8003ad8:	f023 0307 	bic.w	r3, r3, #7
 8003adc:	3308      	adds	r3, #8
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ae2:	4433      	add	r3, r6
 8003ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ae6:	e76a      	b.n	80039be <_svfiprintf_r+0x52>
 8003ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aec:	460c      	mov	r4, r1
 8003aee:	2001      	movs	r0, #1
 8003af0:	e7a8      	b.n	8003a44 <_svfiprintf_r+0xd8>
 8003af2:	2300      	movs	r3, #0
 8003af4:	3401      	adds	r4, #1
 8003af6:	9305      	str	r3, [sp, #20]
 8003af8:	4619      	mov	r1, r3
 8003afa:	f04f 0c0a 	mov.w	ip, #10
 8003afe:	4620      	mov	r0, r4
 8003b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b04:	3a30      	subs	r2, #48	@ 0x30
 8003b06:	2a09      	cmp	r2, #9
 8003b08:	d903      	bls.n	8003b12 <_svfiprintf_r+0x1a6>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0c6      	beq.n	8003a9c <_svfiprintf_r+0x130>
 8003b0e:	9105      	str	r1, [sp, #20]
 8003b10:	e7c4      	b.n	8003a9c <_svfiprintf_r+0x130>
 8003b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b16:	4604      	mov	r4, r0
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e7f0      	b.n	8003afe <_svfiprintf_r+0x192>
 8003b1c:	ab03      	add	r3, sp, #12
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	462a      	mov	r2, r5
 8003b22:	4b0e      	ldr	r3, [pc, #56]	@ (8003b5c <_svfiprintf_r+0x1f0>)
 8003b24:	a904      	add	r1, sp, #16
 8003b26:	4638      	mov	r0, r7
 8003b28:	f3af 8000 	nop.w
 8003b2c:	1c42      	adds	r2, r0, #1
 8003b2e:	4606      	mov	r6, r0
 8003b30:	d1d6      	bne.n	8003ae0 <_svfiprintf_r+0x174>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	065b      	lsls	r3, r3, #25
 8003b36:	f53f af2d 	bmi.w	8003994 <_svfiprintf_r+0x28>
 8003b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b3c:	e72c      	b.n	8003998 <_svfiprintf_r+0x2c>
 8003b3e:	ab03      	add	r3, sp, #12
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	462a      	mov	r2, r5
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <_svfiprintf_r+0x1f0>)
 8003b46:	a904      	add	r1, sp, #16
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f000 f879 	bl	8003c40 <_printf_i>
 8003b4e:	e7ed      	b.n	8003b2c <_svfiprintf_r+0x1c0>
 8003b50:	0802b2c8 	.word	0x0802b2c8
 8003b54:	0802b2d2 	.word	0x0802b2d2
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	080038b5 	.word	0x080038b5
 8003b60:	0802b2ce 	.word	0x0802b2ce

08003b64 <_printf_common>:
 8003b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	4616      	mov	r6, r2
 8003b6a:	4698      	mov	r8, r3
 8003b6c:	688a      	ldr	r2, [r1, #8]
 8003b6e:	690b      	ldr	r3, [r1, #16]
 8003b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bfb8      	it	lt
 8003b78:	4613      	movlt	r3, r2
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b80:	4607      	mov	r7, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	b10a      	cbz	r2, 8003b8a <_printf_common+0x26>
 8003b86:	3301      	adds	r3, #1
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	0699      	lsls	r1, r3, #26
 8003b8e:	bf42      	ittt	mi
 8003b90:	6833      	ldrmi	r3, [r6, #0]
 8003b92:	3302      	addmi	r3, #2
 8003b94:	6033      	strmi	r3, [r6, #0]
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	f015 0506 	ands.w	r5, r5, #6
 8003b9c:	d106      	bne.n	8003bac <_printf_common+0x48>
 8003b9e:	f104 0a19 	add.w	sl, r4, #25
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	6832      	ldr	r2, [r6, #0]
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dc26      	bgt.n	8003bfa <_printf_common+0x96>
 8003bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	3b00      	subs	r3, #0
 8003bb4:	bf18      	it	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	0692      	lsls	r2, r2, #26
 8003bba:	d42b      	bmi.n	8003c14 <_printf_common+0xb0>
 8003bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c8      	blx	r9
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d01e      	beq.n	8003c08 <_printf_common+0xa4>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	6922      	ldr	r2, [r4, #16]
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	bf02      	ittt	eq
 8003bd6:	68e5      	ldreq	r5, [r4, #12]
 8003bd8:	6833      	ldreq	r3, [r6, #0]
 8003bda:	1aed      	subeq	r5, r5, r3
 8003bdc:	68a3      	ldr	r3, [r4, #8]
 8003bde:	bf0c      	ite	eq
 8003be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be4:	2500      	movne	r5, #0
 8003be6:	4293      	cmp	r3, r2
 8003be8:	bfc4      	itt	gt
 8003bea:	1a9b      	subgt	r3, r3, r2
 8003bec:	18ed      	addgt	r5, r5, r3
 8003bee:	2600      	movs	r6, #0
 8003bf0:	341a      	adds	r4, #26
 8003bf2:	42b5      	cmp	r5, r6
 8003bf4:	d11a      	bne.n	8003c2c <_printf_common+0xc8>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	e008      	b.n	8003c0c <_printf_common+0xa8>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4652      	mov	r2, sl
 8003bfe:	4641      	mov	r1, r8
 8003c00:	4638      	mov	r0, r7
 8003c02:	47c8      	blx	r9
 8003c04:	3001      	adds	r0, #1
 8003c06:	d103      	bne.n	8003c10 <_printf_common+0xac>
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	3501      	adds	r5, #1
 8003c12:	e7c6      	b.n	8003ba2 <_printf_common+0x3e>
 8003c14:	18e1      	adds	r1, r4, r3
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	2030      	movs	r0, #48	@ 0x30
 8003c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c1e:	4422      	add	r2, r4
 8003c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c28:	3302      	adds	r3, #2
 8003c2a:	e7c7      	b.n	8003bbc <_printf_common+0x58>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4641      	mov	r1, r8
 8003c32:	4638      	mov	r0, r7
 8003c34:	47c8      	blx	r9
 8003c36:	3001      	adds	r0, #1
 8003c38:	d0e6      	beq.n	8003c08 <_printf_common+0xa4>
 8003c3a:	3601      	adds	r6, #1
 8003c3c:	e7d9      	b.n	8003bf2 <_printf_common+0x8e>
	...

08003c40 <_printf_i>:
 8003c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	7e0f      	ldrb	r7, [r1, #24]
 8003c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c48:	2f78      	cmp	r7, #120	@ 0x78
 8003c4a:	4691      	mov	r9, r2
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	469a      	mov	sl, r3
 8003c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c56:	d807      	bhi.n	8003c68 <_printf_i+0x28>
 8003c58:	2f62      	cmp	r7, #98	@ 0x62
 8003c5a:	d80a      	bhi.n	8003c72 <_printf_i+0x32>
 8003c5c:	2f00      	cmp	r7, #0
 8003c5e:	f000 80d1 	beq.w	8003e04 <_printf_i+0x1c4>
 8003c62:	2f58      	cmp	r7, #88	@ 0x58
 8003c64:	f000 80b8 	beq.w	8003dd8 <_printf_i+0x198>
 8003c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c70:	e03a      	b.n	8003ce8 <_printf_i+0xa8>
 8003c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c76:	2b15      	cmp	r3, #21
 8003c78:	d8f6      	bhi.n	8003c68 <_printf_i+0x28>
 8003c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c80 <_printf_i+0x40>)
 8003c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003ced 	.word	0x08003ced
 8003c88:	08003c69 	.word	0x08003c69
 8003c8c:	08003c69 	.word	0x08003c69
 8003c90:	08003c69 	.word	0x08003c69
 8003c94:	08003c69 	.word	0x08003c69
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003c69 	.word	0x08003c69
 8003ca0:	08003c69 	.word	0x08003c69
 8003ca4:	08003c69 	.word	0x08003c69
 8003ca8:	08003c69 	.word	0x08003c69
 8003cac:	08003deb 	.word	0x08003deb
 8003cb0:	08003d17 	.word	0x08003d17
 8003cb4:	08003da5 	.word	0x08003da5
 8003cb8:	08003c69 	.word	0x08003c69
 8003cbc:	08003c69 	.word	0x08003c69
 8003cc0:	08003e0d 	.word	0x08003e0d
 8003cc4:	08003c69 	.word	0x08003c69
 8003cc8:	08003d17 	.word	0x08003d17
 8003ccc:	08003c69 	.word	0x08003c69
 8003cd0:	08003c69 	.word	0x08003c69
 8003cd4:	08003dad 	.word	0x08003dad
 8003cd8:	6833      	ldr	r3, [r6, #0]
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6032      	str	r2, [r6, #0]
 8003ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e09c      	b.n	8003e26 <_printf_i+0x1e6>
 8003cec:	6833      	ldr	r3, [r6, #0]
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	1d19      	adds	r1, r3, #4
 8003cf2:	6031      	str	r1, [r6, #0]
 8003cf4:	0606      	lsls	r6, r0, #24
 8003cf6:	d501      	bpl.n	8003cfc <_printf_i+0xbc>
 8003cf8:	681d      	ldr	r5, [r3, #0]
 8003cfa:	e003      	b.n	8003d04 <_printf_i+0xc4>
 8003cfc:	0645      	lsls	r5, r0, #25
 8003cfe:	d5fb      	bpl.n	8003cf8 <_printf_i+0xb8>
 8003d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d04:	2d00      	cmp	r5, #0
 8003d06:	da03      	bge.n	8003d10 <_printf_i+0xd0>
 8003d08:	232d      	movs	r3, #45	@ 0x2d
 8003d0a:	426d      	negs	r5, r5
 8003d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d10:	4858      	ldr	r0, [pc, #352]	@ (8003e74 <_printf_i+0x234>)
 8003d12:	230a      	movs	r3, #10
 8003d14:	e011      	b.n	8003d3a <_printf_i+0xfa>
 8003d16:	6821      	ldr	r1, [r4, #0]
 8003d18:	6833      	ldr	r3, [r6, #0]
 8003d1a:	0608      	lsls	r0, r1, #24
 8003d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d20:	d402      	bmi.n	8003d28 <_printf_i+0xe8>
 8003d22:	0649      	lsls	r1, r1, #25
 8003d24:	bf48      	it	mi
 8003d26:	b2ad      	uxthmi	r5, r5
 8003d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d2a:	4852      	ldr	r0, [pc, #328]	@ (8003e74 <_printf_i+0x234>)
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	bf14      	ite	ne
 8003d30:	230a      	movne	r3, #10
 8003d32:	2308      	moveq	r3, #8
 8003d34:	2100      	movs	r1, #0
 8003d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d3a:	6866      	ldr	r6, [r4, #4]
 8003d3c:	60a6      	str	r6, [r4, #8]
 8003d3e:	2e00      	cmp	r6, #0
 8003d40:	db05      	blt.n	8003d4e <_printf_i+0x10e>
 8003d42:	6821      	ldr	r1, [r4, #0]
 8003d44:	432e      	orrs	r6, r5
 8003d46:	f021 0104 	bic.w	r1, r1, #4
 8003d4a:	6021      	str	r1, [r4, #0]
 8003d4c:	d04b      	beq.n	8003de6 <_printf_i+0x1a6>
 8003d4e:	4616      	mov	r6, r2
 8003d50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d54:	fb03 5711 	mls	r7, r3, r1, r5
 8003d58:	5dc7      	ldrb	r7, [r0, r7]
 8003d5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d5e:	462f      	mov	r7, r5
 8003d60:	42bb      	cmp	r3, r7
 8003d62:	460d      	mov	r5, r1
 8003d64:	d9f4      	bls.n	8003d50 <_printf_i+0x110>
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d10b      	bne.n	8003d82 <_printf_i+0x142>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	07df      	lsls	r7, r3, #31
 8003d6e:	d508      	bpl.n	8003d82 <_printf_i+0x142>
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	6861      	ldr	r1, [r4, #4]
 8003d74:	4299      	cmp	r1, r3
 8003d76:	bfde      	ittt	le
 8003d78:	2330      	movle	r3, #48	@ 0x30
 8003d7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d82:	1b92      	subs	r2, r2, r6
 8003d84:	6122      	str	r2, [r4, #16]
 8003d86:	f8cd a000 	str.w	sl, [sp]
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	aa03      	add	r2, sp, #12
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4640      	mov	r0, r8
 8003d92:	f7ff fee7 	bl	8003b64 <_printf_common>
 8003d96:	3001      	adds	r0, #1
 8003d98:	d14a      	bne.n	8003e30 <_printf_i+0x1f0>
 8003d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9e:	b004      	add	sp, #16
 8003da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	f043 0320 	orr.w	r3, r3, #32
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	4832      	ldr	r0, [pc, #200]	@ (8003e78 <_printf_i+0x238>)
 8003dae:	2778      	movs	r7, #120	@ 0x78
 8003db0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	6831      	ldr	r1, [r6, #0]
 8003db8:	061f      	lsls	r7, r3, #24
 8003dba:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dbe:	d402      	bmi.n	8003dc6 <_printf_i+0x186>
 8003dc0:	065f      	lsls	r7, r3, #25
 8003dc2:	bf48      	it	mi
 8003dc4:	b2ad      	uxthmi	r5, r5
 8003dc6:	6031      	str	r1, [r6, #0]
 8003dc8:	07d9      	lsls	r1, r3, #31
 8003dca:	bf44      	itt	mi
 8003dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd0:	6023      	strmi	r3, [r4, #0]
 8003dd2:	b11d      	cbz	r5, 8003ddc <_printf_i+0x19c>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	e7ad      	b.n	8003d34 <_printf_i+0xf4>
 8003dd8:	4826      	ldr	r0, [pc, #152]	@ (8003e74 <_printf_i+0x234>)
 8003dda:	e7e9      	b.n	8003db0 <_printf_i+0x170>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	e7f6      	b.n	8003dd4 <_printf_i+0x194>
 8003de6:	4616      	mov	r6, r2
 8003de8:	e7bd      	b.n	8003d66 <_printf_i+0x126>
 8003dea:	6833      	ldr	r3, [r6, #0]
 8003dec:	6825      	ldr	r5, [r4, #0]
 8003dee:	6961      	ldr	r1, [r4, #20]
 8003df0:	1d18      	adds	r0, r3, #4
 8003df2:	6030      	str	r0, [r6, #0]
 8003df4:	062e      	lsls	r6, r5, #24
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	d501      	bpl.n	8003dfe <_printf_i+0x1be>
 8003dfa:	6019      	str	r1, [r3, #0]
 8003dfc:	e002      	b.n	8003e04 <_printf_i+0x1c4>
 8003dfe:	0668      	lsls	r0, r5, #25
 8003e00:	d5fb      	bpl.n	8003dfa <_printf_i+0x1ba>
 8003e02:	8019      	strh	r1, [r3, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	6123      	str	r3, [r4, #16]
 8003e08:	4616      	mov	r6, r2
 8003e0a:	e7bc      	b.n	8003d86 <_printf_i+0x146>
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	6032      	str	r2, [r6, #0]
 8003e12:	681e      	ldr	r6, [r3, #0]
 8003e14:	6862      	ldr	r2, [r4, #4]
 8003e16:	2100      	movs	r1, #0
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f7fc f9e1 	bl	80001e0 <memchr>
 8003e1e:	b108      	cbz	r0, 8003e24 <_printf_i+0x1e4>
 8003e20:	1b80      	subs	r0, r0, r6
 8003e22:	6060      	str	r0, [r4, #4]
 8003e24:	6863      	ldr	r3, [r4, #4]
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e2e:	e7aa      	b.n	8003d86 <_printf_i+0x146>
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	4632      	mov	r2, r6
 8003e34:	4649      	mov	r1, r9
 8003e36:	4640      	mov	r0, r8
 8003e38:	47d0      	blx	sl
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d0ad      	beq.n	8003d9a <_printf_i+0x15a>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	079b      	lsls	r3, r3, #30
 8003e42:	d413      	bmi.n	8003e6c <_printf_i+0x22c>
 8003e44:	68e0      	ldr	r0, [r4, #12]
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	4298      	cmp	r0, r3
 8003e4a:	bfb8      	it	lt
 8003e4c:	4618      	movlt	r0, r3
 8003e4e:	e7a6      	b.n	8003d9e <_printf_i+0x15e>
 8003e50:	2301      	movs	r3, #1
 8003e52:	4632      	mov	r2, r6
 8003e54:	4649      	mov	r1, r9
 8003e56:	4640      	mov	r0, r8
 8003e58:	47d0      	blx	sl
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d09d      	beq.n	8003d9a <_printf_i+0x15a>
 8003e5e:	3501      	adds	r5, #1
 8003e60:	68e3      	ldr	r3, [r4, #12]
 8003e62:	9903      	ldr	r1, [sp, #12]
 8003e64:	1a5b      	subs	r3, r3, r1
 8003e66:	42ab      	cmp	r3, r5
 8003e68:	dcf2      	bgt.n	8003e50 <_printf_i+0x210>
 8003e6a:	e7eb      	b.n	8003e44 <_printf_i+0x204>
 8003e6c:	2500      	movs	r5, #0
 8003e6e:	f104 0619 	add.w	r6, r4, #25
 8003e72:	e7f5      	b.n	8003e60 <_printf_i+0x220>
 8003e74:	0802b2d9 	.word	0x0802b2d9
 8003e78:	0802b2ea 	.word	0x0802b2ea

08003e7c <memmove>:
 8003e7c:	4288      	cmp	r0, r1
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	eb01 0402 	add.w	r4, r1, r2
 8003e84:	d902      	bls.n	8003e8c <memmove+0x10>
 8003e86:	4284      	cmp	r4, r0
 8003e88:	4623      	mov	r3, r4
 8003e8a:	d807      	bhi.n	8003e9c <memmove+0x20>
 8003e8c:	1e43      	subs	r3, r0, #1
 8003e8e:	42a1      	cmp	r1, r4
 8003e90:	d008      	beq.n	8003ea4 <memmove+0x28>
 8003e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e9a:	e7f8      	b.n	8003e8e <memmove+0x12>
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	428a      	cmp	r2, r1
 8003ea2:	d100      	bne.n	8003ea6 <memmove+0x2a>
 8003ea4:	bd10      	pop	{r4, pc}
 8003ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eae:	e7f7      	b.n	8003ea0 <memmove+0x24>

08003eb0 <_sbrk_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d06      	ldr	r5, [pc, #24]	@ (8003ecc <_sbrk_r+0x1c>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fd fa44 	bl	8001348 <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_sbrk_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_sbrk_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000214 	.word	0x20000214

08003ed0 <memcpy>:
 8003ed0:	440a      	add	r2, r1
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	4770      	bx	lr
 8003edc:	b510      	push	{r4, lr}
 8003ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee6:	4291      	cmp	r1, r2
 8003ee8:	d1f9      	bne.n	8003ede <memcpy+0xe>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <_realloc_r>:
 8003eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	460d      	mov	r5, r1
 8003ef6:	b921      	cbnz	r1, 8003f02 <_realloc_r+0x16>
 8003ef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003efc:	4611      	mov	r1, r2
 8003efe:	f7ff bc4d 	b.w	800379c <_malloc_r>
 8003f02:	b92a      	cbnz	r2, 8003f10 <_realloc_r+0x24>
 8003f04:	f7ff fbde 	bl	80036c4 <_free_r>
 8003f08:	4625      	mov	r5, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f10:	f000 f81a 	bl	8003f48 <_malloc_usable_size_r>
 8003f14:	4284      	cmp	r4, r0
 8003f16:	4606      	mov	r6, r0
 8003f18:	d802      	bhi.n	8003f20 <_realloc_r+0x34>
 8003f1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f1e:	d8f4      	bhi.n	8003f0a <_realloc_r+0x1e>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4638      	mov	r0, r7
 8003f24:	f7ff fc3a 	bl	800379c <_malloc_r>
 8003f28:	4680      	mov	r8, r0
 8003f2a:	b908      	cbnz	r0, 8003f30 <_realloc_r+0x44>
 8003f2c:	4645      	mov	r5, r8
 8003f2e:	e7ec      	b.n	8003f0a <_realloc_r+0x1e>
 8003f30:	42b4      	cmp	r4, r6
 8003f32:	4622      	mov	r2, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	bf28      	it	cs
 8003f38:	4632      	movcs	r2, r6
 8003f3a:	f7ff ffc9 	bl	8003ed0 <memcpy>
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4638      	mov	r0, r7
 8003f42:	f7ff fbbf 	bl	80036c4 <_free_r>
 8003f46:	e7f1      	b.n	8003f2c <_realloc_r+0x40>

08003f48 <_malloc_usable_size_r>:
 8003f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f4c:	1f18      	subs	r0, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bfbc      	itt	lt
 8003f52:	580b      	ldrlt	r3, [r1, r0]
 8003f54:	18c0      	addlt	r0, r0, r3
 8003f56:	4770      	bx	lr

08003f58 <cos>:
 8003f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f5a:	ec53 2b10 	vmov	r2, r3, d0
 8003f5e:	4826      	ldr	r0, [pc, #152]	@ (8003ff8 <cos+0xa0>)
 8003f60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f64:	4281      	cmp	r1, r0
 8003f66:	d806      	bhi.n	8003f76 <cos+0x1e>
 8003f68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003ff0 <cos+0x98>
 8003f6c:	b005      	add	sp, #20
 8003f6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f72:	f000 b899 	b.w	80040a8 <__kernel_cos>
 8003f76:	4821      	ldr	r0, [pc, #132]	@ (8003ffc <cos+0xa4>)
 8003f78:	4281      	cmp	r1, r0
 8003f7a:	d908      	bls.n	8003f8e <cos+0x36>
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f7fc f982 	bl	8000288 <__aeabi_dsub>
 8003f84:	ec41 0b10 	vmov	d0, r0, r1
 8003f88:	b005      	add	sp, #20
 8003f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f8e:	4668      	mov	r0, sp
 8003f90:	f000 fa0e 	bl	80043b0 <__ieee754_rem_pio2>
 8003f94:	f000 0003 	and.w	r0, r0, #3
 8003f98:	2801      	cmp	r0, #1
 8003f9a:	d00b      	beq.n	8003fb4 <cos+0x5c>
 8003f9c:	2802      	cmp	r0, #2
 8003f9e:	d015      	beq.n	8003fcc <cos+0x74>
 8003fa0:	b9d8      	cbnz	r0, 8003fda <cos+0x82>
 8003fa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fa6:	ed9d 0b00 	vldr	d0, [sp]
 8003faa:	f000 f87d 	bl	80040a8 <__kernel_cos>
 8003fae:	ec51 0b10 	vmov	r0, r1, d0
 8003fb2:	e7e7      	b.n	8003f84 <cos+0x2c>
 8003fb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fb8:	ed9d 0b00 	vldr	d0, [sp]
 8003fbc:	f000 f93c 	bl	8004238 <__kernel_sin>
 8003fc0:	ec53 2b10 	vmov	r2, r3, d0
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003fca:	e7db      	b.n	8003f84 <cos+0x2c>
 8003fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fd0:	ed9d 0b00 	vldr	d0, [sp]
 8003fd4:	f000 f868 	bl	80040a8 <__kernel_cos>
 8003fd8:	e7f2      	b.n	8003fc0 <cos+0x68>
 8003fda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fde:	ed9d 0b00 	vldr	d0, [sp]
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f000 f928 	bl	8004238 <__kernel_sin>
 8003fe8:	e7e1      	b.n	8003fae <cos+0x56>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
	...
 8003ff8:	3fe921fb 	.word	0x3fe921fb
 8003ffc:	7fefffff 	.word	0x7fefffff

08004000 <sin>:
 8004000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004002:	ec53 2b10 	vmov	r2, r3, d0
 8004006:	4826      	ldr	r0, [pc, #152]	@ (80040a0 <sin+0xa0>)
 8004008:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800400c:	4281      	cmp	r1, r0
 800400e:	d807      	bhi.n	8004020 <sin+0x20>
 8004010:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004098 <sin+0x98>
 8004014:	2000      	movs	r0, #0
 8004016:	b005      	add	sp, #20
 8004018:	f85d eb04 	ldr.w	lr, [sp], #4
 800401c:	f000 b90c 	b.w	8004238 <__kernel_sin>
 8004020:	4820      	ldr	r0, [pc, #128]	@ (80040a4 <sin+0xa4>)
 8004022:	4281      	cmp	r1, r0
 8004024:	d908      	bls.n	8004038 <sin+0x38>
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7fc f92d 	bl	8000288 <__aeabi_dsub>
 800402e:	ec41 0b10 	vmov	d0, r0, r1
 8004032:	b005      	add	sp, #20
 8004034:	f85d fb04 	ldr.w	pc, [sp], #4
 8004038:	4668      	mov	r0, sp
 800403a:	f000 f9b9 	bl	80043b0 <__ieee754_rem_pio2>
 800403e:	f000 0003 	and.w	r0, r0, #3
 8004042:	2801      	cmp	r0, #1
 8004044:	d00c      	beq.n	8004060 <sin+0x60>
 8004046:	2802      	cmp	r0, #2
 8004048:	d011      	beq.n	800406e <sin+0x6e>
 800404a:	b9e8      	cbnz	r0, 8004088 <sin+0x88>
 800404c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004050:	ed9d 0b00 	vldr	d0, [sp]
 8004054:	2001      	movs	r0, #1
 8004056:	f000 f8ef 	bl	8004238 <__kernel_sin>
 800405a:	ec51 0b10 	vmov	r0, r1, d0
 800405e:	e7e6      	b.n	800402e <sin+0x2e>
 8004060:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004064:	ed9d 0b00 	vldr	d0, [sp]
 8004068:	f000 f81e 	bl	80040a8 <__kernel_cos>
 800406c:	e7f5      	b.n	800405a <sin+0x5a>
 800406e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004072:	ed9d 0b00 	vldr	d0, [sp]
 8004076:	2001      	movs	r0, #1
 8004078:	f000 f8de 	bl	8004238 <__kernel_sin>
 800407c:	ec53 2b10 	vmov	r2, r3, d0
 8004080:	4610      	mov	r0, r2
 8004082:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004086:	e7d2      	b.n	800402e <sin+0x2e>
 8004088:	ed9d 1b02 	vldr	d1, [sp, #8]
 800408c:	ed9d 0b00 	vldr	d0, [sp]
 8004090:	f000 f80a 	bl	80040a8 <__kernel_cos>
 8004094:	e7f2      	b.n	800407c <sin+0x7c>
 8004096:	bf00      	nop
	...
 80040a0:	3fe921fb 	.word	0x3fe921fb
 80040a4:	7fefffff 	.word	0x7fefffff

080040a8 <__kernel_cos>:
 80040a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	ec57 6b10 	vmov	r6, r7, d0
 80040b0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80040b4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80040b8:	ed8d 1b00 	vstr	d1, [sp]
 80040bc:	d206      	bcs.n	80040cc <__kernel_cos+0x24>
 80040be:	4630      	mov	r0, r6
 80040c0:	4639      	mov	r1, r7
 80040c2:	f7fc fd33 	bl	8000b2c <__aeabi_d2iz>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f000 8088 	beq.w	80041dc <__kernel_cos+0x134>
 80040cc:	4632      	mov	r2, r6
 80040ce:	463b      	mov	r3, r7
 80040d0:	4630      	mov	r0, r6
 80040d2:	4639      	mov	r1, r7
 80040d4:	f7fc fa90 	bl	80005f8 <__aeabi_dmul>
 80040d8:	4b51      	ldr	r3, [pc, #324]	@ (8004220 <__kernel_cos+0x178>)
 80040da:	2200      	movs	r2, #0
 80040dc:	4604      	mov	r4, r0
 80040de:	460d      	mov	r5, r1
 80040e0:	f7fc fa8a 	bl	80005f8 <__aeabi_dmul>
 80040e4:	a340      	add	r3, pc, #256	@ (adr r3, 80041e8 <__kernel_cos+0x140>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	4682      	mov	sl, r0
 80040ec:	468b      	mov	fp, r1
 80040ee:	4620      	mov	r0, r4
 80040f0:	4629      	mov	r1, r5
 80040f2:	f7fc fa81 	bl	80005f8 <__aeabi_dmul>
 80040f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80041f0 <__kernel_cos+0x148>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc f8c6 	bl	800028c <__adddf3>
 8004100:	4622      	mov	r2, r4
 8004102:	462b      	mov	r3, r5
 8004104:	f7fc fa78 	bl	80005f8 <__aeabi_dmul>
 8004108:	a33b      	add	r3, pc, #236	@ (adr r3, 80041f8 <__kernel_cos+0x150>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc f8bb 	bl	8000288 <__aeabi_dsub>
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f7fc fa6f 	bl	80005f8 <__aeabi_dmul>
 800411a:	a339      	add	r3, pc, #228	@ (adr r3, 8004200 <__kernel_cos+0x158>)
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc f8b4 	bl	800028c <__adddf3>
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	f7fc fa66 	bl	80005f8 <__aeabi_dmul>
 800412c:	a336      	add	r3, pc, #216	@ (adr r3, 8004208 <__kernel_cos+0x160>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f7fc f8a9 	bl	8000288 <__aeabi_dsub>
 8004136:	4622      	mov	r2, r4
 8004138:	462b      	mov	r3, r5
 800413a:	f7fc fa5d 	bl	80005f8 <__aeabi_dmul>
 800413e:	a334      	add	r3, pc, #208	@ (adr r3, 8004210 <__kernel_cos+0x168>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc f8a2 	bl	800028c <__adddf3>
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	f7fc fa54 	bl	80005f8 <__aeabi_dmul>
 8004150:	4622      	mov	r2, r4
 8004152:	462b      	mov	r3, r5
 8004154:	f7fc fa50 	bl	80005f8 <__aeabi_dmul>
 8004158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800415c:	4604      	mov	r4, r0
 800415e:	460d      	mov	r5, r1
 8004160:	4630      	mov	r0, r6
 8004162:	4639      	mov	r1, r7
 8004164:	f7fc fa48 	bl	80005f8 <__aeabi_dmul>
 8004168:	460b      	mov	r3, r1
 800416a:	4602      	mov	r2, r0
 800416c:	4629      	mov	r1, r5
 800416e:	4620      	mov	r0, r4
 8004170:	f7fc f88a 	bl	8000288 <__aeabi_dsub>
 8004174:	4b2b      	ldr	r3, [pc, #172]	@ (8004224 <__kernel_cos+0x17c>)
 8004176:	4598      	cmp	r8, r3
 8004178:	4606      	mov	r6, r0
 800417a:	460f      	mov	r7, r1
 800417c:	d810      	bhi.n	80041a0 <__kernel_cos+0xf8>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4650      	mov	r0, sl
 8004184:	4659      	mov	r1, fp
 8004186:	f7fc f87f 	bl	8000288 <__aeabi_dsub>
 800418a:	460b      	mov	r3, r1
 800418c:	4926      	ldr	r1, [pc, #152]	@ (8004228 <__kernel_cos+0x180>)
 800418e:	4602      	mov	r2, r0
 8004190:	2000      	movs	r0, #0
 8004192:	f7fc f879 	bl	8000288 <__aeabi_dsub>
 8004196:	ec41 0b10 	vmov	d0, r0, r1
 800419a:	b003      	add	sp, #12
 800419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a0:	4b22      	ldr	r3, [pc, #136]	@ (800422c <__kernel_cos+0x184>)
 80041a2:	4921      	ldr	r1, [pc, #132]	@ (8004228 <__kernel_cos+0x180>)
 80041a4:	4598      	cmp	r8, r3
 80041a6:	bf8c      	ite	hi
 80041a8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004230 <__kernel_cos+0x188>)
 80041aa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80041ae:	2400      	movs	r4, #0
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7fc f867 	bl	8000288 <__aeabi_dsub>
 80041ba:	4622      	mov	r2, r4
 80041bc:	4680      	mov	r8, r0
 80041be:	4689      	mov	r9, r1
 80041c0:	462b      	mov	r3, r5
 80041c2:	4650      	mov	r0, sl
 80041c4:	4659      	mov	r1, fp
 80041c6:	f7fc f85f 	bl	8000288 <__aeabi_dsub>
 80041ca:	4632      	mov	r2, r6
 80041cc:	463b      	mov	r3, r7
 80041ce:	f7fc f85b 	bl	8000288 <__aeabi_dsub>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	e7da      	b.n	8004192 <__kernel_cos+0xea>
 80041dc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004218 <__kernel_cos+0x170>
 80041e0:	e7db      	b.n	800419a <__kernel_cos+0xf2>
 80041e2:	bf00      	nop
 80041e4:	f3af 8000 	nop.w
 80041e8:	be8838d4 	.word	0xbe8838d4
 80041ec:	bda8fae9 	.word	0xbda8fae9
 80041f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80041f4:	3e21ee9e 	.word	0x3e21ee9e
 80041f8:	809c52ad 	.word	0x809c52ad
 80041fc:	3e927e4f 	.word	0x3e927e4f
 8004200:	19cb1590 	.word	0x19cb1590
 8004204:	3efa01a0 	.word	0x3efa01a0
 8004208:	16c15177 	.word	0x16c15177
 800420c:	3f56c16c 	.word	0x3f56c16c
 8004210:	5555554c 	.word	0x5555554c
 8004214:	3fa55555 	.word	0x3fa55555
 8004218:	00000000 	.word	0x00000000
 800421c:	3ff00000 	.word	0x3ff00000
 8004220:	3fe00000 	.word	0x3fe00000
 8004224:	3fd33332 	.word	0x3fd33332
 8004228:	3ff00000 	.word	0x3ff00000
 800422c:	3fe90000 	.word	0x3fe90000
 8004230:	3fd20000 	.word	0x3fd20000
 8004234:	00000000 	.word	0x00000000

08004238 <__kernel_sin>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	ec55 4b10 	vmov	r4, r5, d0
 8004240:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004244:	b085      	sub	sp, #20
 8004246:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800424a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800424e:	4680      	mov	r8, r0
 8004250:	d205      	bcs.n	800425e <__kernel_sin+0x26>
 8004252:	4620      	mov	r0, r4
 8004254:	4629      	mov	r1, r5
 8004256:	f7fc fc69 	bl	8000b2c <__aeabi_d2iz>
 800425a:	2800      	cmp	r0, #0
 800425c:	d052      	beq.n	8004304 <__kernel_sin+0xcc>
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fc f9c7 	bl	80005f8 <__aeabi_dmul>
 800426a:	4682      	mov	sl, r0
 800426c:	468b      	mov	fp, r1
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4620      	mov	r0, r4
 8004274:	4629      	mov	r1, r5
 8004276:	f7fc f9bf 	bl	80005f8 <__aeabi_dmul>
 800427a:	a342      	add	r3, pc, #264	@ (adr r3, 8004384 <__kernel_sin+0x14c>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	e9cd 0100 	strd	r0, r1, [sp]
 8004284:	4650      	mov	r0, sl
 8004286:	4659      	mov	r1, fp
 8004288:	f7fc f9b6 	bl	80005f8 <__aeabi_dmul>
 800428c:	a33f      	add	r3, pc, #252	@ (adr r3, 800438c <__kernel_sin+0x154>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fb fff9 	bl	8000288 <__aeabi_dsub>
 8004296:	4652      	mov	r2, sl
 8004298:	465b      	mov	r3, fp
 800429a:	f7fc f9ad 	bl	80005f8 <__aeabi_dmul>
 800429e:	a33d      	add	r3, pc, #244	@ (adr r3, 8004394 <__kernel_sin+0x15c>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fb fff2 	bl	800028c <__adddf3>
 80042a8:	4652      	mov	r2, sl
 80042aa:	465b      	mov	r3, fp
 80042ac:	f7fc f9a4 	bl	80005f8 <__aeabi_dmul>
 80042b0:	a33a      	add	r3, pc, #232	@ (adr r3, 800439c <__kernel_sin+0x164>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fb ffe7 	bl	8000288 <__aeabi_dsub>
 80042ba:	4652      	mov	r2, sl
 80042bc:	465b      	mov	r3, fp
 80042be:	f7fc f99b 	bl	80005f8 <__aeabi_dmul>
 80042c2:	a338      	add	r3, pc, #224	@ (adr r3, 80043a4 <__kernel_sin+0x16c>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fb ffe0 	bl	800028c <__adddf3>
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	f1b8 0f00 	cmp.w	r8, #0
 80042d4:	d11b      	bne.n	800430e <__kernel_sin+0xd6>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4650      	mov	r0, sl
 80042dc:	4659      	mov	r1, fp
 80042de:	f7fc f98b 	bl	80005f8 <__aeabi_dmul>
 80042e2:	a325      	add	r3, pc, #148	@ (adr r3, 8004378 <__kernel_sin+0x140>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fb ffce 	bl	8000288 <__aeabi_dsub>
 80042ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042f0:	f7fc f982 	bl	80005f8 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7fb ffc6 	bl	800028c <__adddf3>
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
 8004304:	ec45 4b10 	vmov	d0, r4, r5
 8004308:	b005      	add	sp, #20
 800430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004312:	4b1b      	ldr	r3, [pc, #108]	@ (8004380 <__kernel_sin+0x148>)
 8004314:	2200      	movs	r2, #0
 8004316:	f7fc f96f 	bl	80005f8 <__aeabi_dmul>
 800431a:	4632      	mov	r2, r6
 800431c:	4680      	mov	r8, r0
 800431e:	4689      	mov	r9, r1
 8004320:	463b      	mov	r3, r7
 8004322:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004326:	f7fc f967 	bl	80005f8 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4640      	mov	r0, r8
 8004330:	4649      	mov	r1, r9
 8004332:	f7fb ffa9 	bl	8000288 <__aeabi_dsub>
 8004336:	4652      	mov	r2, sl
 8004338:	465b      	mov	r3, fp
 800433a:	f7fc f95d 	bl	80005f8 <__aeabi_dmul>
 800433e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004342:	f7fb ffa1 	bl	8000288 <__aeabi_dsub>
 8004346:	a30c      	add	r3, pc, #48	@ (adr r3, 8004378 <__kernel_sin+0x140>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	4606      	mov	r6, r0
 800434e:	460f      	mov	r7, r1
 8004350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004354:	f7fc f950 	bl	80005f8 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb ff94 	bl	800028c <__adddf3>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4620      	mov	r0, r4
 800436a:	4629      	mov	r1, r5
 800436c:	f7fb ff8c 	bl	8000288 <__aeabi_dsub>
 8004370:	e7c6      	b.n	8004300 <__kernel_sin+0xc8>
 8004372:	bf00      	nop
 8004374:	f3af 8000 	nop.w
 8004378:	55555549 	.word	0x55555549
 800437c:	3fc55555 	.word	0x3fc55555
 8004380:	3fe00000 	.word	0x3fe00000
 8004384:	5acfd57c 	.word	0x5acfd57c
 8004388:	3de5d93a 	.word	0x3de5d93a
 800438c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004390:	3e5ae5e6 	.word	0x3e5ae5e6
 8004394:	57b1fe7d 	.word	0x57b1fe7d
 8004398:	3ec71de3 	.word	0x3ec71de3
 800439c:	19c161d5 	.word	0x19c161d5
 80043a0:	3f2a01a0 	.word	0x3f2a01a0
 80043a4:	1110f8a6 	.word	0x1110f8a6
 80043a8:	3f811111 	.word	0x3f811111
 80043ac:	00000000 	.word	0x00000000

080043b0 <__ieee754_rem_pio2>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	ec57 6b10 	vmov	r6, r7, d0
 80043b8:	4bc5      	ldr	r3, [pc, #788]	@ (80046d0 <__ieee754_rem_pio2+0x320>)
 80043ba:	b08d      	sub	sp, #52	@ 0x34
 80043bc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80043c0:	4598      	cmp	r8, r3
 80043c2:	4604      	mov	r4, r0
 80043c4:	9704      	str	r7, [sp, #16]
 80043c6:	d807      	bhi.n	80043d8 <__ieee754_rem_pio2+0x28>
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	ed80 0b00 	vstr	d0, [r0]
 80043d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80043d4:	2500      	movs	r5, #0
 80043d6:	e028      	b.n	800442a <__ieee754_rem_pio2+0x7a>
 80043d8:	4bbe      	ldr	r3, [pc, #760]	@ (80046d4 <__ieee754_rem_pio2+0x324>)
 80043da:	4598      	cmp	r8, r3
 80043dc:	d878      	bhi.n	80044d0 <__ieee754_rem_pio2+0x120>
 80043de:	9b04      	ldr	r3, [sp, #16]
 80043e0:	4dbd      	ldr	r5, [pc, #756]	@ (80046d8 <__ieee754_rem_pio2+0x328>)
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	4630      	mov	r0, r6
 80043e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004698 <__ieee754_rem_pio2+0x2e8>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	4639      	mov	r1, r7
 80043ee:	dd38      	ble.n	8004462 <__ieee754_rem_pio2+0xb2>
 80043f0:	f7fb ff4a 	bl	8000288 <__aeabi_dsub>
 80043f4:	45a8      	cmp	r8, r5
 80043f6:	4606      	mov	r6, r0
 80043f8:	460f      	mov	r7, r1
 80043fa:	d01a      	beq.n	8004432 <__ieee754_rem_pio2+0x82>
 80043fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80046a0 <__ieee754_rem_pio2+0x2f0>)
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f7fb ff41 	bl	8000288 <__aeabi_dsub>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4680      	mov	r8, r0
 800440c:	4689      	mov	r9, r1
 800440e:	4630      	mov	r0, r6
 8004410:	4639      	mov	r1, r7
 8004412:	f7fb ff39 	bl	8000288 <__aeabi_dsub>
 8004416:	a3a2      	add	r3, pc, #648	@ (adr r3, 80046a0 <__ieee754_rem_pio2+0x2f0>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fb ff34 	bl	8000288 <__aeabi_dsub>
 8004420:	e9c4 8900 	strd	r8, r9, [r4]
 8004424:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004428:	2501      	movs	r5, #1
 800442a:	4628      	mov	r0, r5
 800442c:	b00d      	add	sp, #52	@ 0x34
 800442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004432:	a39d      	add	r3, pc, #628	@ (adr r3, 80046a8 <__ieee754_rem_pio2+0x2f8>)
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f7fb ff26 	bl	8000288 <__aeabi_dsub>
 800443c:	a39c      	add	r3, pc, #624	@ (adr r3, 80046b0 <__ieee754_rem_pio2+0x300>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	f7fb ff1f 	bl	8000288 <__aeabi_dsub>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4680      	mov	r8, r0
 8004450:	4689      	mov	r9, r1
 8004452:	4630      	mov	r0, r6
 8004454:	4639      	mov	r1, r7
 8004456:	f7fb ff17 	bl	8000288 <__aeabi_dsub>
 800445a:	a395      	add	r3, pc, #596	@ (adr r3, 80046b0 <__ieee754_rem_pio2+0x300>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	e7dc      	b.n	800441c <__ieee754_rem_pio2+0x6c>
 8004462:	f7fb ff13 	bl	800028c <__adddf3>
 8004466:	45a8      	cmp	r8, r5
 8004468:	4606      	mov	r6, r0
 800446a:	460f      	mov	r7, r1
 800446c:	d018      	beq.n	80044a0 <__ieee754_rem_pio2+0xf0>
 800446e:	a38c      	add	r3, pc, #560	@ (adr r3, 80046a0 <__ieee754_rem_pio2+0x2f0>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fb ff0a 	bl	800028c <__adddf3>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4680      	mov	r8, r0
 800447e:	4689      	mov	r9, r1
 8004480:	4630      	mov	r0, r6
 8004482:	4639      	mov	r1, r7
 8004484:	f7fb ff00 	bl	8000288 <__aeabi_dsub>
 8004488:	a385      	add	r3, pc, #532	@ (adr r3, 80046a0 <__ieee754_rem_pio2+0x2f0>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fb fefd 	bl	800028c <__adddf3>
 8004492:	f04f 35ff 	mov.w	r5, #4294967295
 8004496:	e9c4 8900 	strd	r8, r9, [r4]
 800449a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800449e:	e7c4      	b.n	800442a <__ieee754_rem_pio2+0x7a>
 80044a0:	a381      	add	r3, pc, #516	@ (adr r3, 80046a8 <__ieee754_rem_pio2+0x2f8>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f7fb fef1 	bl	800028c <__adddf3>
 80044aa:	a381      	add	r3, pc, #516	@ (adr r3, 80046b0 <__ieee754_rem_pio2+0x300>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	f7fb feea 	bl	800028c <__adddf3>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4680      	mov	r8, r0
 80044be:	4689      	mov	r9, r1
 80044c0:	4630      	mov	r0, r6
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fb fee0 	bl	8000288 <__aeabi_dsub>
 80044c8:	a379      	add	r3, pc, #484	@ (adr r3, 80046b0 <__ieee754_rem_pio2+0x300>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	e7de      	b.n	800448e <__ieee754_rem_pio2+0xde>
 80044d0:	4b82      	ldr	r3, [pc, #520]	@ (80046dc <__ieee754_rem_pio2+0x32c>)
 80044d2:	4598      	cmp	r8, r3
 80044d4:	f200 80d1 	bhi.w	800467a <__ieee754_rem_pio2+0x2ca>
 80044d8:	f000 f966 	bl	80047a8 <fabs>
 80044dc:	ec57 6b10 	vmov	r6, r7, d0
 80044e0:	a375      	add	r3, pc, #468	@ (adr r3, 80046b8 <__ieee754_rem_pio2+0x308>)
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	4630      	mov	r0, r6
 80044e8:	4639      	mov	r1, r7
 80044ea:	f7fc f885 	bl	80005f8 <__aeabi_dmul>
 80044ee:	4b7c      	ldr	r3, [pc, #496]	@ (80046e0 <__ieee754_rem_pio2+0x330>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	f7fb fecb 	bl	800028c <__adddf3>
 80044f6:	f7fc fb19 	bl	8000b2c <__aeabi_d2iz>
 80044fa:	4605      	mov	r5, r0
 80044fc:	f7fc f812 	bl	8000524 <__aeabi_i2d>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004508:	a363      	add	r3, pc, #396	@ (adr r3, 8004698 <__ieee754_rem_pio2+0x2e8>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fc f873 	bl	80005f8 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fb feb5 	bl	8000288 <__aeabi_dsub>
 800451e:	a360      	add	r3, pc, #384	@ (adr r3, 80046a0 <__ieee754_rem_pio2+0x2f0>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	4682      	mov	sl, r0
 8004526:	468b      	mov	fp, r1
 8004528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452c:	f7fc f864 	bl	80005f8 <__aeabi_dmul>
 8004530:	2d1f      	cmp	r5, #31
 8004532:	4606      	mov	r6, r0
 8004534:	460f      	mov	r7, r1
 8004536:	dc0c      	bgt.n	8004552 <__ieee754_rem_pio2+0x1a2>
 8004538:	4b6a      	ldr	r3, [pc, #424]	@ (80046e4 <__ieee754_rem_pio2+0x334>)
 800453a:	1e6a      	subs	r2, r5, #1
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	4543      	cmp	r3, r8
 8004542:	d006      	beq.n	8004552 <__ieee754_rem_pio2+0x1a2>
 8004544:	4632      	mov	r2, r6
 8004546:	463b      	mov	r3, r7
 8004548:	4650      	mov	r0, sl
 800454a:	4659      	mov	r1, fp
 800454c:	f7fb fe9c 	bl	8000288 <__aeabi_dsub>
 8004550:	e00e      	b.n	8004570 <__ieee754_rem_pio2+0x1c0>
 8004552:	463b      	mov	r3, r7
 8004554:	4632      	mov	r2, r6
 8004556:	4650      	mov	r0, sl
 8004558:	4659      	mov	r1, fp
 800455a:	f7fb fe95 	bl	8000288 <__aeabi_dsub>
 800455e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004568:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800456c:	2b10      	cmp	r3, #16
 800456e:	dc02      	bgt.n	8004576 <__ieee754_rem_pio2+0x1c6>
 8004570:	e9c4 0100 	strd	r0, r1, [r4]
 8004574:	e039      	b.n	80045ea <__ieee754_rem_pio2+0x23a>
 8004576:	a34c      	add	r3, pc, #304	@ (adr r3, 80046a8 <__ieee754_rem_pio2+0x2f8>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004580:	f7fc f83a 	bl	80005f8 <__aeabi_dmul>
 8004584:	4606      	mov	r6, r0
 8004586:	460f      	mov	r7, r1
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4650      	mov	r0, sl
 800458e:	4659      	mov	r1, fp
 8004590:	f7fb fe7a 	bl	8000288 <__aeabi_dsub>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4680      	mov	r8, r0
 800459a:	4689      	mov	r9, r1
 800459c:	4650      	mov	r0, sl
 800459e:	4659      	mov	r1, fp
 80045a0:	f7fb fe72 	bl	8000288 <__aeabi_dsub>
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	f7fb fe6e 	bl	8000288 <__aeabi_dsub>
 80045ac:	a340      	add	r3, pc, #256	@ (adr r3, 80046b0 <__ieee754_rem_pio2+0x300>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	4606      	mov	r6, r0
 80045b4:	460f      	mov	r7, r1
 80045b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ba:	f7fc f81d 	bl	80005f8 <__aeabi_dmul>
 80045be:	4632      	mov	r2, r6
 80045c0:	463b      	mov	r3, r7
 80045c2:	f7fb fe61 	bl	8000288 <__aeabi_dsub>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4606      	mov	r6, r0
 80045cc:	460f      	mov	r7, r1
 80045ce:	4640      	mov	r0, r8
 80045d0:	4649      	mov	r1, r9
 80045d2:	f7fb fe59 	bl	8000288 <__aeabi_dsub>
 80045d6:	9a05      	ldr	r2, [sp, #20]
 80045d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b31      	cmp	r3, #49	@ 0x31
 80045e0:	dc20      	bgt.n	8004624 <__ieee754_rem_pio2+0x274>
 80045e2:	e9c4 0100 	strd	r0, r1, [r4]
 80045e6:	46c2      	mov	sl, r8
 80045e8:	46cb      	mov	fp, r9
 80045ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80045ee:	4650      	mov	r0, sl
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	4659      	mov	r1, fp
 80045f6:	f7fb fe47 	bl	8000288 <__aeabi_dsub>
 80045fa:	463b      	mov	r3, r7
 80045fc:	4632      	mov	r2, r6
 80045fe:	f7fb fe43 	bl	8000288 <__aeabi_dsub>
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800460a:	f6bf af0e 	bge.w	800442a <__ieee754_rem_pio2+0x7a>
 800460e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004618:	f8c4 8000 	str.w	r8, [r4]
 800461c:	60a0      	str	r0, [r4, #8]
 800461e:	60e3      	str	r3, [r4, #12]
 8004620:	426d      	negs	r5, r5
 8004622:	e702      	b.n	800442a <__ieee754_rem_pio2+0x7a>
 8004624:	a326      	add	r3, pc, #152	@ (adr r3, 80046c0 <__ieee754_rem_pio2+0x310>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800462e:	f7fb ffe3 	bl	80005f8 <__aeabi_dmul>
 8004632:	4606      	mov	r6, r0
 8004634:	460f      	mov	r7, r1
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f7fb fe23 	bl	8000288 <__aeabi_dsub>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4682      	mov	sl, r0
 8004648:	468b      	mov	fp, r1
 800464a:	4640      	mov	r0, r8
 800464c:	4649      	mov	r1, r9
 800464e:	f7fb fe1b 	bl	8000288 <__aeabi_dsub>
 8004652:	4632      	mov	r2, r6
 8004654:	463b      	mov	r3, r7
 8004656:	f7fb fe17 	bl	8000288 <__aeabi_dsub>
 800465a:	a31b      	add	r3, pc, #108	@ (adr r3, 80046c8 <__ieee754_rem_pio2+0x318>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	4606      	mov	r6, r0
 8004662:	460f      	mov	r7, r1
 8004664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004668:	f7fb ffc6 	bl	80005f8 <__aeabi_dmul>
 800466c:	4632      	mov	r2, r6
 800466e:	463b      	mov	r3, r7
 8004670:	f7fb fe0a 	bl	8000288 <__aeabi_dsub>
 8004674:	4606      	mov	r6, r0
 8004676:	460f      	mov	r7, r1
 8004678:	e764      	b.n	8004544 <__ieee754_rem_pio2+0x194>
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <__ieee754_rem_pio2+0x338>)
 800467c:	4598      	cmp	r8, r3
 800467e:	d935      	bls.n	80046ec <__ieee754_rem_pio2+0x33c>
 8004680:	4632      	mov	r2, r6
 8004682:	463b      	mov	r3, r7
 8004684:	4630      	mov	r0, r6
 8004686:	4639      	mov	r1, r7
 8004688:	f7fb fdfe 	bl	8000288 <__aeabi_dsub>
 800468c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004690:	e9c4 0100 	strd	r0, r1, [r4]
 8004694:	e69e      	b.n	80043d4 <__ieee754_rem_pio2+0x24>
 8004696:	bf00      	nop
 8004698:	54400000 	.word	0x54400000
 800469c:	3ff921fb 	.word	0x3ff921fb
 80046a0:	1a626331 	.word	0x1a626331
 80046a4:	3dd0b461 	.word	0x3dd0b461
 80046a8:	1a600000 	.word	0x1a600000
 80046ac:	3dd0b461 	.word	0x3dd0b461
 80046b0:	2e037073 	.word	0x2e037073
 80046b4:	3ba3198a 	.word	0x3ba3198a
 80046b8:	6dc9c883 	.word	0x6dc9c883
 80046bc:	3fe45f30 	.word	0x3fe45f30
 80046c0:	2e000000 	.word	0x2e000000
 80046c4:	3ba3198a 	.word	0x3ba3198a
 80046c8:	252049c1 	.word	0x252049c1
 80046cc:	397b839a 	.word	0x397b839a
 80046d0:	3fe921fb 	.word	0x3fe921fb
 80046d4:	4002d97b 	.word	0x4002d97b
 80046d8:	3ff921fb 	.word	0x3ff921fb
 80046dc:	413921fb 	.word	0x413921fb
 80046e0:	3fe00000 	.word	0x3fe00000
 80046e4:	0802b2fc 	.word	0x0802b2fc
 80046e8:	7fefffff 	.word	0x7fefffff
 80046ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80046f0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80046f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80046f8:	4630      	mov	r0, r6
 80046fa:	460f      	mov	r7, r1
 80046fc:	f7fc fa16 	bl	8000b2c <__aeabi_d2iz>
 8004700:	f7fb ff10 	bl	8000524 <__aeabi_i2d>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4630      	mov	r0, r6
 800470a:	4639      	mov	r1, r7
 800470c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004710:	f7fb fdba 	bl	8000288 <__aeabi_dsub>
 8004714:	4b22      	ldr	r3, [pc, #136]	@ (80047a0 <__ieee754_rem_pio2+0x3f0>)
 8004716:	2200      	movs	r2, #0
 8004718:	f7fb ff6e 	bl	80005f8 <__aeabi_dmul>
 800471c:	460f      	mov	r7, r1
 800471e:	4606      	mov	r6, r0
 8004720:	f7fc fa04 	bl	8000b2c <__aeabi_d2iz>
 8004724:	f7fb fefe 	bl	8000524 <__aeabi_i2d>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4630      	mov	r0, r6
 800472e:	4639      	mov	r1, r7
 8004730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004734:	f7fb fda8 	bl	8000288 <__aeabi_dsub>
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <__ieee754_rem_pio2+0x3f0>)
 800473a:	2200      	movs	r2, #0
 800473c:	f7fb ff5c 	bl	80005f8 <__aeabi_dmul>
 8004740:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004744:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004748:	f04f 0803 	mov.w	r8, #3
 800474c:	2600      	movs	r6, #0
 800474e:	2700      	movs	r7, #0
 8004750:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004754:	4632      	mov	r2, r6
 8004756:	463b      	mov	r3, r7
 8004758:	46c2      	mov	sl, r8
 800475a:	f108 38ff 	add.w	r8, r8, #4294967295
 800475e:	f7fc f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004762:	2800      	cmp	r0, #0
 8004764:	d1f4      	bne.n	8004750 <__ieee754_rem_pio2+0x3a0>
 8004766:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <__ieee754_rem_pio2+0x3f4>)
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	2302      	movs	r3, #2
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	462a      	mov	r2, r5
 8004770:	4653      	mov	r3, sl
 8004772:	4621      	mov	r1, r4
 8004774:	a806      	add	r0, sp, #24
 8004776:	f000 f81f 	bl	80047b8 <__kernel_rem_pio2>
 800477a:	9b04      	ldr	r3, [sp, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	4605      	mov	r5, r0
 8004780:	f6bf ae53 	bge.w	800442a <__ieee754_rem_pio2+0x7a>
 8004784:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004788:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800478c:	e9c4 2300 	strd	r2, r3, [r4]
 8004790:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004794:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004798:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800479c:	e740      	b.n	8004620 <__ieee754_rem_pio2+0x270>
 800479e:	bf00      	nop
 80047a0:	41700000 	.word	0x41700000
 80047a4:	0802b37c 	.word	0x0802b37c

080047a8 <fabs>:
 80047a8:	ec51 0b10 	vmov	r0, r1, d0
 80047ac:	4602      	mov	r2, r0
 80047ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80047b2:	ec43 2b10 	vmov	d0, r2, r3
 80047b6:	4770      	bx	lr

080047b8 <__kernel_rem_pio2>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	ed2d 8b02 	vpush	{d8}
 80047c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80047c4:	f112 0f14 	cmn.w	r2, #20
 80047c8:	9306      	str	r3, [sp, #24]
 80047ca:	9104      	str	r1, [sp, #16]
 80047cc:	4bc2      	ldr	r3, [pc, #776]	@ (8004ad8 <__kernel_rem_pio2+0x320>)
 80047ce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80047d0:	9008      	str	r0, [sp, #32]
 80047d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	9b06      	ldr	r3, [sp, #24]
 80047da:	f103 33ff 	add.w	r3, r3, #4294967295
 80047de:	bfa8      	it	ge
 80047e0:	1ed4      	subge	r4, r2, #3
 80047e2:	9305      	str	r3, [sp, #20]
 80047e4:	bfb2      	itee	lt
 80047e6:	2400      	movlt	r4, #0
 80047e8:	2318      	movge	r3, #24
 80047ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80047ee:	f06f 0317 	mvn.w	r3, #23
 80047f2:	fb04 3303 	mla	r3, r4, r3, r3
 80047f6:	eb03 0b02 	add.w	fp, r3, r2
 80047fa:	9b00      	ldr	r3, [sp, #0]
 80047fc:	9a05      	ldr	r2, [sp, #20]
 80047fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8004ac8 <__kernel_rem_pio2+0x310>
 8004802:	eb03 0802 	add.w	r8, r3, r2
 8004806:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004808:	1aa7      	subs	r7, r4, r2
 800480a:	ae20      	add	r6, sp, #128	@ 0x80
 800480c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004810:	2500      	movs	r5, #0
 8004812:	4545      	cmp	r5, r8
 8004814:	dd12      	ble.n	800483c <__kernel_rem_pio2+0x84>
 8004816:	9b06      	ldr	r3, [sp, #24]
 8004818:	aa20      	add	r2, sp, #128	@ 0x80
 800481a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800481e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004822:	2700      	movs	r7, #0
 8004824:	9b00      	ldr	r3, [sp, #0]
 8004826:	429f      	cmp	r7, r3
 8004828:	dc2e      	bgt.n	8004888 <__kernel_rem_pio2+0xd0>
 800482a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8004ac8 <__kernel_rem_pio2+0x310>
 800482e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004832:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004836:	46a8      	mov	r8, r5
 8004838:	2600      	movs	r6, #0
 800483a:	e01b      	b.n	8004874 <__kernel_rem_pio2+0xbc>
 800483c:	42ef      	cmn	r7, r5
 800483e:	d407      	bmi.n	8004850 <__kernel_rem_pio2+0x98>
 8004840:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004844:	f7fb fe6e 	bl	8000524 <__aeabi_i2d>
 8004848:	e8e6 0102 	strd	r0, r1, [r6], #8
 800484c:	3501      	adds	r5, #1
 800484e:	e7e0      	b.n	8004812 <__kernel_rem_pio2+0x5a>
 8004850:	ec51 0b18 	vmov	r0, r1, d8
 8004854:	e7f8      	b.n	8004848 <__kernel_rem_pio2+0x90>
 8004856:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800485a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800486a:	f7fb fd0f 	bl	800028c <__adddf3>
 800486e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004872:	3601      	adds	r6, #1
 8004874:	9b05      	ldr	r3, [sp, #20]
 8004876:	429e      	cmp	r6, r3
 8004878:	dded      	ble.n	8004856 <__kernel_rem_pio2+0x9e>
 800487a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800487e:	3701      	adds	r7, #1
 8004880:	ecaa 7b02 	vstmia	sl!, {d7}
 8004884:	3508      	adds	r5, #8
 8004886:	e7cd      	b.n	8004824 <__kernel_rem_pio2+0x6c>
 8004888:	9b00      	ldr	r3, [sp, #0]
 800488a:	f8dd 8000 	ldr.w	r8, [sp]
 800488e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004894:	930a      	str	r3, [sp, #40]	@ 0x28
 8004896:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800489c:	9309      	str	r3, [sp, #36]	@ 0x24
 800489e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80048a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048a4:	ab98      	add	r3, sp, #608	@ 0x260
 80048a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80048aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80048ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80048b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80048b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80048ba:	46a1      	mov	r9, r4
 80048bc:	46c2      	mov	sl, r8
 80048be:	f1ba 0f00 	cmp.w	sl, #0
 80048c2:	dc77      	bgt.n	80049b4 <__kernel_rem_pio2+0x1fc>
 80048c4:	4658      	mov	r0, fp
 80048c6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80048ca:	f000 fac5 	bl	8004e58 <scalbn>
 80048ce:	ec57 6b10 	vmov	r6, r7, d0
 80048d2:	2200      	movs	r2, #0
 80048d4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80048d8:	4630      	mov	r0, r6
 80048da:	4639      	mov	r1, r7
 80048dc:	f7fb fe8c 	bl	80005f8 <__aeabi_dmul>
 80048e0:	ec41 0b10 	vmov	d0, r0, r1
 80048e4:	f000 fb34 	bl	8004f50 <floor>
 80048e8:	4b7c      	ldr	r3, [pc, #496]	@ (8004adc <__kernel_rem_pio2+0x324>)
 80048ea:	ec51 0b10 	vmov	r0, r1, d0
 80048ee:	2200      	movs	r2, #0
 80048f0:	f7fb fe82 	bl	80005f8 <__aeabi_dmul>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4630      	mov	r0, r6
 80048fa:	4639      	mov	r1, r7
 80048fc:	f7fb fcc4 	bl	8000288 <__aeabi_dsub>
 8004900:	460f      	mov	r7, r1
 8004902:	4606      	mov	r6, r0
 8004904:	f7fc f912 	bl	8000b2c <__aeabi_d2iz>
 8004908:	9002      	str	r0, [sp, #8]
 800490a:	f7fb fe0b 	bl	8000524 <__aeabi_i2d>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4630      	mov	r0, r6
 8004914:	4639      	mov	r1, r7
 8004916:	f7fb fcb7 	bl	8000288 <__aeabi_dsub>
 800491a:	f1bb 0f00 	cmp.w	fp, #0
 800491e:	4606      	mov	r6, r0
 8004920:	460f      	mov	r7, r1
 8004922:	dd6c      	ble.n	80049fe <__kernel_rem_pio2+0x246>
 8004924:	f108 31ff 	add.w	r1, r8, #4294967295
 8004928:	ab0c      	add	r3, sp, #48	@ 0x30
 800492a:	9d02      	ldr	r5, [sp, #8]
 800492c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004930:	f1cb 0018 	rsb	r0, fp, #24
 8004934:	fa43 f200 	asr.w	r2, r3, r0
 8004938:	4415      	add	r5, r2
 800493a:	4082      	lsls	r2, r0
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004940:	9502      	str	r5, [sp, #8]
 8004942:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004946:	f1cb 0217 	rsb	r2, fp, #23
 800494a:	fa43 f902 	asr.w	r9, r3, r2
 800494e:	f1b9 0f00 	cmp.w	r9, #0
 8004952:	dd64      	ble.n	8004a1e <__kernel_rem_pio2+0x266>
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	3301      	adds	r3, #1
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	4615      	mov	r5, r2
 800495e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004962:	4590      	cmp	r8, r2
 8004964:	f300 80a1 	bgt.w	8004aaa <__kernel_rem_pio2+0x2f2>
 8004968:	f1bb 0f00 	cmp.w	fp, #0
 800496c:	dd07      	ble.n	800497e <__kernel_rem_pio2+0x1c6>
 800496e:	f1bb 0f01 	cmp.w	fp, #1
 8004972:	f000 80c1 	beq.w	8004af8 <__kernel_rem_pio2+0x340>
 8004976:	f1bb 0f02 	cmp.w	fp, #2
 800497a:	f000 80c8 	beq.w	8004b0e <__kernel_rem_pio2+0x356>
 800497e:	f1b9 0f02 	cmp.w	r9, #2
 8004982:	d14c      	bne.n	8004a1e <__kernel_rem_pio2+0x266>
 8004984:	4632      	mov	r2, r6
 8004986:	463b      	mov	r3, r7
 8004988:	4955      	ldr	r1, [pc, #340]	@ (8004ae0 <__kernel_rem_pio2+0x328>)
 800498a:	2000      	movs	r0, #0
 800498c:	f7fb fc7c 	bl	8000288 <__aeabi_dsub>
 8004990:	4606      	mov	r6, r0
 8004992:	460f      	mov	r7, r1
 8004994:	2d00      	cmp	r5, #0
 8004996:	d042      	beq.n	8004a1e <__kernel_rem_pio2+0x266>
 8004998:	4658      	mov	r0, fp
 800499a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004ad0 <__kernel_rem_pio2+0x318>
 800499e:	f000 fa5b 	bl	8004e58 <scalbn>
 80049a2:	4630      	mov	r0, r6
 80049a4:	4639      	mov	r1, r7
 80049a6:	ec53 2b10 	vmov	r2, r3, d0
 80049aa:	f7fb fc6d 	bl	8000288 <__aeabi_dsub>
 80049ae:	4606      	mov	r6, r0
 80049b0:	460f      	mov	r7, r1
 80049b2:	e034      	b.n	8004a1e <__kernel_rem_pio2+0x266>
 80049b4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ae4 <__kernel_rem_pio2+0x32c>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049bc:	f7fb fe1c 	bl	80005f8 <__aeabi_dmul>
 80049c0:	f7fc f8b4 	bl	8000b2c <__aeabi_d2iz>
 80049c4:	f7fb fdae 	bl	8000524 <__aeabi_i2d>
 80049c8:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <__kernel_rem_pio2+0x330>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	4606      	mov	r6, r0
 80049ce:	460f      	mov	r7, r1
 80049d0:	f7fb fe12 	bl	80005f8 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049dc:	f7fb fc54 	bl	8000288 <__aeabi_dsub>
 80049e0:	f7fc f8a4 	bl	8000b2c <__aeabi_d2iz>
 80049e4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80049e8:	f849 0b04 	str.w	r0, [r9], #4
 80049ec:	4639      	mov	r1, r7
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7fb fc4c 	bl	800028c <__adddf3>
 80049f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049fc:	e75f      	b.n	80048be <__kernel_rem_pio2+0x106>
 80049fe:	d107      	bne.n	8004a10 <__kernel_rem_pio2+0x258>
 8004a00:	f108 33ff 	add.w	r3, r8, #4294967295
 8004a04:	aa0c      	add	r2, sp, #48	@ 0x30
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004a0e:	e79e      	b.n	800494e <__kernel_rem_pio2+0x196>
 8004a10:	4b36      	ldr	r3, [pc, #216]	@ (8004aec <__kernel_rem_pio2+0x334>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	f7fc f876 	bl	8000b04 <__aeabi_dcmpge>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d143      	bne.n	8004aa4 <__kernel_rem_pio2+0x2ec>
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2300      	movs	r3, #0
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fc f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	f000 80c1 	beq.w	8004bb2 <__kernel_rem_pio2+0x3fa>
 8004a30:	f108 33ff 	add.w	r3, r8, #4294967295
 8004a34:	2200      	movs	r2, #0
 8004a36:	9900      	ldr	r1, [sp, #0]
 8004a38:	428b      	cmp	r3, r1
 8004a3a:	da70      	bge.n	8004b1e <__kernel_rem_pio2+0x366>
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	f000 808b 	beq.w	8004b58 <__kernel_rem_pio2+0x3a0>
 8004a42:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a46:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a48:	f1ab 0b18 	sub.w	fp, fp, #24
 8004a4c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f6      	beq.n	8004a42 <__kernel_rem_pio2+0x28a>
 8004a54:	4658      	mov	r0, fp
 8004a56:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8004ad0 <__kernel_rem_pio2+0x318>
 8004a5a:	f000 f9fd 	bl	8004e58 <scalbn>
 8004a5e:	f108 0301 	add.w	r3, r8, #1
 8004a62:	00da      	lsls	r2, r3, #3
 8004a64:	9205      	str	r2, [sp, #20]
 8004a66:	ec55 4b10 	vmov	r4, r5, d0
 8004a6a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004a6c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004ae4 <__kernel_rem_pio2+0x32c>
 8004a70:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004a74:	4646      	mov	r6, r8
 8004a76:	f04f 0a00 	mov.w	sl, #0
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	f280 80d1 	bge.w	8004c22 <__kernel_rem_pio2+0x46a>
 8004a80:	4644      	mov	r4, r8
 8004a82:	2c00      	cmp	r4, #0
 8004a84:	f2c0 80ff 	blt.w	8004c86 <__kernel_rem_pio2+0x4ce>
 8004a88:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <__kernel_rem_pio2+0x338>)
 8004a8a:	461f      	mov	r7, r3
 8004a8c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004a8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a92:	9306      	str	r3, [sp, #24]
 8004a94:	f04f 0a00 	mov.w	sl, #0
 8004a98:	f04f 0b00 	mov.w	fp, #0
 8004a9c:	2600      	movs	r6, #0
 8004a9e:	eba8 0504 	sub.w	r5, r8, r4
 8004aa2:	e0e4      	b.n	8004c6e <__kernel_rem_pio2+0x4b6>
 8004aa4:	f04f 0902 	mov.w	r9, #2
 8004aa8:	e754      	b.n	8004954 <__kernel_rem_pio2+0x19c>
 8004aaa:	f854 3b04 	ldr.w	r3, [r4], #4
 8004aae:	bb0d      	cbnz	r5, 8004af4 <__kernel_rem_pio2+0x33c>
 8004ab0:	b123      	cbz	r3, 8004abc <__kernel_rem_pio2+0x304>
 8004ab2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004ab6:	f844 3c04 	str.w	r3, [r4, #-4]
 8004aba:	2301      	movs	r3, #1
 8004abc:	3201      	adds	r2, #1
 8004abe:	461d      	mov	r5, r3
 8004ac0:	e74f      	b.n	8004962 <__kernel_rem_pio2+0x1aa>
 8004ac2:	bf00      	nop
 8004ac4:	f3af 8000 	nop.w
	...
 8004ad4:	3ff00000 	.word	0x3ff00000
 8004ad8:	0802b4c8 	.word	0x0802b4c8
 8004adc:	40200000 	.word	0x40200000
 8004ae0:	3ff00000 	.word	0x3ff00000
 8004ae4:	3e700000 	.word	0x3e700000
 8004ae8:	41700000 	.word	0x41700000
 8004aec:	3fe00000 	.word	0x3fe00000
 8004af0:	0802b488 	.word	0x0802b488
 8004af4:	1acb      	subs	r3, r1, r3
 8004af6:	e7de      	b.n	8004ab6 <__kernel_rem_pio2+0x2fe>
 8004af8:	f108 32ff 	add.w	r2, r8, #4294967295
 8004afc:	ab0c      	add	r3, sp, #48	@ 0x30
 8004afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b06:	a90c      	add	r1, sp, #48	@ 0x30
 8004b08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b0c:	e737      	b.n	800497e <__kernel_rem_pio2+0x1c6>
 8004b0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8004b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004b1c:	e7f3      	b.n	8004b06 <__kernel_rem_pio2+0x34e>
 8004b1e:	a90c      	add	r1, sp, #48	@ 0x30
 8004b20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	430a      	orrs	r2, r1
 8004b28:	e785      	b.n	8004a36 <__kernel_rem_pio2+0x27e>
 8004b2a:	3401      	adds	r4, #1
 8004b2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d0fa      	beq.n	8004b2a <__kernel_rem_pio2+0x372>
 8004b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b3a:	eb0d 0503 	add.w	r5, sp, r3
 8004b3e:	9b06      	ldr	r3, [sp, #24]
 8004b40:	aa20      	add	r2, sp, #128	@ 0x80
 8004b42:	4443      	add	r3, r8
 8004b44:	f108 0701 	add.w	r7, r8, #1
 8004b48:	3d98      	subs	r5, #152	@ 0x98
 8004b4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004b4e:	4444      	add	r4, r8
 8004b50:	42bc      	cmp	r4, r7
 8004b52:	da04      	bge.n	8004b5e <__kernel_rem_pio2+0x3a6>
 8004b54:	46a0      	mov	r8, r4
 8004b56:	e6a2      	b.n	800489e <__kernel_rem_pio2+0xe6>
 8004b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b5a:	2401      	movs	r4, #1
 8004b5c:	e7e6      	b.n	8004b2c <__kernel_rem_pio2+0x374>
 8004b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004b64:	f7fb fcde 	bl	8000524 <__aeabi_i2d>
 8004b68:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8004e28 <__kernel_rem_pio2+0x670>
 8004b6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004b70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b78:	46b2      	mov	sl, r6
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	9b05      	ldr	r3, [sp, #20]
 8004b80:	4598      	cmp	r8, r3
 8004b82:	dd05      	ble.n	8004b90 <__kernel_rem_pio2+0x3d8>
 8004b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b88:	3701      	adds	r7, #1
 8004b8a:	eca5 7b02 	vstmia	r5!, {d7}
 8004b8e:	e7df      	b.n	8004b50 <__kernel_rem_pio2+0x398>
 8004b90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004b94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ba4:	f7fb fb72 	bl	800028c <__adddf3>
 8004ba8:	f108 0801 	add.w	r8, r8, #1
 8004bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bb0:	e7e5      	b.n	8004b7e <__kernel_rem_pio2+0x3c6>
 8004bb2:	f1cb 0000 	rsb	r0, fp, #0
 8004bb6:	ec47 6b10 	vmov	d0, r6, r7
 8004bba:	f000 f94d 	bl	8004e58 <scalbn>
 8004bbe:	ec55 4b10 	vmov	r4, r5, d0
 8004bc2:	4b9b      	ldr	r3, [pc, #620]	@ (8004e30 <__kernel_rem_pio2+0x678>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f7fb ff9b 	bl	8000b04 <__aeabi_dcmpge>
 8004bce:	b300      	cbz	r0, 8004c12 <__kernel_rem_pio2+0x45a>
 8004bd0:	4b98      	ldr	r3, [pc, #608]	@ (8004e34 <__kernel_rem_pio2+0x67c>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fb fd0e 	bl	80005f8 <__aeabi_dmul>
 8004bdc:	f7fb ffa6 	bl	8000b2c <__aeabi_d2iz>
 8004be0:	4606      	mov	r6, r0
 8004be2:	f7fb fc9f 	bl	8000524 <__aeabi_i2d>
 8004be6:	4b92      	ldr	r3, [pc, #584]	@ (8004e30 <__kernel_rem_pio2+0x678>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	f7fb fd05 	bl	80005f8 <__aeabi_dmul>
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7fb fb47 	bl	8000288 <__aeabi_dsub>
 8004bfa:	f7fb ff97 	bl	8000b2c <__aeabi_d2iz>
 8004bfe:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c00:	f10b 0b18 	add.w	fp, fp, #24
 8004c04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004c08:	f108 0801 	add.w	r8, r8, #1
 8004c0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004c10:	e720      	b.n	8004a54 <__kernel_rem_pio2+0x29c>
 8004c12:	4620      	mov	r0, r4
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7fb ff89 	bl	8000b2c <__aeabi_d2iz>
 8004c1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004c20:	e718      	b.n	8004a54 <__kernel_rem_pio2+0x29c>
 8004c22:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c28:	f7fb fc7c 	bl	8000524 <__aeabi_i2d>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	f7fb fce2 	bl	80005f8 <__aeabi_dmul>
 8004c34:	4652      	mov	r2, sl
 8004c36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004c3a:	465b      	mov	r3, fp
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7fb fcda 	bl	80005f8 <__aeabi_dmul>
 8004c44:	3e01      	subs	r6, #1
 8004c46:	4604      	mov	r4, r0
 8004c48:	460d      	mov	r5, r1
 8004c4a:	e716      	b.n	8004a7a <__kernel_rem_pio2+0x2c2>
 8004c4c:	9906      	ldr	r1, [sp, #24]
 8004c4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004c52:	9106      	str	r1, [sp, #24]
 8004c54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004c58:	f7fb fcce 	bl	80005f8 <__aeabi_dmul>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4650      	mov	r0, sl
 8004c62:	4659      	mov	r1, fp
 8004c64:	f7fb fb12 	bl	800028c <__adddf3>
 8004c68:	3601      	adds	r6, #1
 8004c6a:	4682      	mov	sl, r0
 8004c6c:	468b      	mov	fp, r1
 8004c6e:	9b00      	ldr	r3, [sp, #0]
 8004c70:	429e      	cmp	r6, r3
 8004c72:	dc01      	bgt.n	8004c78 <__kernel_rem_pio2+0x4c0>
 8004c74:	42ae      	cmp	r6, r5
 8004c76:	dde9      	ble.n	8004c4c <__kernel_rem_pio2+0x494>
 8004c78:	ab48      	add	r3, sp, #288	@ 0x120
 8004c7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004c7e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004c82:	3c01      	subs	r4, #1
 8004c84:	e6fd      	b.n	8004a82 <__kernel_rem_pio2+0x2ca>
 8004c86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	dc0b      	bgt.n	8004ca4 <__kernel_rem_pio2+0x4ec>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dc35      	bgt.n	8004cfc <__kernel_rem_pio2+0x544>
 8004c90:	d059      	beq.n	8004d46 <__kernel_rem_pio2+0x58e>
 8004c92:	9b02      	ldr	r3, [sp, #8]
 8004c94:	f003 0007 	and.w	r0, r3, #7
 8004c98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004c9c:	ecbd 8b02 	vpop	{d8}
 8004ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d1f3      	bne.n	8004c92 <__kernel_rem_pio2+0x4da>
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004cb0:	eb0d 0403 	add.w	r4, sp, r3
 8004cb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004cb8:	4625      	mov	r5, r4
 8004cba:	46c2      	mov	sl, r8
 8004cbc:	f1ba 0f00 	cmp.w	sl, #0
 8004cc0:	dc69      	bgt.n	8004d96 <__kernel_rem_pio2+0x5de>
 8004cc2:	4645      	mov	r5, r8
 8004cc4:	2d01      	cmp	r5, #1
 8004cc6:	f300 8087 	bgt.w	8004dd8 <__kernel_rem_pio2+0x620>
 8004cca:	9c05      	ldr	r4, [sp, #20]
 8004ccc:	ab48      	add	r3, sp, #288	@ 0x120
 8004cce:	441c      	add	r4, r3
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f1b8 0f01 	cmp.w	r8, #1
 8004cd8:	f300 809c 	bgt.w	8004e14 <__kernel_rem_pio2+0x65c>
 8004cdc:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004ce0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004ce4:	f1b9 0f00 	cmp.w	r9, #0
 8004ce8:	f040 80a6 	bne.w	8004e38 <__kernel_rem_pio2+0x680>
 8004cec:	9b04      	ldr	r3, [sp, #16]
 8004cee:	e9c3 5600 	strd	r5, r6, [r3]
 8004cf2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004cf6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004cfa:	e7ca      	b.n	8004c92 <__kernel_rem_pio2+0x4da>
 8004cfc:	9d05      	ldr	r5, [sp, #20]
 8004cfe:	ab48      	add	r3, sp, #288	@ 0x120
 8004d00:	441d      	add	r5, r3
 8004d02:	4644      	mov	r4, r8
 8004d04:	2000      	movs	r0, #0
 8004d06:	2100      	movs	r1, #0
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	da35      	bge.n	8004d78 <__kernel_rem_pio2+0x5c0>
 8004d0c:	f1b9 0f00 	cmp.w	r9, #0
 8004d10:	d038      	beq.n	8004d84 <__kernel_rem_pio2+0x5cc>
 8004d12:	4602      	mov	r2, r0
 8004d14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d18:	9c04      	ldr	r4, [sp, #16]
 8004d1a:	e9c4 2300 	strd	r2, r3, [r4]
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004d26:	f7fb faaf 	bl	8000288 <__aeabi_dsub>
 8004d2a:	ad4a      	add	r5, sp, #296	@ 0x128
 8004d2c:	2401      	movs	r4, #1
 8004d2e:	45a0      	cmp	r8, r4
 8004d30:	da2b      	bge.n	8004d8a <__kernel_rem_pio2+0x5d2>
 8004d32:	f1b9 0f00 	cmp.w	r9, #0
 8004d36:	d002      	beq.n	8004d3e <__kernel_rem_pio2+0x586>
 8004d38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004d44:	e7a5      	b.n	8004c92 <__kernel_rem_pio2+0x4da>
 8004d46:	9c05      	ldr	r4, [sp, #20]
 8004d48:	ab48      	add	r3, sp, #288	@ 0x120
 8004d4a:	441c      	add	r4, r3
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f1b8 0f00 	cmp.w	r8, #0
 8004d54:	da09      	bge.n	8004d6a <__kernel_rem_pio2+0x5b2>
 8004d56:	f1b9 0f00 	cmp.w	r9, #0
 8004d5a:	d002      	beq.n	8004d62 <__kernel_rem_pio2+0x5aa>
 8004d5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d60:	4619      	mov	r1, r3
 8004d62:	9b04      	ldr	r3, [sp, #16]
 8004d64:	e9c3 0100 	strd	r0, r1, [r3]
 8004d68:	e793      	b.n	8004c92 <__kernel_rem_pio2+0x4da>
 8004d6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d6e:	f7fb fa8d 	bl	800028c <__adddf3>
 8004d72:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d76:	e7eb      	b.n	8004d50 <__kernel_rem_pio2+0x598>
 8004d78:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004d7c:	f7fb fa86 	bl	800028c <__adddf3>
 8004d80:	3c01      	subs	r4, #1
 8004d82:	e7c1      	b.n	8004d08 <__kernel_rem_pio2+0x550>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	e7c6      	b.n	8004d18 <__kernel_rem_pio2+0x560>
 8004d8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004d8e:	f7fb fa7d 	bl	800028c <__adddf3>
 8004d92:	3401      	adds	r4, #1
 8004d94:	e7cb      	b.n	8004d2e <__kernel_rem_pio2+0x576>
 8004d96:	ed35 7b02 	vldmdb	r5!, {d7}
 8004d9a:	ed8d 7b00 	vstr	d7, [sp]
 8004d9e:	ed95 7b02 	vldr	d7, [r5, #8]
 8004da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004da6:	ec53 2b17 	vmov	r2, r3, d7
 8004daa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004dae:	f7fb fa6d 	bl	800028c <__adddf3>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4606      	mov	r6, r0
 8004db8:	460f      	mov	r7, r1
 8004dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dbe:	f7fb fa63 	bl	8000288 <__aeabi_dsub>
 8004dc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dc6:	f7fb fa61 	bl	800028c <__adddf3>
 8004dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004dd2:	e9c5 6700 	strd	r6, r7, [r5]
 8004dd6:	e771      	b.n	8004cbc <__kernel_rem_pio2+0x504>
 8004dd8:	ed34 7b02 	vldmdb	r4!, {d7}
 8004ddc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004de0:	ec51 0b17 	vmov	r0, r1, d7
 8004de4:	4652      	mov	r2, sl
 8004de6:	465b      	mov	r3, fp
 8004de8:	ed8d 7b00 	vstr	d7, [sp]
 8004dec:	f7fb fa4e 	bl	800028c <__adddf3>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4606      	mov	r6, r0
 8004df6:	460f      	mov	r7, r1
 8004df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dfc:	f7fb fa44 	bl	8000288 <__aeabi_dsub>
 8004e00:	4652      	mov	r2, sl
 8004e02:	465b      	mov	r3, fp
 8004e04:	f7fb fa42 	bl	800028c <__adddf3>
 8004e08:	3d01      	subs	r5, #1
 8004e0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e0e:	e9c4 6700 	strd	r6, r7, [r4]
 8004e12:	e757      	b.n	8004cc4 <__kernel_rem_pio2+0x50c>
 8004e14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004e18:	f7fb fa38 	bl	800028c <__adddf3>
 8004e1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e20:	e758      	b.n	8004cd4 <__kernel_rem_pio2+0x51c>
 8004e22:	bf00      	nop
 8004e24:	f3af 8000 	nop.w
	...
 8004e30:	41700000 	.word	0x41700000
 8004e34:	3e700000 	.word	0x3e700000
 8004e38:	9b04      	ldr	r3, [sp, #16]
 8004e3a:	9a04      	ldr	r2, [sp, #16]
 8004e3c:	601d      	str	r5, [r3, #0]
 8004e3e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004e42:	605c      	str	r4, [r3, #4]
 8004e44:	609f      	str	r7, [r3, #8]
 8004e46:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004e4a:	60d3      	str	r3, [r2, #12]
 8004e4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e50:	6110      	str	r0, [r2, #16]
 8004e52:	6153      	str	r3, [r2, #20]
 8004e54:	e71d      	b.n	8004c92 <__kernel_rem_pio2+0x4da>
 8004e56:	bf00      	nop

08004e58 <scalbn>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	ec55 4b10 	vmov	r4, r5, d0
 8004e5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004e62:	4606      	mov	r6, r0
 8004e64:	462b      	mov	r3, r5
 8004e66:	b991      	cbnz	r1, 8004e8e <scalbn+0x36>
 8004e68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	d03b      	beq.n	8004ee8 <scalbn+0x90>
 8004e70:	4b33      	ldr	r3, [pc, #204]	@ (8004f40 <scalbn+0xe8>)
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	2200      	movs	r2, #0
 8004e78:	f7fb fbbe 	bl	80005f8 <__aeabi_dmul>
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <scalbn+0xec>)
 8004e7e:	429e      	cmp	r6, r3
 8004e80:	4604      	mov	r4, r0
 8004e82:	460d      	mov	r5, r1
 8004e84:	da0f      	bge.n	8004ea6 <scalbn+0x4e>
 8004e86:	a326      	add	r3, pc, #152	@ (adr r3, 8004f20 <scalbn+0xc8>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	e01e      	b.n	8004ecc <scalbn+0x74>
 8004e8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004e92:	4291      	cmp	r1, r2
 8004e94:	d10b      	bne.n	8004eae <scalbn+0x56>
 8004e96:	4622      	mov	r2, r4
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb f9f6 	bl	800028c <__adddf3>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	e020      	b.n	8004ee8 <scalbn+0x90>
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004eac:	3936      	subs	r1, #54	@ 0x36
 8004eae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004eb2:	4296      	cmp	r6, r2
 8004eb4:	dd0d      	ble.n	8004ed2 <scalbn+0x7a>
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	a11b      	add	r1, pc, #108	@ (adr r1, 8004f28 <scalbn+0xd0>)
 8004eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ebe:	da02      	bge.n	8004ec6 <scalbn+0x6e>
 8004ec0:	a11b      	add	r1, pc, #108	@ (adr r1, 8004f30 <scalbn+0xd8>)
 8004ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec6:	a318      	add	r3, pc, #96	@ (adr r3, 8004f28 <scalbn+0xd0>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb fb94 	bl	80005f8 <__aeabi_dmul>
 8004ed0:	e7e6      	b.n	8004ea0 <scalbn+0x48>
 8004ed2:	1872      	adds	r2, r6, r1
 8004ed4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004ed8:	428a      	cmp	r2, r1
 8004eda:	dcec      	bgt.n	8004eb6 <scalbn+0x5e>
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	dd06      	ble.n	8004eee <scalbn+0x96>
 8004ee0:	f36f 531e 	bfc	r3, #20, #11
 8004ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ee8:	ec45 4b10 	vmov	d0, r4, r5
 8004eec:	bd70      	pop	{r4, r5, r6, pc}
 8004eee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004ef2:	da08      	bge.n	8004f06 <scalbn+0xae>
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	a10a      	add	r1, pc, #40	@ (adr r1, 8004f20 <scalbn+0xc8>)
 8004ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004efc:	dac3      	bge.n	8004e86 <scalbn+0x2e>
 8004efe:	a10e      	add	r1, pc, #56	@ (adr r1, 8004f38 <scalbn+0xe0>)
 8004f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f04:	e7bf      	b.n	8004e86 <scalbn+0x2e>
 8004f06:	3236      	adds	r2, #54	@ 0x36
 8004f08:	f36f 531e 	bfc	r3, #20, #11
 8004f0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f10:	4620      	mov	r0, r4
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <scalbn+0xf0>)
 8004f14:	4629      	mov	r1, r5
 8004f16:	2200      	movs	r2, #0
 8004f18:	e7d8      	b.n	8004ecc <scalbn+0x74>
 8004f1a:	bf00      	nop
 8004f1c:	f3af 8000 	nop.w
 8004f20:	c2f8f359 	.word	0xc2f8f359
 8004f24:	01a56e1f 	.word	0x01a56e1f
 8004f28:	8800759c 	.word	0x8800759c
 8004f2c:	7e37e43c 	.word	0x7e37e43c
 8004f30:	8800759c 	.word	0x8800759c
 8004f34:	fe37e43c 	.word	0xfe37e43c
 8004f38:	c2f8f359 	.word	0xc2f8f359
 8004f3c:	81a56e1f 	.word	0x81a56e1f
 8004f40:	43500000 	.word	0x43500000
 8004f44:	ffff3cb0 	.word	0xffff3cb0
 8004f48:	3c900000 	.word	0x3c900000
 8004f4c:	00000000 	.word	0x00000000

08004f50 <floor>:
 8004f50:	ec51 0b10 	vmov	r0, r1, d0
 8004f54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004f60:	2e13      	cmp	r6, #19
 8004f62:	460c      	mov	r4, r1
 8004f64:	4605      	mov	r5, r0
 8004f66:	4680      	mov	r8, r0
 8004f68:	dc34      	bgt.n	8004fd4 <floor+0x84>
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	da17      	bge.n	8004f9e <floor+0x4e>
 8004f6e:	a332      	add	r3, pc, #200	@ (adr r3, 8005038 <floor+0xe8>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f7fb f98a 	bl	800028c <__adddf3>
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f7fb fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8004f80:	b150      	cbz	r0, 8004f98 <floor+0x48>
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	da55      	bge.n	8005032 <floor+0xe2>
 8004f86:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004f8a:	432c      	orrs	r4, r5
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	42ac      	cmp	r4, r5
 8004f90:	4c2b      	ldr	r4, [pc, #172]	@ (8005040 <floor+0xf0>)
 8004f92:	bf08      	it	eq
 8004f94:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e023      	b.n	8004fe6 <floor+0x96>
 8004f9e:	4f29      	ldr	r7, [pc, #164]	@ (8005044 <floor+0xf4>)
 8004fa0:	4137      	asrs	r7, r6
 8004fa2:	ea01 0307 	and.w	r3, r1, r7
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	d01d      	beq.n	8004fe6 <floor+0x96>
 8004faa:	a323      	add	r3, pc, #140	@ (adr r3, 8005038 <floor+0xe8>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb f96c 	bl	800028c <__adddf3>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f7fb fdae 	bl	8000b18 <__aeabi_dcmpgt>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d0eb      	beq.n	8004f98 <floor+0x48>
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	bfbe      	ittt	lt
 8004fc4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004fc8:	4133      	asrlt	r3, r6
 8004fca:	18e4      	addlt	r4, r4, r3
 8004fcc:	ea24 0407 	bic.w	r4, r4, r7
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	e7e1      	b.n	8004f98 <floor+0x48>
 8004fd4:	2e33      	cmp	r6, #51	@ 0x33
 8004fd6:	dd0a      	ble.n	8004fee <floor+0x9e>
 8004fd8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004fdc:	d103      	bne.n	8004fe6 <floor+0x96>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	f7fb f953 	bl	800028c <__adddf3>
 8004fe6:	ec41 0b10 	vmov	d0, r0, r1
 8004fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004ff2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ff6:	40df      	lsrs	r7, r3
 8004ff8:	4207      	tst	r7, r0
 8004ffa:	d0f4      	beq.n	8004fe6 <floor+0x96>
 8004ffc:	a30e      	add	r3, pc, #56	@ (adr r3, 8005038 <floor+0xe8>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb f943 	bl	800028c <__adddf3>
 8005006:	2200      	movs	r2, #0
 8005008:	2300      	movs	r3, #0
 800500a:	f7fb fd85 	bl	8000b18 <__aeabi_dcmpgt>
 800500e:	2800      	cmp	r0, #0
 8005010:	d0c2      	beq.n	8004f98 <floor+0x48>
 8005012:	2c00      	cmp	r4, #0
 8005014:	da0a      	bge.n	800502c <floor+0xdc>
 8005016:	2e14      	cmp	r6, #20
 8005018:	d101      	bne.n	800501e <floor+0xce>
 800501a:	3401      	adds	r4, #1
 800501c:	e006      	b.n	800502c <floor+0xdc>
 800501e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005022:	2301      	movs	r3, #1
 8005024:	40b3      	lsls	r3, r6
 8005026:	441d      	add	r5, r3
 8005028:	4545      	cmp	r5, r8
 800502a:	d3f6      	bcc.n	800501a <floor+0xca>
 800502c:	ea25 0507 	bic.w	r5, r5, r7
 8005030:	e7b2      	b.n	8004f98 <floor+0x48>
 8005032:	2500      	movs	r5, #0
 8005034:	462c      	mov	r4, r5
 8005036:	e7af      	b.n	8004f98 <floor+0x48>
 8005038:	8800759c 	.word	0x8800759c
 800503c:	7e37e43c 	.word	0x7e37e43c
 8005040:	bff00000 	.word	0xbff00000
 8005044:	000fffff 	.word	0x000fffff

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
